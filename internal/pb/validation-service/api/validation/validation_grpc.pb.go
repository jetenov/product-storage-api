// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package validation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ValidateAPIClient is the client API for ValidateAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidateAPIClient interface {
	ValidateProducts(ctx context.Context, in *ValidateProductsRequest, opts ...grpc.CallOption) (*ValidateProductsResponse, error)
}

type validateAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewValidateAPIClient(cc grpc.ClientConnInterface) ValidateAPIClient {
	return &validateAPIClient{cc}
}

func (c *validateAPIClient) ValidateProducts(ctx context.Context, in *ValidateProductsRequest, opts ...grpc.CallOption) (*ValidateProductsResponse, error) {
	out := new(ValidateProductsResponse)
	err := c.cc.Invoke(ctx, "/dg.ocb.product_creation.validation_service.pkg.product.ValidateAPI/ValidateProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidateAPIServer is the server API for ValidateAPI service.
// All implementations must embed UnimplementedValidateAPIServer
// for forward compatibility
type ValidateAPIServer interface {
	ValidateProducts(context.Context, *ValidateProductsRequest) (*ValidateProductsResponse, error)
	mustEmbedUnimplementedValidateAPIServer()
}

// UnimplementedValidateAPIServer must be embedded to have forward compatible implementations.
type UnimplementedValidateAPIServer struct {
}

func (UnimplementedValidateAPIServer) ValidateProducts(context.Context, *ValidateProductsRequest) (*ValidateProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateProducts not implemented")
}
func (UnimplementedValidateAPIServer) mustEmbedUnimplementedValidateAPIServer() {}

// UnsafeValidateAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidateAPIServer will
// result in compilation errors.
type UnsafeValidateAPIServer interface {
	mustEmbedUnimplementedValidateAPIServer()
}

func RegisterValidateAPIServer(s grpc.ServiceRegistrar, srv ValidateAPIServer) {
	s.RegisterService(&ValidateAPI_ServiceDesc, srv)
}

func _ValidateAPI_ValidateProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidateAPIServer).ValidateProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.ocb.product_creation.validation_service.pkg.product.ValidateAPI/ValidateProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidateAPIServer).ValidateProducts(ctx, req.(*ValidateProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ValidateAPI_ServiceDesc is the grpc.ServiceDesc for ValidateAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValidateAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dg.ocb.product_creation.validation_service.pkg.product.ValidateAPI",
	HandlerType: (*ValidateAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateProducts",
			Handler:    _ValidateAPI_ValidateProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.dg.ru/ocb/product-creation/validation-service/api/validation/validation.proto",
}
