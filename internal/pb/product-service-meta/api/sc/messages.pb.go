// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.1
// source: gitlab.dg.ru/product-service/go/product-service-meta/api/sc/messages.proto

package sc

import (
	_ "github.com/gogo/protobuf/gogoproto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetCommercialCategoriesByMetazonIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetazonIds []int64 `protobuf:"varint,1,rep,packed,name=metazon_ids,json=metazonIds,proto3" json:"metazon_ids,omitempty"`
}

func (x *GetCommercialCategoriesByMetazonIDsRequest) Reset() {
	*x = GetCommercialCategoriesByMetazonIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommercialCategoriesByMetazonIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommercialCategoriesByMetazonIDsRequest) ProtoMessage() {}

func (x *GetCommercialCategoriesByMetazonIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommercialCategoriesByMetazonIDsRequest.ProtoReflect.Descriptor instead.
func (*GetCommercialCategoriesByMetazonIDsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{0}
}

func (x *GetCommercialCategoriesByMetazonIDsRequest) GetMetazonIds() []int64 {
	if x != nil {
		return x.MetazonIds
	}
	return nil
}

type GetCommercialCategoriesByMetazonIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *GetCommercialCategoriesByMetazonIDsResponse) Reset() {
	*x = GetCommercialCategoriesByMetazonIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommercialCategoriesByMetazonIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommercialCategoriesByMetazonIDsResponse) ProtoMessage() {}

func (x *GetCommercialCategoriesByMetazonIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommercialCategoriesByMetazonIDsResponse.ProtoReflect.Descriptor instead.
func (*GetCommercialCategoriesByMetazonIDsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{1}
}

func (x *GetCommercialCategoriesByMetazonIDsResponse) GetCategories() []*GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

type GetDictionaryByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetDictionaryByIDsRequest) Reset() {
	*x = GetDictionaryByIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryByIDsRequest) ProtoMessage() {}

func (x *GetDictionaryByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryByIDsRequest.ProtoReflect.Descriptor instead.
func (*GetDictionaryByIDsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{2}
}

func (x *GetDictionaryByIDsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Dictionary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Key         string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	UnitId      int64  `protobuf:"varint,4,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
	IsOversized bool   `protobuf:"varint,5,opt,name=is_oversized,json=isOversized,proto3" json:"is_oversized,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Dictionary) Reset() {
	*x = Dictionary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dictionary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dictionary) ProtoMessage() {}

func (x *Dictionary) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dictionary.ProtoReflect.Descriptor instead.
func (*Dictionary) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{3}
}

func (x *Dictionary) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Dictionary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dictionary) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Dictionary) GetUnitId() int64 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *Dictionary) GetIsOversized() bool {
	if x != nil {
		return x.IsOversized
	}
	return false
}

func (x *Dictionary) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetDictionaryByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*Dictionary `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetDictionaryByIDsResponse) Reset() {
	*x = GetDictionaryByIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryByIDsResponse) ProtoMessage() {}

func (x *GetDictionaryByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryByIDsResponse.ProtoReflect.Descriptor instead.
func (*GetDictionaryByIDsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{4}
}

func (x *GetDictionaryByIDsResponse) GetResult() []*Dictionary {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetDictionaryValuesByAttributeIDAndRsIDListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeIdAndRsIdList []*GetDictionaryValuesByAttributeIDAndRsIDListRequest_AttributeIDAndRsID `protobuf:"bytes,1,rep,name=attribute_id_and_rs_id_list,json=attributeIdAndRsIdList,proto3" json:"attribute_id_and_rs_id_list,omitempty"`
}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListRequest) Reset() {
	*x = GetDictionaryValuesByAttributeIDAndRsIDListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByAttributeIDAndRsIDListRequest) ProtoMessage() {}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByAttributeIDAndRsIDListRequest.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByAttributeIDAndRsIDListRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{5}
}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListRequest) GetAttributeIdAndRsIdList() []*GetDictionaryValuesByAttributeIDAndRsIDListRequest_AttributeIDAndRsID {
	if x != nil {
		return x.AttributeIdAndRsIdList
	}
	return nil
}

type GetDictionaryValuesByAttributeIDAndRsIDListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictionaryValues []*GetDictionaryValuesByAttributeIDAndRsIDListResponse_DictionaryValue `protobuf:"bytes,1,rep,name=dictionary_values,json=dictionaryValues,proto3" json:"dictionary_values,omitempty"`
}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListResponse) Reset() {
	*x = GetDictionaryValuesByAttributeIDAndRsIDListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByAttributeIDAndRsIDListResponse) ProtoMessage() {}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByAttributeIDAndRsIDListResponse.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByAttributeIDAndRsIDListResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{6}
}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListResponse) GetDictionaryValues() []*GetDictionaryValuesByAttributeIDAndRsIDListResponse_DictionaryValue {
	if x != nil {
		return x.DictionaryValues
	}
	return nil
}

type GetCommercialCategoriesTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCommercialCategoriesTreeRequest) Reset() {
	*x = GetCommercialCategoriesTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommercialCategoriesTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommercialCategoriesTreeRequest) ProtoMessage() {}

func (x *GetCommercialCategoriesTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommercialCategoriesTreeRequest.ProtoReflect.Descriptor instead.
func (*GetCommercialCategoriesTreeRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{7}
}

type GetCommercialCategoriesTreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*GetCommercialCategoriesTreeResponse_Node `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetCommercialCategoriesTreeResponse) Reset() {
	*x = GetCommercialCategoriesTreeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommercialCategoriesTreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommercialCategoriesTreeResponse) ProtoMessage() {}

func (x *GetCommercialCategoriesTreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommercialCategoriesTreeResponse.ProtoReflect.Descriptor instead.
func (*GetCommercialCategoriesTreeResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{8}
}

func (x *GetCommercialCategoriesTreeResponse) GetResult() []*GetCommercialCategoriesTreeResponse_Node {
	if x != nil {
		return x.Result
	}
	return nil
}

type AttributeFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeType     string `protobuf:"bytes,1,opt,name=attribute_type,json=attributeType,proto3" json:"attribute_type,omitempty"`
	IsCollection      bool   `protobuf:"varint,2,opt,name=is_collection,json=isCollection,proto3" json:"is_collection,omitempty"`
	Max               int64  `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
	Min               int64  `protobuf:"varint,4,opt,name=min,proto3" json:"min,omitempty"`
	IsMinInclusive    bool   `protobuf:"varint,5,opt,name=is_min_inclusive,json=isMinInclusive,proto3" json:"is_min_inclusive,omitempty"`
	IsMaxExclusive    bool   `protobuf:"varint,6,opt,name=is_max_exclusive,json=isMaxExclusive,proto3" json:"is_max_exclusive,omitempty"`
	Tooltip           string `protobuf:"bytes,7,opt,name=tooltip,proto3" json:"tooltip,omitempty"`
	IsShownAtCreation bool   `protobuf:"varint,8,opt,name=is_shown_at_creation,json=isShownAtCreation,proto3" json:"is_shown_at_creation,omitempty"`
}

func (x *AttributeFlags) Reset() {
	*x = AttributeFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeFlags) ProtoMessage() {}

func (x *AttributeFlags) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeFlags.ProtoReflect.Descriptor instead.
func (*AttributeFlags) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{9}
}

func (x *AttributeFlags) GetAttributeType() string {
	if x != nil {
		return x.AttributeType
	}
	return ""
}

func (x *AttributeFlags) GetIsCollection() bool {
	if x != nil {
		return x.IsCollection
	}
	return false
}

func (x *AttributeFlags) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *AttributeFlags) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *AttributeFlags) GetIsMinInclusive() bool {
	if x != nil {
		return x.IsMinInclusive
	}
	return false
}

func (x *AttributeFlags) GetIsMaxExclusive() bool {
	if x != nil {
		return x.IsMaxExclusive
	}
	return false
}

func (x *AttributeFlags) GetTooltip() string {
	if x != nil {
		return x.Tooltip
	}
	return ""
}

func (x *AttributeFlags) GetIsShownAtCreation() bool {
	if x != nil {
		return x.IsShownAtCreation
	}
	return false
}

type CategoryAttributeFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultValue         string          `protobuf:"bytes,1,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	IsRequired           bool            `protobuf:"varint,2,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	IsReadonly           bool            `protobuf:"varint,3,opt,name=is_readonly,json=isReadonly,proto3" json:"is_readonly,omitempty"`
	ShowAtCreation       bool            `protobuf:"varint,4,opt,name=show_at_creation,json=showAtCreation,proto3" json:"show_at_creation,omitempty"`
	ShowAsCharacteristic bool            `protobuf:"varint,5,opt,name=show_as_characteristic,json=showAsCharacteristic,proto3" json:"show_as_characteristic,omitempty"`
	TopSequence          int64           `protobuf:"varint,6,opt,name=top_sequence,json=topSequence,proto3" json:"top_sequence,omitempty"`
	ShowPricePerUom      bool            `protobuf:"varint,7,opt,name=show_price_per_uom,json=showPricePerUom,proto3" json:"show_price_per_uom,omitempty"`
	IsModelAttribute     bool            `protobuf:"varint,8,opt,name=is_model_attribute,json=isModelAttribute,proto3" json:"is_model_attribute,omitempty"`
	IsMainAspect         bool            `protobuf:"varint,9,opt,name=is_main_aspect,json=isMainAspect,proto3" json:"is_main_aspect,omitempty"`
	UnitDivider          float64         `protobuf:"fixed64,10,opt,name=unit_divider,json=unitDivider,proto3" json:"unit_divider,omitempty"`
	BoolFlags            map[string]bool `protobuf:"bytes,11,rep,name=bool_flags,json=boolFlags,proto3" json:"bool_flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SppuSort             int32           `protobuf:"varint,12,opt,name=sppu_sort,json=sppuSort,proto3" json:"sppu_sort,omitempty"`
}

func (x *CategoryAttributeFlags) Reset() {
	*x = CategoryAttributeFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryAttributeFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryAttributeFlags) ProtoMessage() {}

func (x *CategoryAttributeFlags) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryAttributeFlags.ProtoReflect.Descriptor instead.
func (*CategoryAttributeFlags) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{10}
}

func (x *CategoryAttributeFlags) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *CategoryAttributeFlags) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *CategoryAttributeFlags) GetIsReadonly() bool {
	if x != nil {
		return x.IsReadonly
	}
	return false
}

func (x *CategoryAttributeFlags) GetShowAtCreation() bool {
	if x != nil {
		return x.ShowAtCreation
	}
	return false
}

func (x *CategoryAttributeFlags) GetShowAsCharacteristic() bool {
	if x != nil {
		return x.ShowAsCharacteristic
	}
	return false
}

func (x *CategoryAttributeFlags) GetTopSequence() int64 {
	if x != nil {
		return x.TopSequence
	}
	return 0
}

func (x *CategoryAttributeFlags) GetShowPricePerUom() bool {
	if x != nil {
		return x.ShowPricePerUom
	}
	return false
}

func (x *CategoryAttributeFlags) GetIsModelAttribute() bool {
	if x != nil {
		return x.IsModelAttribute
	}
	return false
}

func (x *CategoryAttributeFlags) GetIsMainAspect() bool {
	if x != nil {
		return x.IsMainAspect
	}
	return false
}

func (x *CategoryAttributeFlags) GetUnitDivider() float64 {
	if x != nil {
		return x.UnitDivider
	}
	return 0
}

func (x *CategoryAttributeFlags) GetBoolFlags() map[string]bool {
	if x != nil {
		return x.BoolFlags
	}
	return nil
}

func (x *CategoryAttributeFlags) GetSppuSort() int32 {
	if x != nil {
		return x.SppuSort
	}
	return 0
}

type CategoryAttributeModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                   string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Key                    string                  `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	AttributeComplexId     int64                   `protobuf:"varint,4,opt,name=attribute_complex_id,json=attributeComplexId,proto3" json:"attribute_complex_id,omitempty"`
	UnitTypeId             int64                   `protobuf:"varint,5,opt,name=unit_type_id,json=unitTypeId,proto3" json:"unit_type_id,omitempty"`
	DictionaryId           int64                   `protobuf:"varint,6,opt,name=dictionary_id,json=dictionaryId,proto3" json:"dictionary_id,omitempty"`
	SystemUnitId           int64                   `protobuf:"varint,7,opt,name=system_unit_id,json=systemUnitId,proto3" json:"system_unit_id,omitempty"`
	CategoryId             int64                   `protobuf:"varint,8,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Parent                 string                  `protobuf:"bytes,9,opt,name=parent,proto3" json:"parent,omitempty"`
	IsAspect               bool                    `protobuf:"varint,10,opt,name=is_aspect,json=isAspect,proto3" json:"is_aspect,omitempty"`
	DefaultUnitId          int64                   `protobuf:"varint,11,opt,name=default_unit_id,json=defaultUnitId,proto3" json:"default_unit_id,omitempty"`
	SortOrder              int64                   `protobuf:"varint,12,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	AttributeFlags         *AttributeFlags         `protobuf:"bytes,13,opt,name=attribute_flags,json=attributeFlags,proto3" json:"attribute_flags,omitempty"`
	CategoryAttributeFlags *CategoryAttributeFlags `protobuf:"bytes,14,opt,name=category_attribute_flags,json=categoryAttributeFlags,proto3" json:"category_attribute_flags,omitempty"`
	UnitName               string                  `protobuf:"bytes,15,opt,name=unit_name,json=unitName,proto3" json:"unit_name,omitempty"`
	UnitKey                string                  `protobuf:"bytes,16,opt,name=unit_key,json=unitKey,proto3" json:"unit_key,omitempty"`
	GroupId                int64                   `protobuf:"varint,17,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CategoryLevel          int64                   `protobuf:"varint,18,opt,name=category_level,json=categoryLevel,proto3" json:"category_level,omitempty"`
	DictionaryKey          string                  `protobuf:"bytes,19,opt,name=dictionary_key,json=dictionaryKey,proto3" json:"dictionary_key,omitempty"`
	IsOversized            bool                    `protobuf:"varint,20,opt,name=is_oversized,json=isOversized,proto3" json:"is_oversized,omitempty"`
	AttributeComplexName   string                  `protobuf:"bytes,21,opt,name=attribute_complex_name,json=attributeComplexName,proto3" json:"attribute_complex_name,omitempty"`
	AttributeComplexKey    string                  `protobuf:"bytes,22,opt,name=attribute_complex_key,json=attributeComplexKey,proto3" json:"attribute_complex_key,omitempty"`
}

func (x *CategoryAttributeModel) Reset() {
	*x = CategoryAttributeModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryAttributeModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryAttributeModel) ProtoMessage() {}

func (x *CategoryAttributeModel) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryAttributeModel.ProtoReflect.Descriptor instead.
func (*CategoryAttributeModel) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{11}
}

func (x *CategoryAttributeModel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryAttributeModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryAttributeModel) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CategoryAttributeModel) GetAttributeComplexId() int64 {
	if x != nil {
		return x.AttributeComplexId
	}
	return 0
}

func (x *CategoryAttributeModel) GetUnitTypeId() int64 {
	if x != nil {
		return x.UnitTypeId
	}
	return 0
}

func (x *CategoryAttributeModel) GetDictionaryId() int64 {
	if x != nil {
		return x.DictionaryId
	}
	return 0
}

func (x *CategoryAttributeModel) GetSystemUnitId() int64 {
	if x != nil {
		return x.SystemUnitId
	}
	return 0
}

func (x *CategoryAttributeModel) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *CategoryAttributeModel) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CategoryAttributeModel) GetIsAspect() bool {
	if x != nil {
		return x.IsAspect
	}
	return false
}

func (x *CategoryAttributeModel) GetDefaultUnitId() int64 {
	if x != nil {
		return x.DefaultUnitId
	}
	return 0
}

func (x *CategoryAttributeModel) GetSortOrder() int64 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *CategoryAttributeModel) GetAttributeFlags() *AttributeFlags {
	if x != nil {
		return x.AttributeFlags
	}
	return nil
}

func (x *CategoryAttributeModel) GetCategoryAttributeFlags() *CategoryAttributeFlags {
	if x != nil {
		return x.CategoryAttributeFlags
	}
	return nil
}

func (x *CategoryAttributeModel) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *CategoryAttributeModel) GetUnitKey() string {
	if x != nil {
		return x.UnitKey
	}
	return ""
}

func (x *CategoryAttributeModel) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CategoryAttributeModel) GetCategoryLevel() int64 {
	if x != nil {
		return x.CategoryLevel
	}
	return 0
}

func (x *CategoryAttributeModel) GetDictionaryKey() string {
	if x != nil {
		return x.DictionaryKey
	}
	return ""
}

func (x *CategoryAttributeModel) GetIsOversized() bool {
	if x != nil {
		return x.IsOversized
	}
	return false
}

func (x *CategoryAttributeModel) GetAttributeComplexName() string {
	if x != nil {
		return x.AttributeComplexName
	}
	return ""
}

func (x *CategoryAttributeModel) GetAttributeComplexKey() string {
	if x != nil {
		return x.AttributeComplexKey
	}
	return ""
}

type GetCategoriesAttributesWithHierarchyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryIds []int64 `protobuf:"varint,1,rep,packed,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
}

func (x *GetCategoriesAttributesWithHierarchyRequest) Reset() {
	*x = GetCategoriesAttributesWithHierarchyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoriesAttributesWithHierarchyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesAttributesWithHierarchyRequest) ProtoMessage() {}

func (x *GetCategoriesAttributesWithHierarchyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesAttributesWithHierarchyRequest.ProtoReflect.Descriptor instead.
func (*GetCategoriesAttributesWithHierarchyRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{12}
}

func (x *GetCategoriesAttributesWithHierarchyRequest) GetCategoryIds() []int64 {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

type GetCategoriesAttributesWithHierarchyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoriesAttributesModel []*CategoryAttributeModel `protobuf:"bytes,1,rep,name=categories_attributes_model,json=categoriesAttributesModel,proto3" json:"categories_attributes_model,omitempty"`
}

func (x *GetCategoriesAttributesWithHierarchyResponse) Reset() {
	*x = GetCategoriesAttributesWithHierarchyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoriesAttributesWithHierarchyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesAttributesWithHierarchyResponse) ProtoMessage() {}

func (x *GetCategoriesAttributesWithHierarchyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesAttributesWithHierarchyResponse.ProtoReflect.Descriptor instead.
func (*GetCategoriesAttributesWithHierarchyResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{13}
}

func (x *GetCategoriesAttributesWithHierarchyResponse) GetCategoriesAttributesModel() []*CategoryAttributeModel {
	if x != nil {
		return x.CategoriesAttributesModel
	}
	return nil
}

type GetDictionaryValueBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId  int64 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	AttributeId int64 `protobuf:"varint,2,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
	Limit       int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	LastValueId int64 `protobuf:"varint,4,opt,name=last_value_id,json=lastValueId,proto3" json:"last_value_id,omitempty"`
}

func (x *GetDictionaryValueBatchRequest) Reset() {
	*x = GetDictionaryValueBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValueBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValueBatchRequest) ProtoMessage() {}

func (x *GetDictionaryValueBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValueBatchRequest.ProtoReflect.Descriptor instead.
func (*GetDictionaryValueBatchRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{14}
}

func (x *GetDictionaryValueBatchRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *GetDictionaryValueBatchRequest) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *GetDictionaryValueBatchRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetDictionaryValueBatchRequest) GetLastValueId() int64 {
	if x != nil {
		return x.LastValueId
	}
	return 0
}

type GetDictionaryValueBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values  []*GetDictionaryValueBatchResponse_Value `protobuf:"bytes,1,rep,name=Values,proto3" json:"Values,omitempty"`
	HasNext bool                                     `protobuf:"varint,2,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
}

func (x *GetDictionaryValueBatchResponse) Reset() {
	*x = GetDictionaryValueBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValueBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValueBatchResponse) ProtoMessage() {}

func (x *GetDictionaryValueBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValueBatchResponse.ProtoReflect.Descriptor instead.
func (*GetDictionaryValueBatchResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{15}
}

func (x *GetDictionaryValueBatchResponse) GetValues() []*GetDictionaryValueBatchResponse_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *GetDictionaryValueBatchResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

type CategoryTypeMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId     int64 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	CategoryTypeId int64 `protobuf:"varint,2,opt,name=category_type_id,json=categoryTypeId,proto3" json:"category_type_id,omitempty"`
}

func (x *CategoryTypeMap) Reset() {
	*x = CategoryTypeMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryTypeMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryTypeMap) ProtoMessage() {}

func (x *CategoryTypeMap) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryTypeMap.ProtoReflect.Descriptor instead.
func (*CategoryTypeMap) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{16}
}

func (x *CategoryTypeMap) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *CategoryTypeMap) GetCategoryTypeId() int64 {
	if x != nil {
		return x.CategoryTypeId
	}
	return 0
}

type GetCategoryTypeMapByCategoryIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryIds []int64 `protobuf:"varint,1,rep,packed,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
}

func (x *GetCategoryTypeMapByCategoryIDsRequest) Reset() {
	*x = GetCategoryTypeMapByCategoryIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryTypeMapByCategoryIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryTypeMapByCategoryIDsRequest) ProtoMessage() {}

func (x *GetCategoryTypeMapByCategoryIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryTypeMapByCategoryIDsRequest.ProtoReflect.Descriptor instead.
func (*GetCategoryTypeMapByCategoryIDsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{17}
}

func (x *GetCategoryTypeMapByCategoryIDsRequest) GetCategoryIds() []int64 {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

type GetCategoryTypeMapByCategoryIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map []*CategoryTypeMap `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty"`
}

func (x *GetCategoryTypeMapByCategoryIDsResponse) Reset() {
	*x = GetCategoryTypeMapByCategoryIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryTypeMapByCategoryIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryTypeMapByCategoryIDsResponse) ProtoMessage() {}

func (x *GetCategoryTypeMapByCategoryIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryTypeMapByCategoryIDsResponse.ProtoReflect.Descriptor instead.
func (*GetCategoryTypeMapByCategoryIDsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{18}
}

func (x *GetCategoryTypeMapByCategoryIDsResponse) GetMap() []*CategoryTypeMap {
	if x != nil {
		return x.Map
	}
	return nil
}

type GetCategoryTypeMapByCategoryTypeIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryTypeIds []int64 `protobuf:"varint,1,rep,packed,name=category_type_ids,json=categoryTypeIds,proto3" json:"category_type_ids,omitempty"`
}

func (x *GetCategoryTypeMapByCategoryTypeIDsRequest) Reset() {
	*x = GetCategoryTypeMapByCategoryTypeIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryTypeMapByCategoryTypeIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryTypeMapByCategoryTypeIDsRequest) ProtoMessage() {}

func (x *GetCategoryTypeMapByCategoryTypeIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryTypeMapByCategoryTypeIDsRequest.ProtoReflect.Descriptor instead.
func (*GetCategoryTypeMapByCategoryTypeIDsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{19}
}

func (x *GetCategoryTypeMapByCategoryTypeIDsRequest) GetCategoryTypeIds() []int64 {
	if x != nil {
		return x.CategoryTypeIds
	}
	return nil
}

type GetCategoryTypeMapByCategoryTypeIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map []*CategoryTypeMap `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty"`
}

func (x *GetCategoryTypeMapByCategoryTypeIDsResponse) Reset() {
	*x = GetCategoryTypeMapByCategoryTypeIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryTypeMapByCategoryTypeIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryTypeMapByCategoryTypeIDsResponse) ProtoMessage() {}

func (x *GetCategoryTypeMapByCategoryTypeIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryTypeMapByCategoryTypeIDsResponse.ProtoReflect.Descriptor instead.
func (*GetCategoryTypeMapByCategoryTypeIDsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{20}
}

func (x *GetCategoryTypeMapByCategoryTypeIDsResponse) GetMap() []*CategoryTypeMap {
	if x != nil {
		return x.Map
	}
	return nil
}

type GetCategoriesByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryIds []int64 `protobuf:"varint,1,rep,packed,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
}

func (x *GetCategoriesByIDsRequest) Reset() {
	*x = GetCategoriesByIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoriesByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesByIDsRequest) ProtoMessage() {}

func (x *GetCategoriesByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesByIDsRequest.ProtoReflect.Descriptor instead.
func (*GetCategoriesByIDsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{21}
}

func (x *GetCategoriesByIDsRequest) GetCategoryIds() []int64 {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

type GetCategoriesByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*Category `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *GetCategoriesByIDsResponse) Reset() {
	*x = GetCategoriesByIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoriesByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesByIDsResponse) ProtoMessage() {}

func (x *GetCategoriesByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesByIDsResponse.ProtoReflect.Descriptor instead.
func (*GetCategoriesByIDsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{22}
}

func (x *GetCategoriesByIDsResponse) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

type SearchCommercialCategoriesByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Limit  int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *SearchCommercialCategoriesByNameRequest) Reset() {
	*x = SearchCommercialCategoriesByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCommercialCategoriesByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCommercialCategoriesByNameRequest) ProtoMessage() {}

func (x *SearchCommercialCategoriesByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCommercialCategoriesByNameRequest.ProtoReflect.Descriptor instead.
func (*SearchCommercialCategoriesByNameRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{23}
}

func (x *SearchCommercialCategoriesByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchCommercialCategoriesByNameRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchCommercialCategoriesByNameRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type SearchCommercialCategoriesByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*SearchCommercialCategoriesByNameResponse_CommercialCategory `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Total  int32                                                          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SearchCommercialCategoriesByNameResponse) Reset() {
	*x = SearchCommercialCategoriesByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCommercialCategoriesByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCommercialCategoriesByNameResponse) ProtoMessage() {}

func (x *SearchCommercialCategoriesByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCommercialCategoriesByNameResponse.ProtoReflect.Descriptor instead.
func (*SearchCommercialCategoriesByNameResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{24}
}

func (x *SearchCommercialCategoriesByNameResponse) GetResult() []*SearchCommercialCategoriesByNameResponse_CommercialCategory {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SearchCommercialCategoriesByNameResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetCommercialCategoriesMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCommercialCategoriesMapRequest) Reset() {
	*x = GetCommercialCategoriesMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommercialCategoriesMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommercialCategoriesMapRequest) ProtoMessage() {}

func (x *GetCommercialCategoriesMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommercialCategoriesMapRequest.ProtoReflect.Descriptor instead.
func (*GetCommercialCategoriesMapRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{25}
}

type GetCommercialCategoriesMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map map[int64]int64 `protobuf:"bytes,13,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetCommercialCategoriesMapResponse) Reset() {
	*x = GetCommercialCategoriesMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommercialCategoriesMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommercialCategoriesMapResponse) ProtoMessage() {}

func (x *GetCommercialCategoriesMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommercialCategoriesMapResponse.ProtoReflect.Descriptor instead.
func (*GetCommercialCategoriesMapResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{26}
}

func (x *GetCommercialCategoriesMapResponse) GetMap() map[int64]int64 {
	if x != nil {
		return x.Map
	}
	return nil
}

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ShortName                  string `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Level1                     int64  `protobuf:"varint,4,opt,name=level1,proto3" json:"level1,omitempty"`
	Level2                     int64  `protobuf:"varint,5,opt,name=level2,proto3" json:"level2,omitempty"`
	Level3                     int64  `protobuf:"varint,6,opt,name=level3,proto3" json:"level3,omitempty"`
	IsSimplifiedPatternAllowed bool   `protobuf:"varint,7,opt,name=is_simplified_pattern_allowed,json=isSimplifiedPatternAllowed,proto3" json:"is_simplified_pattern_allowed,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{27}
}

func (x *Category) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *Category) GetLevel1() int64 {
	if x != nil {
		return x.Level1
	}
	return 0
}

func (x *Category) GetLevel2() int64 {
	if x != nil {
		return x.Level2
	}
	return 0
}

func (x *Category) GetLevel3() int64 {
	if x != nil {
		return x.Level3
	}
	return 0
}

func (x *Category) GetIsSimplifiedPatternAllowed() bool {
	if x != nil {
		return x.IsSimplifiedPatternAllowed
	}
	return false
}

type SellerCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ShortName string `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Level1    int64  `protobuf:"varint,4,opt,name=level1,proto3" json:"level1,omitempty"`
	Level2    int64  `protobuf:"varint,5,opt,name=level2,proto3" json:"level2,omitempty"`
	Level3    int64  `protobuf:"varint,6,opt,name=level3,proto3" json:"level3,omitempty"`
	Disabled  bool   `protobuf:"varint,7,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *SellerCategory) Reset() {
	*x = SellerCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerCategory) ProtoMessage() {}

func (x *SellerCategory) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerCategory.ProtoReflect.Descriptor instead.
func (*SellerCategory) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{28}
}

func (x *SellerCategory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SellerCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SellerCategory) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *SellerCategory) GetLevel1() int64 {
	if x != nil {
		return x.Level1
	}
	return 0
}

func (x *SellerCategory) GetLevel2() int64 {
	if x != nil {
		return x.Level2
	}
	return 0
}

func (x *SellerCategory) GetLevel3() int64 {
	if x != nil {
		return x.Level3
	}
	return 0
}

func (x *SellerCategory) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type GetSellerDescriptionCategoryBranchByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId int64 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *GetSellerDescriptionCategoryBranchByIDRequest) Reset() {
	*x = GetSellerDescriptionCategoryBranchByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellerDescriptionCategoryBranchByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellerDescriptionCategoryBranchByIDRequest) ProtoMessage() {}

func (x *GetSellerDescriptionCategoryBranchByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellerDescriptionCategoryBranchByIDRequest.ProtoReflect.Descriptor instead.
func (*GetSellerDescriptionCategoryBranchByIDRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{29}
}

func (x *GetSellerDescriptionCategoryBranchByIDRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type GetSellerDescriptionCategoryBranchByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*SellerCategory `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *GetSellerDescriptionCategoryBranchByIDResponse) Reset() {
	*x = GetSellerDescriptionCategoryBranchByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellerDescriptionCategoryBranchByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellerDescriptionCategoryBranchByIDResponse) ProtoMessage() {}

func (x *GetSellerDescriptionCategoryBranchByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellerDescriptionCategoryBranchByIDResponse.ProtoReflect.Descriptor instead.
func (*GetSellerDescriptionCategoryBranchByIDResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{30}
}

func (x *GetSellerDescriptionCategoryBranchByIDResponse) GetCategories() []*SellerCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

type GetFinalUnmappedDescriptionCategoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFinalUnmappedDescriptionCategoriesRequest) Reset() {
	*x = GetFinalUnmappedDescriptionCategoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinalUnmappedDescriptionCategoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinalUnmappedDescriptionCategoriesRequest) ProtoMessage() {}

func (x *GetFinalUnmappedDescriptionCategoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinalUnmappedDescriptionCategoriesRequest.ProtoReflect.Descriptor instead.
func (*GetFinalUnmappedDescriptionCategoriesRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{31}
}

type GetFinalUnmappedDescriptionCategoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*Category `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *GetFinalUnmappedDescriptionCategoriesResponse) Reset() {
	*x = GetFinalUnmappedDescriptionCategoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinalUnmappedDescriptionCategoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinalUnmappedDescriptionCategoriesResponse) ProtoMessage() {}

func (x *GetFinalUnmappedDescriptionCategoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinalUnmappedDescriptionCategoriesResponse.ProtoReflect.Descriptor instead.
func (*GetFinalUnmappedDescriptionCategoriesResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{32}
}

func (x *GetFinalUnmappedDescriptionCategoriesResponse) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

type GetSellerDescriptionCategoriesFinalByDescriptionIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId int64 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *GetSellerDescriptionCategoriesFinalByDescriptionIDRequest) Reset() {
	*x = GetSellerDescriptionCategoriesFinalByDescriptionIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellerDescriptionCategoriesFinalByDescriptionIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellerDescriptionCategoriesFinalByDescriptionIDRequest) ProtoMessage() {}

func (x *GetSellerDescriptionCategoriesFinalByDescriptionIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellerDescriptionCategoriesFinalByDescriptionIDRequest.ProtoReflect.Descriptor instead.
func (*GetSellerDescriptionCategoriesFinalByDescriptionIDRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{33}
}

func (x *GetSellerDescriptionCategoriesFinalByDescriptionIDRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type GetSellerDescriptionCategoriesFinalByDescriptionIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*Category `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *GetSellerDescriptionCategoriesFinalByDescriptionIDResponse) Reset() {
	*x = GetSellerDescriptionCategoriesFinalByDescriptionIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellerDescriptionCategoriesFinalByDescriptionIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellerDescriptionCategoriesFinalByDescriptionIDResponse) ProtoMessage() {}

func (x *GetSellerDescriptionCategoriesFinalByDescriptionIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellerDescriptionCategoriesFinalByDescriptionIDResponse.ProtoReflect.Descriptor instead.
func (*GetSellerDescriptionCategoriesFinalByDescriptionIDResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{34}
}

func (x *GetSellerDescriptionCategoriesFinalByDescriptionIDResponse) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

type GetMappedCommercialCategoriesByDescriptionIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryIds           []int64 `protobuf:"varint,1,rep,packed,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
	SearchFinalCategories bool    `protobuf:"varint,2,opt,name=search_final_categories,json=searchFinalCategories,proto3" json:"search_final_categories,omitempty"`
}

func (x *GetMappedCommercialCategoriesByDescriptionIDsRequest) Reset() {
	*x = GetMappedCommercialCategoriesByDescriptionIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMappedCommercialCategoriesByDescriptionIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMappedCommercialCategoriesByDescriptionIDsRequest) ProtoMessage() {}

func (x *GetMappedCommercialCategoriesByDescriptionIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMappedCommercialCategoriesByDescriptionIDsRequest.ProtoReflect.Descriptor instead.
func (*GetMappedCommercialCategoriesByDescriptionIDsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{35}
}

func (x *GetMappedCommercialCategoriesByDescriptionIDsRequest) GetCategoryIds() []int64 {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *GetMappedCommercialCategoriesByDescriptionIDsRequest) GetSearchFinalCategories() bool {
	if x != nil {
		return x.SearchFinalCategories
	}
	return false
}

type GetMappedCommercialCategoriesByDescriptionIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommercialCategories []*GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory `protobuf:"bytes,1,rep,name=commercial_categories,json=commercialCategories,proto3" json:"commercial_categories,omitempty"`
}

func (x *GetMappedCommercialCategoriesByDescriptionIDsResponse) Reset() {
	*x = GetMappedCommercialCategoriesByDescriptionIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMappedCommercialCategoriesByDescriptionIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMappedCommercialCategoriesByDescriptionIDsResponse) ProtoMessage() {}

func (x *GetMappedCommercialCategoriesByDescriptionIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMappedCommercialCategoriesByDescriptionIDsResponse.ProtoReflect.Descriptor instead.
func (*GetMappedCommercialCategoriesByDescriptionIDsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{36}
}

func (x *GetMappedCommercialCategoriesByDescriptionIDsResponse) GetCommercialCategories() []*GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory {
	if x != nil {
		return x.CommercialCategories
	}
	return nil
}

type GetDescriptionCategoryDeepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId int64 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *GetDescriptionCategoryDeepRequest) Reset() {
	*x = GetDescriptionCategoryDeepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDescriptionCategoryDeepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDescriptionCategoryDeepRequest) ProtoMessage() {}

func (x *GetDescriptionCategoryDeepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDescriptionCategoryDeepRequest.ProtoReflect.Descriptor instead.
func (*GetDescriptionCategoryDeepRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{37}
}

func (x *GetDescriptionCategoryDeepRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type GetDescriptionCategoryDeepResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId int64  `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	LongName string `protobuf:"bytes,4,opt,name=long_name,json=longName,proto3" json:"long_name,omitempty"`
}

func (x *GetDescriptionCategoryDeepResponse) Reset() {
	*x = GetDescriptionCategoryDeepResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDescriptionCategoryDeepResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDescriptionCategoryDeepResponse) ProtoMessage() {}

func (x *GetDescriptionCategoryDeepResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDescriptionCategoryDeepResponse.ProtoReflect.Descriptor instead.
func (*GetDescriptionCategoryDeepResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{38}
}

func (x *GetDescriptionCategoryDeepResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDescriptionCategoryDeepResponse) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *GetDescriptionCategoryDeepResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDescriptionCategoryDeepResponse) GetLongName() string {
	if x != nil {
		return x.LongName
	}
	return ""
}

type GetDictionaryValuesByDictionaryExternalIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalIds []int64 `protobuf:"varint,1,rep,packed,name=external_ids,json=externalIds,proto3" json:"external_ids,omitempty"`
	OnlyActive  bool    `protobuf:"varint,2,opt,name=only_active,json=onlyActive,proto3" json:"only_active,omitempty"`
}

func (x *GetDictionaryValuesByDictionaryExternalIDsRequest) Reset() {
	*x = GetDictionaryValuesByDictionaryExternalIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByDictionaryExternalIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByDictionaryExternalIDsRequest) ProtoMessage() {}

func (x *GetDictionaryValuesByDictionaryExternalIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByDictionaryExternalIDsRequest.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByDictionaryExternalIDsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{39}
}

func (x *GetDictionaryValuesByDictionaryExternalIDsRequest) GetExternalIds() []int64 {
	if x != nil {
		return x.ExternalIds
	}
	return nil
}

func (x *GetDictionaryValuesByDictionaryExternalIDsRequest) GetOnlyActive() bool {
	if x != nil {
		return x.OnlyActive
	}
	return false
}

type GetDictionaryValuesByDictionaryExternalIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictionaryOriginalValues []*GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue `protobuf:"bytes,1,rep,name=dictionaryOriginalValues,proto3" json:"dictionaryOriginalValues,omitempty"`
}

func (x *GetDictionaryValuesByDictionaryExternalIDsResponse) Reset() {
	*x = GetDictionaryValuesByDictionaryExternalIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByDictionaryExternalIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByDictionaryExternalIDsResponse) ProtoMessage() {}

func (x *GetDictionaryValuesByDictionaryExternalIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByDictionaryExternalIDsResponse.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByDictionaryExternalIDsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{40}
}

func (x *GetDictionaryValuesByDictionaryExternalIDsResponse) GetDictionaryOriginalValues() []*GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue {
	if x != nil {
		return x.DictionaryOriginalValues
	}
	return nil
}

type CategoryAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Key                 string              `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Name                string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	IsRequired          bool                `protobuf:"varint,4,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	SortOrder           int64               `protobuf:"varint,5,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	IsCollection        bool                `protobuf:"varint,6,opt,name=is_collection,json=isCollection,proto3" json:"is_collection,omitempty"`
	Tooltip             string              `protobuf:"bytes,7,opt,name=tooltip,proto3" json:"tooltip,omitempty"`
	Type                string              `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	AttributeComplexId  int64               `protobuf:"varint,9,opt,name=attribute_complex_id,json=attributeComplexId,proto3" json:"attribute_complex_id,omitempty"`
	ComplexName         string              `protobuf:"bytes,10,opt,name=complex_name,json=complexName,proto3" json:"complex_name,omitempty"`
	ComplexIsCollection bool                `protobuf:"varint,11,opt,name=complex_is_collection,json=complexIsCollection,proto3" json:"complex_is_collection,omitempty"`
	UnitId              int64               `protobuf:"varint,12,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
	UnitName            string              `protobuf:"bytes,13,opt,name=unit_name,json=unitName,proto3" json:"unit_name,omitempty"`
	DictionaryId        int64               `protobuf:"varint,14,opt,name=dictionary_id,json=dictionaryId,proto3" json:"dictionary_id,omitempty"`
	BoolFlags           map[string]bool     `protobuf:"bytes,15,rep,name=bool_flags,json=boolFlags,proto3" json:"bool_flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GroupId             int64               `protobuf:"varint,16,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName           string              `protobuf:"bytes,17,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	DictionaryValues    []*DictionaryValues `protobuf:"bytes,18,rep,name=dictionary_values,json=dictionaryValues,proto3" json:"dictionary_values,omitempty"`
	IsModelAttribute    bool                `protobuf:"varint,19,opt,name=is_model_attribute,json=isModelAttribute,proto3" json:"is_model_attribute,omitempty"`
	IsAspect            bool                `protobuf:"varint,20,opt,name=is_aspect,json=isAspect,proto3" json:"is_aspect,omitempty"`
	DisplayType         string              `protobuf:"bytes,21,opt,name=display_type,json=displayType,proto3" json:"display_type,omitempty"`
	DictionaryKey       string              `protobuf:"bytes,22,opt,name=dictionary_key,json=dictionaryKey,proto3" json:"dictionary_key,omitempty"`
	IsOversized         bool                `protobuf:"varint,23,opt,name=is_oversized,json=isOversized,proto3" json:"is_oversized,omitempty"`
	Min                 float64             `protobuf:"fixed64,24,opt,name=min,proto3" json:"min,omitempty"`
	Max                 float64             `protobuf:"fixed64,25,opt,name=max,proto3" json:"max,omitempty"`
	MinLength           int32               `protobuf:"varint,26,opt,name=minLength,proto3" json:"minLength,omitempty"`
	MaxLength           int32               `protobuf:"varint,27,opt,name=maxLength,proto3" json:"maxLength,omitempty"`
	IsMinInclusive      bool                `protobuf:"varint,28,opt,name=is_min_inclusive,json=isMinInclusive,proto3" json:"is_min_inclusive,omitempty"`
	IsMaxExclusive      bool                `protobuf:"varint,29,opt,name=is_max_exclusive,json=isMaxExclusive,proto3" json:"is_max_exclusive,omitempty"`
}

func (x *CategoryAttribute) Reset() {
	*x = CategoryAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryAttribute) ProtoMessage() {}

func (x *CategoryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryAttribute.ProtoReflect.Descriptor instead.
func (*CategoryAttribute) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{41}
}

func (x *CategoryAttribute) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryAttribute) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CategoryAttribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryAttribute) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *CategoryAttribute) GetSortOrder() int64 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *CategoryAttribute) GetIsCollection() bool {
	if x != nil {
		return x.IsCollection
	}
	return false
}

func (x *CategoryAttribute) GetTooltip() string {
	if x != nil {
		return x.Tooltip
	}
	return ""
}

func (x *CategoryAttribute) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CategoryAttribute) GetAttributeComplexId() int64 {
	if x != nil {
		return x.AttributeComplexId
	}
	return 0
}

func (x *CategoryAttribute) GetComplexName() string {
	if x != nil {
		return x.ComplexName
	}
	return ""
}

func (x *CategoryAttribute) GetComplexIsCollection() bool {
	if x != nil {
		return x.ComplexIsCollection
	}
	return false
}

func (x *CategoryAttribute) GetUnitId() int64 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *CategoryAttribute) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *CategoryAttribute) GetDictionaryId() int64 {
	if x != nil {
		return x.DictionaryId
	}
	return 0
}

func (x *CategoryAttribute) GetBoolFlags() map[string]bool {
	if x != nil {
		return x.BoolFlags
	}
	return nil
}

func (x *CategoryAttribute) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CategoryAttribute) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CategoryAttribute) GetDictionaryValues() []*DictionaryValues {
	if x != nil {
		return x.DictionaryValues
	}
	return nil
}

func (x *CategoryAttribute) GetIsModelAttribute() bool {
	if x != nil {
		return x.IsModelAttribute
	}
	return false
}

func (x *CategoryAttribute) GetIsAspect() bool {
	if x != nil {
		return x.IsAspect
	}
	return false
}

func (x *CategoryAttribute) GetDisplayType() string {
	if x != nil {
		return x.DisplayType
	}
	return ""
}

func (x *CategoryAttribute) GetDictionaryKey() string {
	if x != nil {
		return x.DictionaryKey
	}
	return ""
}

func (x *CategoryAttribute) GetIsOversized() bool {
	if x != nil {
		return x.IsOversized
	}
	return false
}

func (x *CategoryAttribute) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *CategoryAttribute) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *CategoryAttribute) GetMinLength() int32 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *CategoryAttribute) GetMaxLength() int32 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

func (x *CategoryAttribute) GetIsMinInclusive() bool {
	if x != nil {
		return x.IsMinInclusive
	}
	return false
}

func (x *CategoryAttribute) GetIsMaxExclusive() bool {
	if x != nil {
		return x.IsMaxExclusive
	}
	return false
}

type GetDictionaryValuesByDictionaryKeyAndRsIDListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictionaryKeyAndRsIdList []*GetDictionaryValuesByDictionaryKeyAndRsIDListRequest_DictionaryKeyAndRsID `protobuf:"bytes,1,rep,name=dictionary_key_and_rs_id_list,json=dictionaryKeyAndRsIdList,proto3" json:"dictionary_key_and_rs_id_list,omitempty"`
}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListRequest) Reset() {
	*x = GetDictionaryValuesByDictionaryKeyAndRsIDListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByDictionaryKeyAndRsIDListRequest) ProtoMessage() {}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByDictionaryKeyAndRsIDListRequest.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByDictionaryKeyAndRsIDListRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{42}
}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListRequest) GetDictionaryKeyAndRsIdList() []*GetDictionaryValuesByDictionaryKeyAndRsIDListRequest_DictionaryKeyAndRsID {
	if x != nil {
		return x.DictionaryKeyAndRsIdList
	}
	return nil
}

type GetDictionaryValuesByDictionaryKeyAndRsIDListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictionaryValues []*GetDictionaryValuesByDictionaryKeyAndRsIDListResponse_DictionaryValue `protobuf:"bytes,1,rep,name=dictionary_values,json=dictionaryValues,proto3" json:"dictionary_values,omitempty"`
}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListResponse) Reset() {
	*x = GetDictionaryValuesByDictionaryKeyAndRsIDListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByDictionaryKeyAndRsIDListResponse) ProtoMessage() {}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByDictionaryKeyAndRsIDListResponse.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByDictionaryKeyAndRsIDListResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{43}
}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListResponse) GetDictionaryValues() []*GetDictionaryValuesByDictionaryKeyAndRsIDListResponse_DictionaryValue {
	if x != nil {
		return x.DictionaryValues
	}
	return nil
}

type GetDictionaryValuesByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictionaryValueIds []int64 `protobuf:"varint,1,rep,packed,name=dictionary_value_ids,json=dictionaryValueIds,proto3" json:"dictionary_value_ids,omitempty"`
}

func (x *GetDictionaryValuesByIDsRequest) Reset() {
	*x = GetDictionaryValuesByIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByIDsRequest) ProtoMessage() {}

func (x *GetDictionaryValuesByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByIDsRequest.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByIDsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{44}
}

func (x *GetDictionaryValuesByIDsRequest) GetDictionaryValueIds() []int64 {
	if x != nil {
		return x.DictionaryValueIds
	}
	return nil
}

type GetDictionaryValuesByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictionaryValues []*GetDictionaryValuesByIDsResponse_DictionaryValue `protobuf:"bytes,1,rep,name=dictionary_values,json=dictionaryValues,proto3" json:"dictionary_values,omitempty"`
}

func (x *GetDictionaryValuesByIDsResponse) Reset() {
	*x = GetDictionaryValuesByIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByIDsResponse) ProtoMessage() {}

func (x *GetDictionaryValuesByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByIDsResponse.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByIDsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{45}
}

func (x *GetDictionaryValuesByIDsResponse) GetDictionaryValues() []*GetDictionaryValuesByIDsResponse_DictionaryValue {
	if x != nil {
		return x.DictionaryValues
	}
	return nil
}

type GetCategoryBranchByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId int64 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *GetCategoryBranchByIDRequest) Reset() {
	*x = GetCategoryBranchByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryBranchByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryBranchByIDRequest) ProtoMessage() {}

func (x *GetCategoryBranchByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryBranchByIDRequest.ProtoReflect.Descriptor instead.
func (*GetCategoryBranchByIDRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{46}
}

func (x *GetCategoryBranchByIDRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type GetCategoryBranchByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*Category `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetCategoryBranchByIDResponse) Reset() {
	*x = GetCategoryBranchByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryBranchByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryBranchByIDResponse) ProtoMessage() {}

func (x *GetCategoryBranchByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryBranchByIDResponse.ProtoReflect.Descriptor instead.
func (*GetCategoryBranchByIDResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{47}
}

func (x *GetCategoryBranchByIDResponse) GetResult() []*Category {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetCommercialCategoriesByTypeIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeIds []int64 `protobuf:"varint,1,rep,packed,name=type_ids,json=typeIds,proto3" json:"type_ids,omitempty"`
}

func (x *GetCommercialCategoriesByTypeIDsRequest) Reset() {
	*x = GetCommercialCategoriesByTypeIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommercialCategoriesByTypeIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommercialCategoriesByTypeIDsRequest) ProtoMessage() {}

func (x *GetCommercialCategoriesByTypeIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommercialCategoriesByTypeIDsRequest.ProtoReflect.Descriptor instead.
func (*GetCommercialCategoriesByTypeIDsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{48}
}

func (x *GetCommercialCategoriesByTypeIDsRequest) GetTypeIds() []int64 {
	if x != nil {
		return x.TypeIds
	}
	return nil
}

type GetCommercialCategoriesByTypeIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories map[int64]*GetCommercialCategoriesByTypeIDsResponse_CommercialCategory `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetCommercialCategoriesByTypeIDsResponse) Reset() {
	*x = GetCommercialCategoriesByTypeIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommercialCategoriesByTypeIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommercialCategoriesByTypeIDsResponse) ProtoMessage() {}

func (x *GetCommercialCategoriesByTypeIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommercialCategoriesByTypeIDsResponse.ProtoReflect.Descriptor instead.
func (*GetCommercialCategoriesByTypeIDsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{49}
}

func (x *GetCommercialCategoriesByTypeIDsResponse) GetCategories() map[int64]*GetCommercialCategoriesByTypeIDsResponse_CommercialCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

type GetCommercialCategoriesByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryIds []int64 `protobuf:"varint,1,rep,packed,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
}

func (x *GetCommercialCategoriesByIDsRequest) Reset() {
	*x = GetCommercialCategoriesByIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommercialCategoriesByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommercialCategoriesByIDsRequest) ProtoMessage() {}

func (x *GetCommercialCategoriesByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommercialCategoriesByIDsRequest.ProtoReflect.Descriptor instead.
func (*GetCommercialCategoriesByIDsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{50}
}

func (x *GetCommercialCategoriesByIDsRequest) GetCategoryIds() []int64 {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

type GetCommercialCategoriesByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*GetCommercialCategoriesByIDsResponse_CommercialCategory `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *GetCommercialCategoriesByIDsResponse) Reset() {
	*x = GetCommercialCategoriesByIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommercialCategoriesByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommercialCategoriesByIDsResponse) ProtoMessage() {}

func (x *GetCommercialCategoriesByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommercialCategoriesByIDsResponse.ProtoReflect.Descriptor instead.
func (*GetCommercialCategoriesByIDsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{51}
}

func (x *GetCommercialCategoriesByIDsResponse) GetCategories() []*GetCommercialCategoriesByIDsResponse_CommercialCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

type GetAttributesNamesMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetAttributesNamesMapRequest) Reset() {
	*x = GetAttributesNamesMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttributesNamesMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttributesNamesMapRequest) ProtoMessage() {}

func (x *GetAttributesNamesMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttributesNamesMapRequest.ProtoReflect.Descriptor instead.
func (*GetAttributesNamesMapRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{52}
}

func (x *GetAttributesNamesMapRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetAttributesNamesMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes []*GetAttributesNamesMapResponse_Attribute `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *GetAttributesNamesMapResponse) Reset() {
	*x = GetAttributesNamesMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttributesNamesMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttributesNamesMapResponse) ProtoMessage() {}

func (x *GetAttributesNamesMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttributesNamesMapResponse.ProtoReflect.Descriptor instead.
func (*GetAttributesNamesMapResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{53}
}

func (x *GetAttributesNamesMapResponse) GetAttributes() []*GetAttributesNamesMapResponse_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ToDescriptionCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId []int64 `protobuf:"varint,1,rep,packed,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *ToDescriptionCategoryRequest) Reset() {
	*x = ToDescriptionCategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToDescriptionCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToDescriptionCategoryRequest) ProtoMessage() {}

func (x *ToDescriptionCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToDescriptionCategoryRequest.ProtoReflect.Descriptor instead.
func (*ToDescriptionCategoryRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{54}
}

func (x *ToDescriptionCategoryRequest) GetCategoryId() []int64 {
	if x != nil {
		return x.CategoryId
	}
	return nil
}

type ToDescriptionCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result map[int64]int64 `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ToDescriptionCategoryResponse) Reset() {
	*x = ToDescriptionCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToDescriptionCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToDescriptionCategoryResponse) ProtoMessage() {}

func (x *ToDescriptionCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToDescriptionCategoryResponse.ProtoReflect.Descriptor instead.
func (*ToDescriptionCategoryResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{55}
}

func (x *ToDescriptionCategoryResponse) GetResult() map[int64]int64 {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetSellerDescriptionCategoriesByIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId []int64 `protobuf:"varint,1,rep,packed,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *GetSellerDescriptionCategoriesByIDsRequest) Reset() {
	*x = GetSellerDescriptionCategoriesByIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellerDescriptionCategoriesByIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellerDescriptionCategoriesByIDsRequest) ProtoMessage() {}

func (x *GetSellerDescriptionCategoriesByIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellerDescriptionCategoriesByIDsRequest.ProtoReflect.Descriptor instead.
func (*GetSellerDescriptionCategoriesByIDsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{56}
}

func (x *GetSellerDescriptionCategoriesByIDsRequest) GetCategoryId() []int64 {
	if x != nil {
		return x.CategoryId
	}
	return nil
}

type GetSellerDescriptionCategoriesByIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*SellerCategory `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetSellerDescriptionCategoriesByIDsResponse) Reset() {
	*x = GetSellerDescriptionCategoriesByIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellerDescriptionCategoriesByIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellerDescriptionCategoriesByIDsResponse) ProtoMessage() {}

func (x *GetSellerDescriptionCategoriesByIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellerDescriptionCategoriesByIDsResponse.ProtoReflect.Descriptor instead.
func (*GetSellerDescriptionCategoriesByIDsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{57}
}

func (x *GetSellerDescriptionCategoriesByIDsResponse) GetResult() []*SellerCategory {
	if x != nil {
		return x.Result
	}
	return nil
}

type CheckCategoryFinalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId int64 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *CheckCategoryFinalRequest) Reset() {
	*x = CheckCategoryFinalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCategoryFinalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCategoryFinalRequest) ProtoMessage() {}

func (x *CheckCategoryFinalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCategoryFinalRequest.ProtoReflect.Descriptor instead.
func (*CheckCategoryFinalRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{58}
}

func (x *CheckCategoryFinalRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type CheckCategoryFinalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CheckCategoryFinalResponse) Reset() {
	*x = CheckCategoryFinalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCategoryFinalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCategoryFinalResponse) ProtoMessage() {}

func (x *CheckCategoryFinalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCategoryFinalResponse.ProtoReflect.Descriptor instead.
func (*CheckCategoryFinalResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{59}
}

func (x *CheckCategoryFinalResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CheckSellerDescriptionCategoryExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId int64 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *CheckSellerDescriptionCategoryExistsRequest) Reset() {
	*x = CheckSellerDescriptionCategoryExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSellerDescriptionCategoryExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSellerDescriptionCategoryExistsRequest) ProtoMessage() {}

func (x *CheckSellerDescriptionCategoryExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSellerDescriptionCategoryExistsRequest.ProtoReflect.Descriptor instead.
func (*CheckSellerDescriptionCategoryExistsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{60}
}

func (x *CheckSellerDescriptionCategoryExistsRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type CheckSellerDescriptionCategoryExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CheckSellerDescriptionCategoryExistsResponse) Reset() {
	*x = CheckSellerDescriptionCategoryExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSellerDescriptionCategoryExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSellerDescriptionCategoryExistsResponse) ProtoMessage() {}

func (x *CheckSellerDescriptionCategoryExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSellerDescriptionCategoryExistsResponse.ProtoReflect.Descriptor instead.
func (*CheckSellerDescriptionCategoryExistsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{61}
}

func (x *CheckSellerDescriptionCategoryExistsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type GetDictionaryValuesByDescCategoryAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeId int64  `protobuf:"varint,1,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
	CategoryId  int64  `protobuf:"varint,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Limit       int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Search      string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *GetDictionaryValuesByDescCategoryAttributeRequest) Reset() {
	*x = GetDictionaryValuesByDescCategoryAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByDescCategoryAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByDescCategoryAttributeRequest) ProtoMessage() {}

func (x *GetDictionaryValuesByDescCategoryAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByDescCategoryAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByDescCategoryAttributeRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{62}
}

func (x *GetDictionaryValuesByDescCategoryAttributeRequest) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *GetDictionaryValuesByDescCategoryAttributeRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *GetDictionaryValuesByDescCategoryAttributeRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetDictionaryValuesByDescCategoryAttributeRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type GetDictionaryValuesByDescCategoryAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetDictionaryValuesByDescCategoryAttributeResponse) Reset() {
	*x = GetDictionaryValuesByDescCategoryAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByDescCategoryAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByDescCategoryAttributeResponse) ProtoMessage() {}

func (x *GetDictionaryValuesByDescCategoryAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByDescCategoryAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByDescCategoryAttributeResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{63}
}

func (x *GetDictionaryValuesByDescCategoryAttributeResponse) GetResult() []*GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetSellerCategoryTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSellerCategoryTreeRequest) Reset() {
	*x = GetSellerCategoryTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellerCategoryTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellerCategoryTreeRequest) ProtoMessage() {}

func (x *GetSellerCategoryTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellerCategoryTreeRequest.ProtoReflect.Descriptor instead.
func (*GetSellerCategoryTreeRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{64}
}

type GetSellerCategoryTreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result map[string]*Node `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSellerCategoryTreeResponse) Reset() {
	*x = GetSellerCategoryTreeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellerCategoryTreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellerCategoryTreeResponse) ProtoMessage() {}

func (x *GetSellerCategoryTreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellerCategoryTreeResponse.ProtoReflect.Descriptor instead.
func (*GetSellerCategoryTreeResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{65}
}

func (x *GetSellerCategoryTreeResponse) GetResult() map[string]*Node {
	if x != nil {
		return x.Result
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Disabled bool             `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Nodes    map[string]*Node `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{66}
}

func (x *Node) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Node) GetNodes() map[string]*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type GetCategoryAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId            int64   `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	DictionaryValuesLimit int64   `protobuf:"varint,2,opt,name=dictionary_values_limit,json=dictionaryValuesLimit,proto3" json:"dictionary_values_limit,omitempty"`
	IsShowAtCreation      bool    `protobuf:"varint,3,opt,name=is_show_at_creation,json=isShowAtCreation,proto3" json:"is_show_at_creation,omitempty"`
	ExcludeAttributes     []int64 `protobuf:"varint,4,rep,packed,name=exclude_attributes,json=excludeAttributes,proto3" json:"exclude_attributes,omitempty"`
	IncludeChildren       bool    `protobuf:"varint,5,opt,name=include_children,json=includeChildren,proto3" json:"include_children,omitempty"`
}

func (x *GetCategoryAttributesRequest) Reset() {
	*x = GetCategoryAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryAttributesRequest) ProtoMessage() {}

func (x *GetCategoryAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryAttributesRequest.ProtoReflect.Descriptor instead.
func (*GetCategoryAttributesRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{67}
}

func (x *GetCategoryAttributesRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *GetCategoryAttributesRequest) GetDictionaryValuesLimit() int64 {
	if x != nil {
		return x.DictionaryValuesLimit
	}
	return 0
}

func (x *GetCategoryAttributesRequest) GetIsShowAtCreation() bool {
	if x != nil {
		return x.IsShowAtCreation
	}
	return false
}

func (x *GetCategoryAttributesRequest) GetExcludeAttributes() []int64 {
	if x != nil {
		return x.ExcludeAttributes
	}
	return nil
}

func (x *GetCategoryAttributesRequest) GetIncludeChildren() bool {
	if x != nil {
		return x.IncludeChildren
	}
	return false
}

type GetCategoryAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*CategoryAttribute `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetCategoryAttributesResponse) Reset() {
	*x = GetCategoryAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryAttributesResponse) ProtoMessage() {}

func (x *GetCategoryAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryAttributesResponse.ProtoReflect.Descriptor instead.
func (*GetCategoryAttributesResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{68}
}

func (x *GetCategoryAttributesResponse) GetResult() []*CategoryAttribute {
	if x != nil {
		return x.Result
	}
	return nil
}

type DictionaryValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value      string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ExternalId int64  `protobuf:"varint,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (x *DictionaryValues) Reset() {
	*x = DictionaryValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DictionaryValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictionaryValues) ProtoMessage() {}

func (x *DictionaryValues) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictionaryValues.ProtoReflect.Descriptor instead.
func (*DictionaryValues) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{69}
}

func (x *DictionaryValues) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DictionaryValues) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DictionaryValues) GetExternalId() int64 {
	if x != nil {
		return x.ExternalId
	}
	return 0
}

type GetDictionaryBrandsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastId int64 `protobuf:"varint,1,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetDictionaryBrandsRequest) Reset() {
	*x = GetDictionaryBrandsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryBrandsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryBrandsRequest) ProtoMessage() {}

func (x *GetDictionaryBrandsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryBrandsRequest.ProtoReflect.Descriptor instead.
func (*GetDictionaryBrandsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{70}
}

func (x *GetDictionaryBrandsRequest) GetLastId() int64 {
	if x != nil {
		return x.LastId
	}
	return 0
}

func (x *GetDictionaryBrandsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetDictionaryBrandsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brands []*GetDictionaryBrandsResponse_Brand `protobuf:"bytes,1,rep,name=brands,proto3" json:"brands,omitempty"`
}

func (x *GetDictionaryBrandsResponse) Reset() {
	*x = GetDictionaryBrandsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryBrandsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryBrandsResponse) ProtoMessage() {}

func (x *GetDictionaryBrandsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryBrandsResponse.ProtoReflect.Descriptor instead.
func (*GetDictionaryBrandsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{71}
}

func (x *GetDictionaryBrandsResponse) GetBrands() []*GetDictionaryBrandsResponse_Brand {
	if x != nil {
		return x.Brands
	}
	return nil
}

type GetSellerCategoryLevelsByCategoryIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryIds []int64 `protobuf:"varint,1,rep,packed,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
}

func (x *GetSellerCategoryLevelsByCategoryIDsRequest) Reset() {
	*x = GetSellerCategoryLevelsByCategoryIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellerCategoryLevelsByCategoryIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellerCategoryLevelsByCategoryIDsRequest) ProtoMessage() {}

func (x *GetSellerCategoryLevelsByCategoryIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellerCategoryLevelsByCategoryIDsRequest.ProtoReflect.Descriptor instead.
func (*GetSellerCategoryLevelsByCategoryIDsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{72}
}

func (x *GetSellerCategoryLevelsByCategoryIDsRequest) GetCategoryIds() []int64 {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

type GetSellerCategoryLevelsByCategoryIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryLevelsGroupedByCategoryId map[int64]*GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevelsGroup `protobuf:"bytes,1,rep,name=category_levels_grouped_by_category_id,json=categoryLevelsGroupedByCategoryId,proto3" json:"category_levels_grouped_by_category_id,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSellerCategoryLevelsByCategoryIDsResponse) Reset() {
	*x = GetSellerCategoryLevelsByCategoryIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellerCategoryLevelsByCategoryIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellerCategoryLevelsByCategoryIDsResponse) ProtoMessage() {}

func (x *GetSellerCategoryLevelsByCategoryIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellerCategoryLevelsByCategoryIDsResponse.ProtoReflect.Descriptor instead.
func (*GetSellerCategoryLevelsByCategoryIDsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{73}
}

func (x *GetSellerCategoryLevelsByCategoryIDsResponse) GetCategoryLevelsGroupedByCategoryId() map[int64]*GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevelsGroup {
	if x != nil {
		return x.CategoryLevelsGroupedByCategoryId
	}
	return nil
}

type SearchBrandByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SearchBrandByNameRequest) Reset() {
	*x = SearchBrandByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBrandByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBrandByNameRequest) ProtoMessage() {}

func (x *SearchBrandByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBrandByNameRequest.ProtoReflect.Descriptor instead.
func (*SearchBrandByNameRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{74}
}

func (x *SearchBrandByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SearchBrandByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brands []*SearchBrandByNameResponse_BrandValue `protobuf:"bytes,1,rep,name=brands,proto3" json:"brands,omitempty"`
}

func (x *SearchBrandByNameResponse) Reset() {
	*x = SearchBrandByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBrandByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBrandByNameResponse) ProtoMessage() {}

func (x *SearchBrandByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBrandByNameResponse.ProtoReflect.Descriptor instead.
func (*SearchBrandByNameResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{75}
}

func (x *SearchBrandByNameResponse) GetBrands() []*SearchBrandByNameResponse_BrandValue {
	if x != nil {
		return x.Brands
	}
	return nil
}

type GetCategoryByTypeIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeIds []int64 `protobuf:"varint,1,rep,packed,name=type_ids,json=typeIds,proto3" json:"type_ids,omitempty"`
	Limit   int64   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int64   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetCategoryByTypeIDsRequest) Reset() {
	*x = GetCategoryByTypeIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryByTypeIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryByTypeIDsRequest) ProtoMessage() {}

func (x *GetCategoryByTypeIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryByTypeIDsRequest.ProtoReflect.Descriptor instead.
func (*GetCategoryByTypeIDsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{76}
}

func (x *GetCategoryByTypeIDsRequest) GetTypeIds() []int64 {
	if x != nil {
		return x.TypeIds
	}
	return nil
}

func (x *GetCategoryByTypeIDsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCategoryByTypeIDsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetCategoryByTypeIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasNext          bool            `protobuf:"varint,1,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
	TypeIdCategoryId map[int64]int64 `protobuf:"bytes,2,rep,name=type_id_category_id,json=typeIdCategoryId,proto3" json:"type_id_category_id,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetCategoryByTypeIDsResponse) Reset() {
	*x = GetCategoryByTypeIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryByTypeIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryByTypeIDsResponse) ProtoMessage() {}

func (x *GetCategoryByTypeIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryByTypeIDsResponse.ProtoReflect.Descriptor instead.
func (*GetCategoryByTypeIDsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{77}
}

func (x *GetCategoryByTypeIDsResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *GetCategoryByTypeIDsResponse) GetTypeIdCategoryId() map[int64]int64 {
	if x != nil {
		return x.TypeIdCategoryId
	}
	return nil
}

type GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LongName              string `protobuf:"bytes,3,opt,name=long_name,json=longName,proto3" json:"long_name,omitempty"`
	CommercialTypeId      int64  `protobuf:"varint,4,opt,name=commercial_type_id,json=commercialTypeId,proto3" json:"commercial_type_id,omitempty"`
	ParentId              int64  `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	DescriptionCategoryId int64  `protobuf:"varint,6,opt,name=description_category_id,json=descriptionCategoryId,proto3" json:"description_category_id,omitempty"`
	MetazonId             int64  `protobuf:"varint,7,opt,name=metazon_id,json=metazonId,proto3" json:"metazon_id,omitempty"`
}

func (x *GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory) Reset() {
	*x = GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory) ProtoMessage() {}

func (x *GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory.ProtoReflect.Descriptor instead.
func (*GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory) GetLongName() string {
	if x != nil {
		return x.LongName
	}
	return ""
}

func (x *GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory) GetCommercialTypeId() int64 {
	if x != nil {
		return x.CommercialTypeId
	}
	return 0
}

func (x *GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory) GetDescriptionCategoryId() int64 {
	if x != nil {
		return x.DescriptionCategoryId
	}
	return 0
}

func (x *GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory) GetMetazonId() int64 {
	if x != nil {
		return x.MetazonId
	}
	return 0
}

type GetDictionaryValuesByAttributeIDAndRsIDListRequest_AttributeIDAndRsID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeId int64 `protobuf:"varint,1,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
	RsLookupId  int64 `protobuf:"varint,2,opt,name=rs_lookup_id,json=rsLookupId,proto3" json:"rs_lookup_id,omitempty"`
}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListRequest_AttributeIDAndRsID) Reset() {
	*x = GetDictionaryValuesByAttributeIDAndRsIDListRequest_AttributeIDAndRsID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListRequest_AttributeIDAndRsID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByAttributeIDAndRsIDListRequest_AttributeIDAndRsID) ProtoMessage() {}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListRequest_AttributeIDAndRsID) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByAttributeIDAndRsIDListRequest_AttributeIDAndRsID.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByAttributeIDAndRsIDListRequest_AttributeIDAndRsID) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListRequest_AttributeIDAndRsID) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListRequest_AttributeIDAndRsID) GetRsLookupId() int64 {
	if x != nil {
		return x.RsLookupId
	}
	return 0
}

type GetDictionaryValuesByAttributeIDAndRsIDListResponse_DictionaryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AttributeId int64  `protobuf:"varint,2,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
	RsLookupId  int64  `protobuf:"varint,3,opt,name=rs_lookup_id,json=rsLookupId,proto3" json:"rs_lookup_id,omitempty"`
	Value       string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListResponse_DictionaryValue) Reset() {
	*x = GetDictionaryValuesByAttributeIDAndRsIDListResponse_DictionaryValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListResponse_DictionaryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByAttributeIDAndRsIDListResponse_DictionaryValue) ProtoMessage() {}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListResponse_DictionaryValue) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByAttributeIDAndRsIDListResponse_DictionaryValue.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByAttributeIDAndRsIDListResponse_DictionaryValue) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListResponse_DictionaryValue) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListResponse_DictionaryValue) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListResponse_DictionaryValue) GetRsLookupId() int64 {
	if x != nil {
		return x.RsLookupId
	}
	return 0
}

func (x *GetDictionaryValuesByAttributeIDAndRsIDListResponse_DictionaryValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GetCommercialCategoriesTreeResponse_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64                                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CommercialTypeId int64                                       `protobuf:"varint,3,opt,name=commercial_type_id,json=commercialTypeId,proto3" json:"commercial_type_id,omitempty"`
	Nodes            []*GetCommercialCategoriesTreeResponse_Node `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty"`
	MetazonId        int64                                       `protobuf:"varint,5,opt,name=metazon_id,json=metazonId,proto3" json:"metazon_id,omitempty"`
}

func (x *GetCommercialCategoriesTreeResponse_Node) Reset() {
	*x = GetCommercialCategoriesTreeResponse_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommercialCategoriesTreeResponse_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommercialCategoriesTreeResponse_Node) ProtoMessage() {}

func (x *GetCommercialCategoriesTreeResponse_Node) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommercialCategoriesTreeResponse_Node.ProtoReflect.Descriptor instead.
func (*GetCommercialCategoriesTreeResponse_Node) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{8, 0}
}

func (x *GetCommercialCategoriesTreeResponse_Node) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCommercialCategoriesTreeResponse_Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCommercialCategoriesTreeResponse_Node) GetCommercialTypeId() int64 {
	if x != nil {
		return x.CommercialTypeId
	}
	return 0
}

func (x *GetCommercialCategoriesTreeResponse_Node) GetNodes() []*GetCommercialCategoriesTreeResponse_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *GetCommercialCategoriesTreeResponse_Node) GetMetazonId() int64 {
	if x != nil {
		return x.MetazonId
	}
	return 0
}

type GetDictionaryValueBatchResponse_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value   string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Info    string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Picture string `protobuf:"bytes,4,opt,name=picture,proto3" json:"picture,omitempty"`
}

func (x *GetDictionaryValueBatchResponse_Value) Reset() {
	*x = GetDictionaryValueBatchResponse_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValueBatchResponse_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValueBatchResponse_Value) ProtoMessage() {}

func (x *GetDictionaryValueBatchResponse_Value) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValueBatchResponse_Value.ProtoReflect.Descriptor instead.
func (*GetDictionaryValueBatchResponse_Value) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{15, 0}
}

func (x *GetDictionaryValueBatchResponse_Value) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDictionaryValueBatchResponse_Value) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GetDictionaryValueBatchResponse_Value) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *GetDictionaryValueBatchResponse_Value) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

type SearchCommercialCategoriesByNameResponse_CommercialCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LongName              string `protobuf:"bytes,3,opt,name=long_name,json=longName,proto3" json:"long_name,omitempty"`
	CommercialTypeId      int64  `protobuf:"varint,4,opt,name=commercial_type_id,json=commercialTypeId,proto3" json:"commercial_type_id,omitempty"`
	ParentId              int64  `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	DescriptionCategoryId int64  `protobuf:"varint,6,opt,name=description_category_id,json=descriptionCategoryId,proto3" json:"description_category_id,omitempty"`
	MetazonId             int64  `protobuf:"varint,7,opt,name=metazon_id,json=metazonId,proto3" json:"metazon_id,omitempty"`
}

func (x *SearchCommercialCategoriesByNameResponse_CommercialCategory) Reset() {
	*x = SearchCommercialCategoriesByNameResponse_CommercialCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCommercialCategoriesByNameResponse_CommercialCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCommercialCategoriesByNameResponse_CommercialCategory) ProtoMessage() {}

func (x *SearchCommercialCategoriesByNameResponse_CommercialCategory) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCommercialCategoriesByNameResponse_CommercialCategory.ProtoReflect.Descriptor instead.
func (*SearchCommercialCategoriesByNameResponse_CommercialCategory) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{24, 0}
}

func (x *SearchCommercialCategoriesByNameResponse_CommercialCategory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchCommercialCategoriesByNameResponse_CommercialCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchCommercialCategoriesByNameResponse_CommercialCategory) GetLongName() string {
	if x != nil {
		return x.LongName
	}
	return ""
}

func (x *SearchCommercialCategoriesByNameResponse_CommercialCategory) GetCommercialTypeId() int64 {
	if x != nil {
		return x.CommercialTypeId
	}
	return 0
}

func (x *SearchCommercialCategoriesByNameResponse_CommercialCategory) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *SearchCommercialCategoriesByNameResponse_CommercialCategory) GetDescriptionCategoryId() int64 {
	if x != nil {
		return x.DescriptionCategoryId
	}
	return 0
}

func (x *SearchCommercialCategoriesByNameResponse_CommercialCategory) GetMetazonId() int64 {
	if x != nil {
		return x.MetazonId
	}
	return 0
}

type GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LongName              string `protobuf:"bytes,3,opt,name=long_name,json=longName,proto3" json:"long_name,omitempty"`
	CommercialTypeId      int64  `protobuf:"varint,4,opt,name=commercial_type_id,json=commercialTypeId,proto3" json:"commercial_type_id,omitempty"`
	ParentId              int64  `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	DescriptionCategoryId int64  `protobuf:"varint,6,opt,name=description_category_id,json=descriptionCategoryId,proto3" json:"description_category_id,omitempty"`
	MetazonId             int64  `protobuf:"varint,7,opt,name=metazon_id,json=metazonId,proto3" json:"metazon_id,omitempty"`
}

func (x *GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory) Reset() {
	*x = GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory) ProtoMessage() {}

func (x *GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory.ProtoReflect.Descriptor instead.
func (*GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{36, 0}
}

func (x *GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory) GetLongName() string {
	if x != nil {
		return x.LongName
	}
	return ""
}

func (x *GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory) GetCommercialTypeId() int64 {
	if x != nil {
		return x.CommercialTypeId
	}
	return 0
}

func (x *GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory) GetDescriptionCategoryId() int64 {
	if x != nil {
		return x.DescriptionCategoryId
	}
	return 0
}

func (x *GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory) GetMetazonId() int64 {
	if x != nil {
		return x.MetazonId
	}
	return 0
}

type GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalId  int64    `protobuf:"varint,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Picture     string   `protobuf:"bytes,3,opt,name=picture,proto3" json:"picture,omitempty"`
	Description string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Images      []string `protobuf:"bytes,5,rep,name=images,proto3" json:"images,omitempty"`
	IsActive    bool     `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Id          int64    `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue) Reset() {
	*x = GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue) ProtoMessage() {}

func (x *GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{40, 0}
}

func (x *GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue) GetExternalId() int64 {
	if x != nil {
		return x.ExternalId
	}
	return 0
}

func (x *GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetDictionaryValuesByDictionaryKeyAndRsIDListRequest_DictionaryKeyAndRsID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictionaryKey string `protobuf:"bytes,1,opt,name=dictionary_key,json=dictionaryKey,proto3" json:"dictionary_key,omitempty"`
	RsLookupId    int64  `protobuf:"varint,2,opt,name=rs_lookup_id,json=rsLookupId,proto3" json:"rs_lookup_id,omitempty"`
}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListRequest_DictionaryKeyAndRsID) Reset() {
	*x = GetDictionaryValuesByDictionaryKeyAndRsIDListRequest_DictionaryKeyAndRsID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListRequest_DictionaryKeyAndRsID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByDictionaryKeyAndRsIDListRequest_DictionaryKeyAndRsID) ProtoMessage() {}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListRequest_DictionaryKeyAndRsID) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByDictionaryKeyAndRsIDListRequest_DictionaryKeyAndRsID.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByDictionaryKeyAndRsIDListRequest_DictionaryKeyAndRsID) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{42, 0}
}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListRequest_DictionaryKeyAndRsID) GetDictionaryKey() string {
	if x != nil {
		return x.DictionaryKey
	}
	return ""
}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListRequest_DictionaryKeyAndRsID) GetRsLookupId() int64 {
	if x != nil {
		return x.RsLookupId
	}
	return 0
}

type GetDictionaryValuesByDictionaryKeyAndRsIDListResponse_DictionaryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DictionaryKey string `protobuf:"bytes,2,opt,name=dictionary_key,json=dictionaryKey,proto3" json:"dictionary_key,omitempty"`
	RsLookupId    int64  `protobuf:"varint,3,opt,name=rs_lookup_id,json=rsLookupId,proto3" json:"rs_lookup_id,omitempty"`
	Value         string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListResponse_DictionaryValue) Reset() {
	*x = GetDictionaryValuesByDictionaryKeyAndRsIDListResponse_DictionaryValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListResponse_DictionaryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByDictionaryKeyAndRsIDListResponse_DictionaryValue) ProtoMessage() {}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListResponse_DictionaryValue) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByDictionaryKeyAndRsIDListResponse_DictionaryValue.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByDictionaryKeyAndRsIDListResponse_DictionaryValue) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{43, 0}
}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListResponse_DictionaryValue) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListResponse_DictionaryValue) GetDictionaryKey() string {
	if x != nil {
		return x.DictionaryKey
	}
	return ""
}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListResponse_DictionaryValue) GetRsLookupId() int64 {
	if x != nil {
		return x.RsLookupId
	}
	return 0
}

func (x *GetDictionaryValuesByDictionaryKeyAndRsIDListResponse_DictionaryValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GetDictionaryValuesByIDsResponse_DictionaryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DictionaryKey string  `protobuf:"bytes,2,opt,name=dictionary_key,json=dictionaryKey,proto3" json:"dictionary_key,omitempty"`
	RsLookupId    int64   `protobuf:"varint,3,opt,name=rs_lookup_id,json=rsLookupId,proto3" json:"rs_lookup_id,omitempty"`
	Value         string  `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	ExternalId    int64   `protobuf:"varint,5,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	OrderKey      float64 `protobuf:"fixed64,6,opt,name=order_key,json=orderKey,proto3" json:"order_key,omitempty"`
}

func (x *GetDictionaryValuesByIDsResponse_DictionaryValue) Reset() {
	*x = GetDictionaryValuesByIDsResponse_DictionaryValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByIDsResponse_DictionaryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByIDsResponse_DictionaryValue) ProtoMessage() {}

func (x *GetDictionaryValuesByIDsResponse_DictionaryValue) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByIDsResponse_DictionaryValue.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByIDsResponse_DictionaryValue) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{45, 0}
}

func (x *GetDictionaryValuesByIDsResponse_DictionaryValue) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDictionaryValuesByIDsResponse_DictionaryValue) GetDictionaryKey() string {
	if x != nil {
		return x.DictionaryKey
	}
	return ""
}

func (x *GetDictionaryValuesByIDsResponse_DictionaryValue) GetRsLookupId() int64 {
	if x != nil {
		return x.RsLookupId
	}
	return 0
}

func (x *GetDictionaryValuesByIDsResponse_DictionaryValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GetDictionaryValuesByIDsResponse_DictionaryValue) GetExternalId() int64 {
	if x != nil {
		return x.ExternalId
	}
	return 0
}

func (x *GetDictionaryValuesByIDsResponse_DictionaryValue) GetOrderKey() float64 {
	if x != nil {
		return x.OrderKey
	}
	return 0
}

type GetCommercialCategoriesByTypeIDsResponse_CommercialCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LongName              string `protobuf:"bytes,3,opt,name=long_name,json=longName,proto3" json:"long_name,omitempty"`
	CommercialTypeId      int64  `protobuf:"varint,4,opt,name=commercial_type_id,json=commercialTypeId,proto3" json:"commercial_type_id,omitempty"`
	ParentId              int64  `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	DescriptionCategoryId int64  `protobuf:"varint,6,opt,name=description_category_id,json=descriptionCategoryId,proto3" json:"description_category_id,omitempty"`
	MetazonId             int64  `protobuf:"varint,7,opt,name=metazon_id,json=metazonId,proto3" json:"metazon_id,omitempty"`
}

func (x *GetCommercialCategoriesByTypeIDsResponse_CommercialCategory) Reset() {
	*x = GetCommercialCategoriesByTypeIDsResponse_CommercialCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommercialCategoriesByTypeIDsResponse_CommercialCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommercialCategoriesByTypeIDsResponse_CommercialCategory) ProtoMessage() {}

func (x *GetCommercialCategoriesByTypeIDsResponse_CommercialCategory) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommercialCategoriesByTypeIDsResponse_CommercialCategory.ProtoReflect.Descriptor instead.
func (*GetCommercialCategoriesByTypeIDsResponse_CommercialCategory) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{49, 0}
}

func (x *GetCommercialCategoriesByTypeIDsResponse_CommercialCategory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCommercialCategoriesByTypeIDsResponse_CommercialCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCommercialCategoriesByTypeIDsResponse_CommercialCategory) GetLongName() string {
	if x != nil {
		return x.LongName
	}
	return ""
}

func (x *GetCommercialCategoriesByTypeIDsResponse_CommercialCategory) GetCommercialTypeId() int64 {
	if x != nil {
		return x.CommercialTypeId
	}
	return 0
}

func (x *GetCommercialCategoriesByTypeIDsResponse_CommercialCategory) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *GetCommercialCategoriesByTypeIDsResponse_CommercialCategory) GetDescriptionCategoryId() int64 {
	if x != nil {
		return x.DescriptionCategoryId
	}
	return 0
}

func (x *GetCommercialCategoriesByTypeIDsResponse_CommercialCategory) GetMetazonId() int64 {
	if x != nil {
		return x.MetazonId
	}
	return 0
}

type GetCommercialCategoriesByIDsResponse_CommercialCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LongName              string `protobuf:"bytes,3,opt,name=long_name,json=longName,proto3" json:"long_name,omitempty"`
	CommercialTypeId      int64  `protobuf:"varint,4,opt,name=commercial_type_id,json=commercialTypeId,proto3" json:"commercial_type_id,omitempty"`
	ParentId              int64  `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	DescriptionCategoryId int64  `protobuf:"varint,6,opt,name=description_category_id,json=descriptionCategoryId,proto3" json:"description_category_id,omitempty"`
	MetazonId             int64  `protobuf:"varint,7,opt,name=metazon_id,json=metazonId,proto3" json:"metazon_id,omitempty"`
}

func (x *GetCommercialCategoriesByIDsResponse_CommercialCategory) Reset() {
	*x = GetCommercialCategoriesByIDsResponse_CommercialCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommercialCategoriesByIDsResponse_CommercialCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommercialCategoriesByIDsResponse_CommercialCategory) ProtoMessage() {}

func (x *GetCommercialCategoriesByIDsResponse_CommercialCategory) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommercialCategoriesByIDsResponse_CommercialCategory.ProtoReflect.Descriptor instead.
func (*GetCommercialCategoriesByIDsResponse_CommercialCategory) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{51, 0}
}

func (x *GetCommercialCategoriesByIDsResponse_CommercialCategory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCommercialCategoriesByIDsResponse_CommercialCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCommercialCategoriesByIDsResponse_CommercialCategory) GetLongName() string {
	if x != nil {
		return x.LongName
	}
	return ""
}

func (x *GetCommercialCategoriesByIDsResponse_CommercialCategory) GetCommercialTypeId() int64 {
	if x != nil {
		return x.CommercialTypeId
	}
	return 0
}

func (x *GetCommercialCategoriesByIDsResponse_CommercialCategory) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *GetCommercialCategoriesByIDsResponse_CommercialCategory) GetDescriptionCategoryId() int64 {
	if x != nil {
		return x.DescriptionCategoryId
	}
	return 0
}

func (x *GetCommercialCategoriesByIDsResponse_CommercialCategory) GetMetazonId() int64 {
	if x != nil {
		return x.MetazonId
	}
	return 0
}

type GetAttributesNamesMapResponse_Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // в mapi - long_name
	Key  string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`   // в mapi - name
}

func (x *GetAttributesNamesMapResponse_Attribute) Reset() {
	*x = GetAttributesNamesMapResponse_Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttributesNamesMapResponse_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttributesNamesMapResponse_Attribute) ProtoMessage() {}

func (x *GetAttributesNamesMapResponse_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttributesNamesMapResponse_Attribute.ProtoReflect.Descriptor instead.
func (*GetAttributesNamesMapResponse_Attribute) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{53, 0}
}

func (x *GetAttributesNamesMapResponse_Attribute) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetAttributesNamesMapResponse_Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAttributesNamesMapResponse_Attribute) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value      string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	ExternalId int64  `protobuf:"varint,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Info       string `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	Picture    string `protobuf:"bytes,5,opt,name=picture,proto3" json:"picture,omitempty"`
}

func (x *GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues) Reset() {
	*x = GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues) ProtoMessage() {}

func (x *GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues.ProtoReflect.Descriptor instead.
func (*GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{63, 0}
}

func (x *GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues) GetExternalId() int64 {
	if x != nil {
		return x.ExternalId
	}
	return 0
}

func (x *GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

type GetDictionaryBrandsResponse_Brand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DictionaryExternalId int64  `protobuf:"varint,2,opt,name=dictionary_external_id,json=dictionaryExternalId,proto3" json:"dictionary_external_id,omitempty"`
	Value                string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Info                 string `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	Picture              string `protobuf:"bytes,5,opt,name=picture,proto3" json:"picture,omitempty"`
}

func (x *GetDictionaryBrandsResponse_Brand) Reset() {
	*x = GetDictionaryBrandsResponse_Brand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryBrandsResponse_Brand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryBrandsResponse_Brand) ProtoMessage() {}

func (x *GetDictionaryBrandsResponse_Brand) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryBrandsResponse_Brand.ProtoReflect.Descriptor instead.
func (*GetDictionaryBrandsResponse_Brand) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{71, 0}
}

func (x *GetDictionaryBrandsResponse_Brand) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDictionaryBrandsResponse_Brand) GetDictionaryExternalId() int64 {
	if x != nil {
		return x.DictionaryExternalId
	}
	return 0
}

func (x *GetDictionaryBrandsResponse_Brand) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GetDictionaryBrandsResponse_Brand) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *GetDictionaryBrandsResponse_Brand) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

type GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level int64  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevel) Reset() {
	*x = GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevel) ProtoMessage() {}

func (x *GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevel) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevel.ProtoReflect.Descriptor instead.
func (*GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevel) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{73, 0}
}

func (x *GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevel) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevelsGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryLevels []*GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevel `protobuf:"bytes,1,rep,name=category_levels,json=categoryLevels,proto3" json:"category_levels,omitempty"`
}

func (x *GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevelsGroup) Reset() {
	*x = GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevelsGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevelsGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevelsGroup) ProtoMessage() {}

func (x *GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevelsGroup) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevelsGroup.ProtoReflect.Descriptor instead.
func (*GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevelsGroup) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{73, 1}
}

func (x *GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevelsGroup) GetCategoryLevels() []*GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevel {
	if x != nil {
		return x.CategoryLevels
	}
	return nil
}

type SearchBrandByNameResponse_BrandValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Info              string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Name              string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Picture           string `protobuf:"bytes,4,opt,name=picture,proto3" json:"picture,omitempty"`
	DictionaryValueId int64  `protobuf:"varint,5,opt,name=dictionary_value_id,json=dictionaryValueId,proto3" json:"dictionary_value_id,omitempty"`
}

func (x *SearchBrandByNameResponse_BrandValue) Reset() {
	*x = SearchBrandByNameResponse_BrandValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBrandByNameResponse_BrandValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBrandByNameResponse_BrandValue) ProtoMessage() {}

func (x *SearchBrandByNameResponse_BrandValue) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBrandByNameResponse_BrandValue.ProtoReflect.Descriptor instead.
func (*SearchBrandByNameResponse_BrandValue) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP(), []int{75, 0}
}

func (x *SearchBrandByNameResponse_BrandValue) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchBrandByNameResponse_BrandValue) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *SearchBrandByNameResponse_BrandValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchBrandByNameResponse_BrandValue) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

func (x *SearchBrandByNameResponse_BrandValue) GetDictionaryValueId() int64 {
	if x != nil {
		return x.DictionaryValueId
	}
	return 0
}

var File_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto protoreflect.FileDescriptor

var file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDesc = []byte{
	0x0a, 0x4c, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x75,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x63, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x63, 0x1a, 0x0a, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a, 0x2a,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e,
	0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65,
	0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0a, 0x6d, 0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x3a, 0x24, 0x92, 0x41, 0x21,
	0x32, 0x1f, 0x7b, 0x22, 0x6d, 0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x22,
	0x3a, 0x5b, 0x33, 0x38, 0x33, 0x36, 0x37, 0x36, 0x32, 0x39, 0x36, 0x32, 0x30, 0x30, 0x30, 0x5d,
	0x7d, 0x22, 0x9b, 0x03, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x72, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61,
	0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xf7, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x46, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x3a, 0x17,
	0x92, 0x41, 0x14, 0x32, 0x12, 0x7b, 0x22, 0x69, 0x64, 0x73, 0x22, 0x3a, 0x5b, 0x34, 0x32, 0x35,
	0x36, 0x34, 0x36, 0x38, 0x30, 0x5d, 0x7d, 0x22, 0xa0, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x44, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xd4, 0x03, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x52, 0x73, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xb4, 0x01, 0x0a, 0x1b, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x73, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x52, 0x73, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49,
	0x44, 0x41, 0x6e, 0x64, 0x52, 0x73, 0x49, 0x44, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x2c, 0x67, 0x74, 0x3d, 0x30, 0x22, 0x52, 0x16, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x52, 0x73, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x95,
	0x01, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x44, 0x41, 0x6e,
	0x64, 0x52, 0x73, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1c, 0xf2, 0xde, 0x1f,
	0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x2c, 0x67, 0x74, 0x3d, 0x30, 0x22, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x73, 0x5f, 0x6c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1c, 0xf2, 0xde,
	0x1f, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x2c, 0x67, 0x74, 0x3d, 0x30, 0x22, 0x52, 0x0a, 0x72, 0x73, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x3a, 0x4f, 0x92, 0x41, 0x4c, 0x32, 0x4a, 0x7b, 0x22, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x72, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x34, 0x34, 0x33,
	0x36, 0x2c, 0x22, 0x72, 0x73, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x22,
	0x3a, 0x31, 0x38, 0x33, 0x7d, 0x5d, 0x7d, 0x22, 0xba, 0x02, 0x0a, 0x33, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x52,
	0x73, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x84, 0x01, 0x0a, 0x11, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49,
	0x44, 0x41, 0x6e, 0x64, 0x52, 0x73, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x7c, 0x0a, 0x0f, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x72, 0x73, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x72, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x54,
	0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd1, 0x02, 0x0a, 0x23, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x54,
	0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0xd3, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2,
	0xde, 0x1f, 0x02, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x9f,
	0x02, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4d,
	0x69, 0x6e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4d, 0x61, 0x78, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x12,
	0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69,
	0x73, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xf0, 0x04, 0x0a, 0x16, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x6f, 0x6e,
	0x6c, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x74, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x68,
	0x6f, 0x77, 0x41, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x68,
	0x6f, 0x77, 0x41, 0x73, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x13, 0xe2, 0xde, 0x1f, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x55, 0x4f, 0x4d, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x55, 0x6f, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x4d, 0x61, 0x69, 0x6e, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x58,
	0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x70, 0x75,
	0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x70, 0x70,
	0x75, 0x53, 0x6f, 0x72, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xf3, 0x06, 0x0a, 0x16, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xde, 0x1f, 0x02,
	0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x14,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x64, 0x0a, 0x18, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x52, 0x16, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x22, 0x72, 0x0a, 0x2b, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x92, 0x41, 0x1d,
	0x32, 0x1b, 0x7b, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73,
	0x22, 0x3a, 0x5b, 0x31, 0x37, 0x30, 0x32, 0x39, 0x32, 0x33, 0x35, 0x5d, 0x7d, 0x22, 0x9a, 0x01,
	0x0a, 0x2c, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x48, 0x69, 0x65,
	0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a,
	0x0a, 0x1b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x19, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0xee, 0x01, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x3a, 0x4e, 0x92, 0x41, 0x4b,
	0x32, 0x49, 0x7b, 0x22, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x22, 0x3a, 0x35, 0x39, 0x2c, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x22, 0x3a, 0x31, 0x37, 0x30, 0x32, 0x39, 0x32, 0x33, 0x35, 0x2c, 0x22, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x6e, 0x75, 0x6c, 0x6c,
	0x2c, 0x22, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3a, 0x31, 0x7d, 0x22, 0xec, 0x01, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x1a, 0x5b, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x2f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x0e, 0xe2, 0xde, 0x1f, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x44, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0xe2, 0xde, 0x1f, 0x0e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x52, 0x0e, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x7e, 0x0a,
	0x26, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x61, 0x70, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x0f, 0xe2,
	0xde, 0x1f, 0x0b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x73, 0x52, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x92, 0x41, 0x1d,
	0x32, 0x1b, 0x7b, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73,
	0x22, 0x3a, 0x5b, 0x31, 0x37, 0x30, 0x32, 0x39, 0x32, 0x33, 0x35, 0x5d, 0x7d, 0x22, 0x60, 0x0a,
	0x27, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x61, 0x70, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x22,
	0x8f, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x11, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x13, 0xe2, 0xde, 0x1f, 0x0f, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x52, 0x0f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x73, 0x3a,
	0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0x7b, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x3a, 0x5b, 0x22, 0x31, 0x22, 0x5d,
	0x7d, 0x22, 0x64, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x63, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x22, 0x60, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0x7b, 0x22,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x3a, 0x5b, 0x31,
	0x37, 0x30, 0x32, 0x39, 0x32, 0x33, 0x35, 0x5d, 0x7d, 0x22, 0x5a, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x27, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x67, 0x74, 0x3d,
	0x30, 0x22, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xf2, 0xde, 0x1f, 0x10, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x67, 0x74, 0x65, 0x3d, 0x30, 0x22, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3a, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30, 0x7b, 0x22,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a,
	0x22, 0xd0, 0x9f, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0,
	0xba, 0x22, 0x2c, 0x22, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3a, 0x30, 0x7d, 0x22, 0xa3,
	0x03, 0x0a, 0x28, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61,
	0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xf7, 0x01, 0x0a, 0x12, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x7a,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4d,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x51, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x6d, 0x61, 0x70, 0x1a, 0x36, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x01, 0x0a, 0x08,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x33, 0x12, 0x41, 0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x6f, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x3a, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x7b, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x37, 0x30, 0x32, 0x39, 0x32, 0x33, 0x35,
	0x7d, 0x22, 0x74, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x63, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x7b, 0x0a, 0x39, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x3a, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x7b, 0x22, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x37, 0x30, 0x32, 0x39, 0x32,
	0x33, 0x35, 0x7d, 0x22, 0x7a, 0x0a, 0x3a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22,
	0xf1, 0x01, 0x0a, 0x34, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x1c,
	0xf2, 0xde, 0x1f, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x67, 0x74, 0x3d, 0x30, 0x22, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x3a, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x7b, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x3a, 0x5b, 0x31, 0x37, 0x30, 0x32, 0x39, 0x32, 0x33,
	0x35, 0x5d, 0x2c, 0x20, 0x22, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x3a, 0x74, 0x72,
	0x75, 0x65, 0x7d, 0x22, 0xc5, 0x03, 0x0a, 0x35, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01,
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x14, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x1a, 0xf7, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x67,
	0x74, 0x3d, 0x30, 0x22, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x3a, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x7b, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x37, 0x30, 0x32, 0x39, 0x32, 0x33, 0x35, 0x7d, 0x22,
	0x82, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x65, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x6e, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x42, 0x0f, 0xe2, 0xde, 0x1f, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44,
	0x73, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x2f,
	0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x0e, 0xe2, 0xde, 0x1f, 0x0a, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x3a,
	0x33, 0x92, 0x41, 0x30, 0x32, 0x2e, 0x7b, 0x22, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x73, 0x22, 0x3a, 0x5b, 0x36, 0x31, 0x34, 0x32, 0x34, 0x39, 0x31, 0x5d, 0x2c,
	0x22, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x3a, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x7d, 0x22, 0xb9, 0x03, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x18,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x1a, 0xed, 0x01, 0x0a, 0x0f, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0e, 0xe2, 0xde, 0x1f, 0x0a, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x0c, 0xe2, 0xde, 0x1f, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xde, 0x1f, 0x02, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xcc, 0x08, 0x0a, 0x11, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x49, 0x73, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x63, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x10, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x4d, 0x61, 0x78, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xfd, 0x03, 0x0a, 0x34, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x52, 0x73, 0x49, 0x44, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xbc, 0x01, 0x0a, 0x1d, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x72, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x44, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x52, 0x73, 0x49, 0x44, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x52, 0x73, 0x49, 0x44, 0x42,
	0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x67, 0x74, 0x3d, 0x30, 0x22, 0x52, 0x18, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x52,
	0x73, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x9b, 0x01, 0x0a, 0x14, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x52, 0x73, 0x49, 0x44,
	0x12, 0x43, 0x0a, 0x0e, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x2c, 0x67, 0x74, 0x3d, 0x30, 0x22, 0x52, 0x0d, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x73, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1c, 0xf2, 0xde, 0x1f,
	0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x2c, 0x67, 0x74, 0x3d, 0x30, 0x22, 0x52, 0x0a, 0x72, 0x73, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x49, 0x64, 0x3a, 0x68, 0x92, 0x41, 0x65, 0x32, 0x63, 0x7b, 0x22, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x72, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3a, 0x5b, 0x7b, 0x22,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x3a,
	0x22, 0x31, 0x34, 0x36, 0x30, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x2c, 0x22, 0x72, 0x73, 0x5f, 0x6c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x38, 0x33, 0x7d, 0x5d, 0x7d, 0x22,
	0xc3, 0x02, 0x0a, 0x35, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x52, 0x73, 0x49, 0x44, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64,
	0x52, 0x73, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x10, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x1a, 0x80, 0x01, 0x0a, 0x0f, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a,
	0x0c, 0x72, 0x73, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x49,
	0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x14, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x26, 0xf2, 0xde, 0x1f, 0x22, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c,
	0x67, 0x74, 0x3d, 0x30, 0x2c, 0x64, 0x69, 0x76, 0x65, 0x2c, 0x67, 0x74, 0x3d, 0x30, 0x22, 0x52,
	0x12, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x49, 0x64, 0x73, 0x3a, 0x23, 0x92, 0x41, 0x20, 0x32, 0x1e, 0x7b, 0x22, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x22, 0x3a, 0x5b, 0x37, 0x34, 0x34, 0x5d, 0x7d, 0x22, 0xd6, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a,
	0x11, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x1a, 0xbe, 0x01, 0x0a, 0x0f, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x72,
	0x73, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x72, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x22, 0x5e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x3a, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x7b, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x37, 0x30, 0x32, 0x39, 0x32, 0x33, 0x35,
	0x7d, 0x22, 0x55, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5e, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x73, 0x3a, 0x18,
	0x92, 0x41, 0x15, 0x32, 0x13, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x22,
	0x3a, 0x5b, 0x34, 0x30, 0x39, 0x38, 0x5d, 0x7d, 0x22, 0xa3, 0x04, 0x0a, 0x28, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x1a, 0xf7, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69,
	0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x8e, 0x01,
	0x0a, 0x0f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x65, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6a,
	0x0a, 0x23, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x3a, 0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0x7b,
	0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x3a, 0x5b,
	0x32, 0x32, 0x38, 0x32, 0x35, 0x37, 0x34, 0x38, 0x5d, 0x7d, 0x22, 0x8d, 0x03, 0x0a, 0x24, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x1a, 0xf7, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x3a, 0x13, 0x92, 0x41,
	0x10, 0x32, 0x0e, 0x7b, 0x22, 0x69, 0x64, 0x73, 0x22, 0x3a, 0x5b, 0x22, 0x35, 0x39, 0x22, 0x5d,
	0x7d, 0x22, 0xbf, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4d,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x1a, 0x41, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x7e, 0x0a, 0x1c, 0x54, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x2c, 0x67, 0x74, 0x3d, 0x30, 0x22, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x3a, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x7b, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x5b, 0x31, 0x37, 0x30, 0x32, 0x39, 0x32, 0x33,
	0x35, 0x5d, 0x7d, 0x22, 0xb1, 0x01, 0x0a, 0x1d, 0x54, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x54, 0x6f, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x39, 0x0a, 0x0b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6e, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x3a, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x7b, 0x22, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x5b, 0x31, 0x37, 0x30,
	0x32, 0x39, 0x32, 0x33, 0x35, 0x5d, 0x7d, 0x22, 0x69, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x79, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x67, 0x74, 0x3d,
	0x30, 0x22, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x3a, 0x1d,
	0x92, 0x41, 0x1a, 0x32, 0x18, 0x7b, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x22, 0x3a, 0x31, 0x37, 0x30, 0x32, 0x39, 0x32, 0x33, 0x35, 0x7d, 0x22, 0x34, 0x0a,
	0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x6d, 0x0a, 0x2b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x3a, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x7b, 0x22, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x31, 0x37, 0x30, 0x32, 0x39, 0x32, 0x33,
	0x35, 0x7d, 0x22, 0x46, 0x0a, 0x2c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xfe, 0x01, 0x0a, 0x31, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2b, 0xe2, 0xde, 0x1f, 0x0b, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x44, 0xf2, 0xde, 0x1f, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x67, 0x74,
	0x3d, 0x30, 0x22, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2a, 0xe2, 0xde, 0x1f, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x44, 0xf2, 0xde, 0x1f, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x67, 0x74, 0x3d, 0x30,
	0x22, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0xaf, 0x02, 0x0a, 0x32,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x57, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x44, 0x65, 0x73,
	0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x1a, 0x87, 0x01, 0x0a, 0x10, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0x1e, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xcb, 0x01,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x53, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x06, 0xe2, 0xde, 0x1f, 0x02, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x52, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x03, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a,
	0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x67, 0x74, 0x3d, 0x30, 0x22, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x3a, 0x94, 0x01, 0x92,
	0x41, 0x90, 0x01, 0x32, 0x8d, 0x01, 0x7b, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x37, 0x30, 0x32, 0x39, 0x32, 0x33, 0x35, 0x22,
	0x2c, 0x20, 0x22, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x30,
	0x22, 0x2c, 0x20, 0x22, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x74, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20,
	0x22, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x5d, 0x2c, 0x20, 0x22, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x3a, 0x20, 0x74, 0x72,
	0x75, 0x65, 0x7d, 0x22, 0x5e, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x59, 0x0a, 0x10, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x9a,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x14,
	0xf2, 0xde, 0x1f, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x67, 0x74,
	0x65, 0x3d, 0x30, 0x22, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x25, 0xf2, 0xde, 0x1f,
	0x21, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x2c, 0x67, 0x74, 0x3d, 0x30, 0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x35, 0x30, 0x30,
	0x30, 0x22, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b,
	0x7b, 0x22, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3a, 0x31, 0x7d, 0x22, 0x80, 0x02, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x1a, 0x91, 0x01, 0x0a, 0x05, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0x93,
	0x01, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x42, 0x1d, 0xf2, 0xde, 0x1f, 0x19, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x3a, 0x22, 0x67, 0x74, 0x3d, 0x30, 0x2c, 0x64, 0x69, 0x76, 0x65, 0x2c, 0x67, 0x74,
	0x3d, 0x30, 0x22, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73,
	0x3a, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x7b, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x3a, 0x5b, 0x22, 0x31, 0x37, 0x30, 0x32, 0x39, 0x32, 0x33,
	0x35, 0x22, 0x5d, 0x7d, 0x22, 0xf4, 0x04, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xba, 0x01, 0x0a, 0x26, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x42, 0x79,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x21, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x1a, 0x49, 0x0a, 0x0d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x8e, 0x01,
	0x0a, 0x13, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x77, 0x0a, 0x0f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x42, 0x79, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0e,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x1a, 0xaa,
	0x01, 0x0a, 0x26, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x6a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x18, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xde, 0x1f, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x7b, 0x22, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x3a, 0x22, 0x5a, 0x61, 0x72, 0x61, 0x22, 0x7d, 0x22, 0xca, 0x02, 0x0a, 0x19,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0a, 0xe2, 0xde, 0x1f, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x52,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x1a, 0xce, 0x01, 0x0a, 0x0a, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xe2, 0xde, 0x1f, 0x02, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xde,
	0x1f, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2, 0xde, 0x1f, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xde, 0x1f,
	0x07, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x45, 0x0a, 0x13, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x15,
	0xe2, 0xde, 0x1f, 0x11, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x49, 0x44, 0x52, 0x11, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xde, 0x1f, 0x07,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3a, 0x35,
	0x92, 0x41, 0x32, 0x32, 0x30, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x22,
	0x3a, 0x5b, 0x22, 0x39, 0x31, 0x32, 0x33, 0x35, 0x22, 0x5d, 0x2c, 0x22, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x3a, 0x22, 0x31, 0x30, 0x22, 0x2c, 0x22, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0x3a, 0x22, 0x31, 0x22, 0x7d, 0x22, 0x8c, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78,
	0x74, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0xe2, 0xde, 0x1f, 0x10, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x52, 0x10, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x1a,
	0x43, 0x0a, 0x15, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x32, 0xea, 0x37, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12, 0xaa, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4d,
	0x61, 0x70, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22,
	0x21, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2d, 0x6d,
	0x61, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xd2, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22,
	0x36, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x2d, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xe5, 0x01, 0x0a, 0x24, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x79, 0x12, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f,
	0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x77, 0x69, 0x74, 0x68, 0x2d, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x3a,
	0x01, 0x2a, 0x12, 0xaa, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f,
	0x22, 0x2a, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x3a, 0x01, 0x2a, 0x12,
	0xa5, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x79, 0x49, 0x44, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0xc0, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x44, 0x65, 0x65, 0x70, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x44, 0x65, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x65, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x2f, 0x64, 0x65, 0x65, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xdf, 0x01, 0x0a, 0x25, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x22, 0x26, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9e, 0x01, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79,
	0x49, 0x44, 0x73, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x62, 0x79, 0x2d, 0x69, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xd8, 0x01,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44,
	0x73, 0x12, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x88, 0x02, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x2e, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x2d, 0x6d, 0x61, 0x70, 0x2f, 0x62, 0x79, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x2d, 0x69, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xe9, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x42,
	0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73,
	0x12, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x41, 0x88, 0x02, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x6d, 0x61, 0x70, 0x2f, 0x62, 0x79, 0x2d,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x69, 0x64,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa7, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x12, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f,
	0x62, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x69, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xc7,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x12,
	0x37, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69,
	0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x69, 0x61, 0x6c, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x62,
	0x79, 0x2d, 0x69, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xd8, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x12, 0x3b, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33,
	0x22, 0x2e, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x62, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x69, 0x64, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0xc2, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4d,
	0x61, 0x70, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4d,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2d, 0x6d, 0x61, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x87, 0x02, 0x0a, 0x2d, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x48, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x36, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x62, 0x79, 0x2d,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x64, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0xcc, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2d, 0x62, 0x79, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0xc2, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x54, 0x72, 0x65,
	0x65, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63,
	0x69, 0x61, 0x6c, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x74,
	0x72, 0x65, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xe4, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x3e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61,
	0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x7a, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61,
	0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x7a, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c,
	0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x62, 0x79, 0x2d, 0x6d,
	0x65, 0x74, 0x61, 0x7a, 0x6f, 0x6e, 0x2d, 0x69, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9e, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x42,
	0x79, 0x49, 0x44, 0x73, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x2f, 0x62, 0x79, 0x2d, 0x69, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x80,
	0x02, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x73, 0x12, 0x45, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x44,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3d, 0x22, 0x38, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x2f, 0x62, 0x79, 0x2d, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2d, 0x69, 0x64, 0x3a, 0x01,
	0x2a, 0x12, 0x8c, 0x02, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x44, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x52, 0x73, 0x49, 0x44, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x48, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x52, 0x73,
	0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x41, 0x6e, 0x64, 0x52, 0x73, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40,
	0x22, 0x3b, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x2f, 0x62, 0x79, 0x2d, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2d, 0x6b,
	0x65, 0x79, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x72, 0x73, 0x2d, 0x69, 0x64, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0x84, 0x02, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x52, 0x73, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x52, 0x73, 0x49, 0x44, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x42, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x44, 0x41, 0x6e,
	0x64, 0x52, 0x73, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x22, 0x39, 0x2f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2f, 0x62, 0x79, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2d, 0x69, 0x64, 0x2d, 0x61, 0x6e, 0x64, 0x2d, 0x72, 0x73,
	0x2d, 0x69, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xfb, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42,
	0x79, 0x44, 0x65, 0x73, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42,
	0x79, 0x44, 0x65, 0x73, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x64, 0x65, 0x73, 0x63,
	0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0xb6, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x49,
	0x44, 0x73, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x2d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x2f, 0x62, 0x79, 0x2d, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xb3,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x3a, 0x01, 0x2a, 0x12, 0x95, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x96, 0x01, 0x0a,
	0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x2f, 0x62, 0x79, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xad, 0x01, 0x0a, 0x15, 0x54, 0x6f, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x63, 0x2e, 0x54, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x54, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x74, 0x6f, 0x2d, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0xe8, 0x01, 0x0a, 0x24, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3f,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x40, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x63, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x32, 0x2f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2d, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0xaa, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2d, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xd8, 0x01,
	0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x42, 0x79, 0x49, 0x44, 0x73, 0x12, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25,
	0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x62,
	0x79, 0x2d, 0x69, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x02, 0x0a, 0x32, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x22, 0x3c, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2d, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x62, 0x79, 0x2d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xeb, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x34, 0x22, 0x2f, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2d, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0xe9, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x73, 0x12, 0x3f,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x42, 0x79, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x40, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x42, 0x79, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x22, 0x33, 0x2f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2d, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x2f, 0x62,
	0x79, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2d, 0x69, 0x64, 0x73, 0x3a, 0x01,
	0x2a, 0x42, 0x04, 0x5a, 0x02, 0x73, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescOnce sync.Once
	file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescData = file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDesc
)

func file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescGZIP() []byte {
	file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescOnce.Do(func() {
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescData)
	})
	return file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDescData
}

var file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 106)
var file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_goTypes = []interface{}{
	(*GetCommercialCategoriesByMetazonIDsRequest)(nil),                            // 0: product.service.sc.GetCommercialCategoriesByMetazonIDsRequest
	(*GetCommercialCategoriesByMetazonIDsResponse)(nil),                           // 1: product.service.sc.GetCommercialCategoriesByMetazonIDsResponse
	(*GetDictionaryByIDsRequest)(nil),                                             // 2: product.service.sc.GetDictionaryByIDsRequest
	(*Dictionary)(nil),                                                            // 3: product.service.sc.Dictionary
	(*GetDictionaryByIDsResponse)(nil),                                            // 4: product.service.sc.GetDictionaryByIDsResponse
	(*GetDictionaryValuesByAttributeIDAndRsIDListRequest)(nil),                    // 5: product.service.sc.GetDictionaryValuesByAttributeIDAndRsIDListRequest
	(*GetDictionaryValuesByAttributeIDAndRsIDListResponse)(nil),                   // 6: product.service.sc.GetDictionaryValuesByAttributeIDAndRsIDListResponse
	(*GetCommercialCategoriesTreeRequest)(nil),                                    // 7: product.service.sc.GetCommercialCategoriesTreeRequest
	(*GetCommercialCategoriesTreeResponse)(nil),                                   // 8: product.service.sc.GetCommercialCategoriesTreeResponse
	(*AttributeFlags)(nil),                                                        // 9: product.service.sc.AttributeFlags
	(*CategoryAttributeFlags)(nil),                                                // 10: product.service.sc.CategoryAttributeFlags
	(*CategoryAttributeModel)(nil),                                                // 11: product.service.sc.CategoryAttributeModel
	(*GetCategoriesAttributesWithHierarchyRequest)(nil),                           // 12: product.service.sc.GetCategoriesAttributesWithHierarchyRequest
	(*GetCategoriesAttributesWithHierarchyResponse)(nil),                          // 13: product.service.sc.GetCategoriesAttributesWithHierarchyResponse
	(*GetDictionaryValueBatchRequest)(nil),                                        // 14: product.service.sc.GetDictionaryValueBatchRequest
	(*GetDictionaryValueBatchResponse)(nil),                                       // 15: product.service.sc.GetDictionaryValueBatchResponse
	(*CategoryTypeMap)(nil),                                                       // 16: product.service.sc.CategoryTypeMap
	(*GetCategoryTypeMapByCategoryIDsRequest)(nil),                                // 17: product.service.sc.GetCategoryTypeMapByCategoryIDsRequest
	(*GetCategoryTypeMapByCategoryIDsResponse)(nil),                               // 18: product.service.sc.GetCategoryTypeMapByCategoryIDsResponse
	(*GetCategoryTypeMapByCategoryTypeIDsRequest)(nil),                            // 19: product.service.sc.GetCategoryTypeMapByCategoryTypeIDsRequest
	(*GetCategoryTypeMapByCategoryTypeIDsResponse)(nil),                           // 20: product.service.sc.GetCategoryTypeMapByCategoryTypeIDsResponse
	(*GetCategoriesByIDsRequest)(nil),                                             // 21: product.service.sc.GetCategoriesByIDsRequest
	(*GetCategoriesByIDsResponse)(nil),                                            // 22: product.service.sc.GetCategoriesByIDsResponse
	(*SearchCommercialCategoriesByNameRequest)(nil),                               // 23: product.service.sc.SearchCommercialCategoriesByNameRequest
	(*SearchCommercialCategoriesByNameResponse)(nil),                              // 24: product.service.sc.SearchCommercialCategoriesByNameResponse
	(*GetCommercialCategoriesMapRequest)(nil),                                     // 25: product.service.sc.GetCommercialCategoriesMapRequest
	(*GetCommercialCategoriesMapResponse)(nil),                                    // 26: product.service.sc.GetCommercialCategoriesMapResponse
	(*Category)(nil),                                                              // 27: product.service.sc.Category
	(*SellerCategory)(nil),                                                        // 28: product.service.sc.SellerCategory
	(*GetSellerDescriptionCategoryBranchByIDRequest)(nil),                         // 29: product.service.sc.GetSellerDescriptionCategoryBranchByIDRequest
	(*GetSellerDescriptionCategoryBranchByIDResponse)(nil),                        // 30: product.service.sc.GetSellerDescriptionCategoryBranchByIDResponse
	(*GetFinalUnmappedDescriptionCategoriesRequest)(nil),                          // 31: product.service.sc.GetFinalUnmappedDescriptionCategoriesRequest
	(*GetFinalUnmappedDescriptionCategoriesResponse)(nil),                         // 32: product.service.sc.GetFinalUnmappedDescriptionCategoriesResponse
	(*GetSellerDescriptionCategoriesFinalByDescriptionIDRequest)(nil),             // 33: product.service.sc.GetSellerDescriptionCategoriesFinalByDescriptionIDRequest
	(*GetSellerDescriptionCategoriesFinalByDescriptionIDResponse)(nil),            // 34: product.service.sc.GetSellerDescriptionCategoriesFinalByDescriptionIDResponse
	(*GetMappedCommercialCategoriesByDescriptionIDsRequest)(nil),                  // 35: product.service.sc.GetMappedCommercialCategoriesByDescriptionIDsRequest
	(*GetMappedCommercialCategoriesByDescriptionIDsResponse)(nil),                 // 36: product.service.sc.GetMappedCommercialCategoriesByDescriptionIDsResponse
	(*GetDescriptionCategoryDeepRequest)(nil),                                     // 37: product.service.sc.GetDescriptionCategoryDeepRequest
	(*GetDescriptionCategoryDeepResponse)(nil),                                    // 38: product.service.sc.GetDescriptionCategoryDeepResponse
	(*GetDictionaryValuesByDictionaryExternalIDsRequest)(nil),                     // 39: product.service.sc.GetDictionaryValuesByDictionaryExternalIDsRequest
	(*GetDictionaryValuesByDictionaryExternalIDsResponse)(nil),                    // 40: product.service.sc.GetDictionaryValuesByDictionaryExternalIDsResponse
	(*CategoryAttribute)(nil),                                                     // 41: product.service.sc.CategoryAttribute
	(*GetDictionaryValuesByDictionaryKeyAndRsIDListRequest)(nil),                  // 42: product.service.sc.GetDictionaryValuesByDictionaryKeyAndRsIDListRequest
	(*GetDictionaryValuesByDictionaryKeyAndRsIDListResponse)(nil),                 // 43: product.service.sc.GetDictionaryValuesByDictionaryKeyAndRsIDListResponse
	(*GetDictionaryValuesByIDsRequest)(nil),                                       // 44: product.service.sc.GetDictionaryValuesByIDsRequest
	(*GetDictionaryValuesByIDsResponse)(nil),                                      // 45: product.service.sc.GetDictionaryValuesByIDsResponse
	(*GetCategoryBranchByIDRequest)(nil),                                          // 46: product.service.sc.GetCategoryBranchByIDRequest
	(*GetCategoryBranchByIDResponse)(nil),                                         // 47: product.service.sc.GetCategoryBranchByIDResponse
	(*GetCommercialCategoriesByTypeIDsRequest)(nil),                               // 48: product.service.sc.GetCommercialCategoriesByTypeIDsRequest
	(*GetCommercialCategoriesByTypeIDsResponse)(nil),                              // 49: product.service.sc.GetCommercialCategoriesByTypeIDsResponse
	(*GetCommercialCategoriesByIDsRequest)(nil),                                   // 50: product.service.sc.GetCommercialCategoriesByIDsRequest
	(*GetCommercialCategoriesByIDsResponse)(nil),                                  // 51: product.service.sc.GetCommercialCategoriesByIDsResponse
	(*GetAttributesNamesMapRequest)(nil),                                          // 52: product.service.sc.GetAttributesNamesMapRequest
	(*GetAttributesNamesMapResponse)(nil),                                         // 53: product.service.sc.GetAttributesNamesMapResponse
	(*ToDescriptionCategoryRequest)(nil),                                          // 54: product.service.sc.ToDescriptionCategoryRequest
	(*ToDescriptionCategoryResponse)(nil),                                         // 55: product.service.sc.ToDescriptionCategoryResponse
	(*GetSellerDescriptionCategoriesByIDsRequest)(nil),                            // 56: product.service.sc.GetSellerDescriptionCategoriesByIDsRequest
	(*GetSellerDescriptionCategoriesByIDsResponse)(nil),                           // 57: product.service.sc.GetSellerDescriptionCategoriesByIDsResponse
	(*CheckCategoryFinalRequest)(nil),                                             // 58: product.service.sc.CheckCategoryFinalRequest
	(*CheckCategoryFinalResponse)(nil),                                            // 59: product.service.sc.CheckCategoryFinalResponse
	(*CheckSellerDescriptionCategoryExistsRequest)(nil),                           // 60: product.service.sc.CheckSellerDescriptionCategoryExistsRequest
	(*CheckSellerDescriptionCategoryExistsResponse)(nil),                          // 61: product.service.sc.CheckSellerDescriptionCategoryExistsResponse
	(*GetDictionaryValuesByDescCategoryAttributeRequest)(nil),                     // 62: product.service.sc.GetDictionaryValuesByDescCategoryAttributeRequest
	(*GetDictionaryValuesByDescCategoryAttributeResponse)(nil),                    // 63: product.service.sc.GetDictionaryValuesByDescCategoryAttributeResponse
	(*GetSellerCategoryTreeRequest)(nil),                                          // 64: product.service.sc.GetSellerCategoryTreeRequest
	(*GetSellerCategoryTreeResponse)(nil),                                         // 65: product.service.sc.GetSellerCategoryTreeResponse
	(*Node)(nil),                                                                  // 66: product.service.sc.Node
	(*GetCategoryAttributesRequest)(nil),                                          // 67: product.service.sc.GetCategoryAttributesRequest
	(*GetCategoryAttributesResponse)(nil),                                         // 68: product.service.sc.GetCategoryAttributesResponse
	(*DictionaryValues)(nil),                                                      // 69: product.service.sc.DictionaryValues
	(*GetDictionaryBrandsRequest)(nil),                                            // 70: product.service.sc.GetDictionaryBrandsRequest
	(*GetDictionaryBrandsResponse)(nil),                                           // 71: product.service.sc.GetDictionaryBrandsResponse
	(*GetSellerCategoryLevelsByCategoryIDsRequest)(nil),                           // 72: product.service.sc.GetSellerCategoryLevelsByCategoryIDsRequest
	(*GetSellerCategoryLevelsByCategoryIDsResponse)(nil),                          // 73: product.service.sc.GetSellerCategoryLevelsByCategoryIDsResponse
	(*SearchBrandByNameRequest)(nil),                                              // 74: product.service.sc.SearchBrandByNameRequest
	(*SearchBrandByNameResponse)(nil),                                             // 75: product.service.sc.SearchBrandByNameResponse
	(*GetCategoryByTypeIDsRequest)(nil),                                           // 76: product.service.sc.GetCategoryByTypeIDsRequest
	(*GetCategoryByTypeIDsResponse)(nil),                                          // 77: product.service.sc.GetCategoryByTypeIDsResponse
	(*GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory)(nil),        // 78: product.service.sc.GetCommercialCategoriesByMetazonIDsResponse.CommercialCategory
	(*GetDictionaryValuesByAttributeIDAndRsIDListRequest_AttributeIDAndRsID)(nil), // 79: product.service.sc.GetDictionaryValuesByAttributeIDAndRsIDListRequest.AttributeIDAndRsID
	(*GetDictionaryValuesByAttributeIDAndRsIDListResponse_DictionaryValue)(nil),   // 80: product.service.sc.GetDictionaryValuesByAttributeIDAndRsIDListResponse.DictionaryValue
	(*GetCommercialCategoriesTreeResponse_Node)(nil),                              // 81: product.service.sc.GetCommercialCategoriesTreeResponse.Node
	nil, // 82: product.service.sc.CategoryAttributeFlags.BoolFlagsEntry
	(*GetDictionaryValueBatchResponse_Value)(nil),                       // 83: product.service.sc.GetDictionaryValueBatchResponse.Value
	(*SearchCommercialCategoriesByNameResponse_CommercialCategory)(nil), // 84: product.service.sc.SearchCommercialCategoriesByNameResponse.CommercialCategory
	nil, // 85: product.service.sc.GetCommercialCategoriesMapResponse.MapEntry
	(*GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory)(nil), // 86: product.service.sc.GetMappedCommercialCategoriesByDescriptionIDsResponse.CommercialCategory
	(*GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue)(nil),       // 87: product.service.sc.GetDictionaryValuesByDictionaryExternalIDsResponse.DictionaryValue
	nil, // 88: product.service.sc.CategoryAttribute.BoolFlagsEntry
	(*GetDictionaryValuesByDictionaryKeyAndRsIDListRequest_DictionaryKeyAndRsID)(nil), // 89: product.service.sc.GetDictionaryValuesByDictionaryKeyAndRsIDListRequest.DictionaryKeyAndRsID
	(*GetDictionaryValuesByDictionaryKeyAndRsIDListResponse_DictionaryValue)(nil),     // 90: product.service.sc.GetDictionaryValuesByDictionaryKeyAndRsIDListResponse.DictionaryValue
	(*GetDictionaryValuesByIDsResponse_DictionaryValue)(nil),                          // 91: product.service.sc.GetDictionaryValuesByIDsResponse.DictionaryValue
	(*GetCommercialCategoriesByTypeIDsResponse_CommercialCategory)(nil),               // 92: product.service.sc.GetCommercialCategoriesByTypeIDsResponse.CommercialCategory
	nil, // 93: product.service.sc.GetCommercialCategoriesByTypeIDsResponse.CategoriesEntry
	(*GetCommercialCategoriesByIDsResponse_CommercialCategory)(nil), // 94: product.service.sc.GetCommercialCategoriesByIDsResponse.CommercialCategory
	(*GetAttributesNamesMapResponse_Attribute)(nil),                 // 95: product.service.sc.GetAttributesNamesMapResponse.Attribute
	nil, // 96: product.service.sc.ToDescriptionCategoryResponse.ResultEntry
	(*GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues)(nil), // 97: product.service.sc.GetDictionaryValuesByDescCategoryAttributeResponse.DictionaryValues
	nil, // 98: product.service.sc.GetSellerCategoryTreeResponse.ResultEntry
	nil, // 99: product.service.sc.Node.NodesEntry
	(*GetDictionaryBrandsResponse_Brand)(nil),                                // 100: product.service.sc.GetDictionaryBrandsResponse.Brand
	(*GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevel)(nil),       // 101: product.service.sc.GetSellerCategoryLevelsByCategoryIDsResponse.CategoryLevel
	(*GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevelsGroup)(nil), // 102: product.service.sc.GetSellerCategoryLevelsByCategoryIDsResponse.CategoryLevelsGroup
	nil, // 103: product.service.sc.GetSellerCategoryLevelsByCategoryIDsResponse.CategoryLevelsGroupedByCategoryIdEntry
	(*SearchBrandByNameResponse_BrandValue)(nil), // 104: product.service.sc.SearchBrandByNameResponse.BrandValue
	nil, // 105: product.service.sc.GetCategoryByTypeIDsResponse.TypeIdCategoryIdEntry
}
var file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_depIdxs = []int32{
	78,  // 0: product.service.sc.GetCommercialCategoriesByMetazonIDsResponse.categories:type_name -> product.service.sc.GetCommercialCategoriesByMetazonIDsResponse.CommercialCategory
	3,   // 1: product.service.sc.GetDictionaryByIDsResponse.result:type_name -> product.service.sc.Dictionary
	79,  // 2: product.service.sc.GetDictionaryValuesByAttributeIDAndRsIDListRequest.attribute_id_and_rs_id_list:type_name -> product.service.sc.GetDictionaryValuesByAttributeIDAndRsIDListRequest.AttributeIDAndRsID
	80,  // 3: product.service.sc.GetDictionaryValuesByAttributeIDAndRsIDListResponse.dictionary_values:type_name -> product.service.sc.GetDictionaryValuesByAttributeIDAndRsIDListResponse.DictionaryValue
	81,  // 4: product.service.sc.GetCommercialCategoriesTreeResponse.result:type_name -> product.service.sc.GetCommercialCategoriesTreeResponse.Node
	82,  // 5: product.service.sc.CategoryAttributeFlags.bool_flags:type_name -> product.service.sc.CategoryAttributeFlags.BoolFlagsEntry
	9,   // 6: product.service.sc.CategoryAttributeModel.attribute_flags:type_name -> product.service.sc.AttributeFlags
	10,  // 7: product.service.sc.CategoryAttributeModel.category_attribute_flags:type_name -> product.service.sc.CategoryAttributeFlags
	11,  // 8: product.service.sc.GetCategoriesAttributesWithHierarchyResponse.categories_attributes_model:type_name -> product.service.sc.CategoryAttributeModel
	83,  // 9: product.service.sc.GetDictionaryValueBatchResponse.Values:type_name -> product.service.sc.GetDictionaryValueBatchResponse.Value
	16,  // 10: product.service.sc.GetCategoryTypeMapByCategoryIDsResponse.map:type_name -> product.service.sc.CategoryTypeMap
	16,  // 11: product.service.sc.GetCategoryTypeMapByCategoryTypeIDsResponse.map:type_name -> product.service.sc.CategoryTypeMap
	27,  // 12: product.service.sc.GetCategoriesByIDsResponse.categories:type_name -> product.service.sc.Category
	84,  // 13: product.service.sc.SearchCommercialCategoriesByNameResponse.result:type_name -> product.service.sc.SearchCommercialCategoriesByNameResponse.CommercialCategory
	85,  // 14: product.service.sc.GetCommercialCategoriesMapResponse.map:type_name -> product.service.sc.GetCommercialCategoriesMapResponse.MapEntry
	28,  // 15: product.service.sc.GetSellerDescriptionCategoryBranchByIDResponse.categories:type_name -> product.service.sc.SellerCategory
	27,  // 16: product.service.sc.GetFinalUnmappedDescriptionCategoriesResponse.categories:type_name -> product.service.sc.Category
	27,  // 17: product.service.sc.GetSellerDescriptionCategoriesFinalByDescriptionIDResponse.categories:type_name -> product.service.sc.Category
	86,  // 18: product.service.sc.GetMappedCommercialCategoriesByDescriptionIDsResponse.commercial_categories:type_name -> product.service.sc.GetMappedCommercialCategoriesByDescriptionIDsResponse.CommercialCategory
	87,  // 19: product.service.sc.GetDictionaryValuesByDictionaryExternalIDsResponse.dictionaryOriginalValues:type_name -> product.service.sc.GetDictionaryValuesByDictionaryExternalIDsResponse.DictionaryValue
	88,  // 20: product.service.sc.CategoryAttribute.bool_flags:type_name -> product.service.sc.CategoryAttribute.BoolFlagsEntry
	69,  // 21: product.service.sc.CategoryAttribute.dictionary_values:type_name -> product.service.sc.DictionaryValues
	89,  // 22: product.service.sc.GetDictionaryValuesByDictionaryKeyAndRsIDListRequest.dictionary_key_and_rs_id_list:type_name -> product.service.sc.GetDictionaryValuesByDictionaryKeyAndRsIDListRequest.DictionaryKeyAndRsID
	90,  // 23: product.service.sc.GetDictionaryValuesByDictionaryKeyAndRsIDListResponse.dictionary_values:type_name -> product.service.sc.GetDictionaryValuesByDictionaryKeyAndRsIDListResponse.DictionaryValue
	91,  // 24: product.service.sc.GetDictionaryValuesByIDsResponse.dictionary_values:type_name -> product.service.sc.GetDictionaryValuesByIDsResponse.DictionaryValue
	27,  // 25: product.service.sc.GetCategoryBranchByIDResponse.result:type_name -> product.service.sc.Category
	93,  // 26: product.service.sc.GetCommercialCategoriesByTypeIDsResponse.categories:type_name -> product.service.sc.GetCommercialCategoriesByTypeIDsResponse.CategoriesEntry
	94,  // 27: product.service.sc.GetCommercialCategoriesByIDsResponse.categories:type_name -> product.service.sc.GetCommercialCategoriesByIDsResponse.CommercialCategory
	95,  // 28: product.service.sc.GetAttributesNamesMapResponse.attributes:type_name -> product.service.sc.GetAttributesNamesMapResponse.Attribute
	96,  // 29: product.service.sc.ToDescriptionCategoryResponse.result:type_name -> product.service.sc.ToDescriptionCategoryResponse.ResultEntry
	28,  // 30: product.service.sc.GetSellerDescriptionCategoriesByIDsResponse.result:type_name -> product.service.sc.SellerCategory
	97,  // 31: product.service.sc.GetDictionaryValuesByDescCategoryAttributeResponse.result:type_name -> product.service.sc.GetDictionaryValuesByDescCategoryAttributeResponse.DictionaryValues
	98,  // 32: product.service.sc.GetSellerCategoryTreeResponse.result:type_name -> product.service.sc.GetSellerCategoryTreeResponse.ResultEntry
	99,  // 33: product.service.sc.Node.nodes:type_name -> product.service.sc.Node.NodesEntry
	41,  // 34: product.service.sc.GetCategoryAttributesResponse.result:type_name -> product.service.sc.CategoryAttribute
	100, // 35: product.service.sc.GetDictionaryBrandsResponse.brands:type_name -> product.service.sc.GetDictionaryBrandsResponse.Brand
	103, // 36: product.service.sc.GetSellerCategoryLevelsByCategoryIDsResponse.category_levels_grouped_by_category_id:type_name -> product.service.sc.GetSellerCategoryLevelsByCategoryIDsResponse.CategoryLevelsGroupedByCategoryIdEntry
	104, // 37: product.service.sc.SearchBrandByNameResponse.brands:type_name -> product.service.sc.SearchBrandByNameResponse.BrandValue
	105, // 38: product.service.sc.GetCategoryByTypeIDsResponse.type_id_category_id:type_name -> product.service.sc.GetCategoryByTypeIDsResponse.TypeIdCategoryIdEntry
	81,  // 39: product.service.sc.GetCommercialCategoriesTreeResponse.Node.nodes:type_name -> product.service.sc.GetCommercialCategoriesTreeResponse.Node
	92,  // 40: product.service.sc.GetCommercialCategoriesByTypeIDsResponse.CategoriesEntry.value:type_name -> product.service.sc.GetCommercialCategoriesByTypeIDsResponse.CommercialCategory
	66,  // 41: product.service.sc.GetSellerCategoryTreeResponse.ResultEntry.value:type_name -> product.service.sc.Node
	66,  // 42: product.service.sc.Node.NodesEntry.value:type_name -> product.service.sc.Node
	101, // 43: product.service.sc.GetSellerCategoryLevelsByCategoryIDsResponse.CategoryLevelsGroup.category_levels:type_name -> product.service.sc.GetSellerCategoryLevelsByCategoryIDsResponse.CategoryLevel
	102, // 44: product.service.sc.GetSellerCategoryLevelsByCategoryIDsResponse.CategoryLevelsGroupedByCategoryIdEntry.value:type_name -> product.service.sc.GetSellerCategoryLevelsByCategoryIDsResponse.CategoryLevelsGroup
	52,  // 45: product.service.sc.SellerCenterAPI.GetAttributesNamesMap:input_type -> product.service.sc.GetAttributesNamesMapRequest
	67,  // 46: product.service.sc.SellerCenterAPI.GetCategoryAttributesWithDictionaryValue:input_type -> product.service.sc.GetCategoryAttributesRequest
	12,  // 47: product.service.sc.SellerCenterAPI.GetCategoriesAttributesWithHierarchy:input_type -> product.service.sc.GetCategoriesAttributesWithHierarchyRequest
	58,  // 48: product.service.sc.SellerCenterAPI.CheckCategoryFinal:input_type -> product.service.sc.CheckCategoryFinalRequest
	46,  // 49: product.service.sc.SellerCenterAPI.GetCategoryBranchByID:input_type -> product.service.sc.GetCategoryBranchByIDRequest
	37,  // 50: product.service.sc.SellerCenterAPI.GetDescriptionCategoryDeep:input_type -> product.service.sc.GetDescriptionCategoryDeepRequest
	31,  // 51: product.service.sc.SellerCenterAPI.GetFinalUnmappedDescriptionCategories:input_type -> product.service.sc.GetFinalUnmappedDescriptionCategoriesRequest
	21,  // 52: product.service.sc.SellerCenterAPI.GetCategoriesByIDs:input_type -> product.service.sc.GetCategoriesByIDsRequest
	17,  // 53: product.service.sc.SellerCenterAPI.GetCategoryTypeMapByCategoryIDs:input_type -> product.service.sc.GetCategoryTypeMapByCategoryIDsRequest
	19,  // 54: product.service.sc.SellerCenterAPI.GetCategoryTypeMapByCategoryTypeIDs:input_type -> product.service.sc.GetCategoryTypeMapByCategoryTypeIDsRequest
	76,  // 55: product.service.sc.SellerCenterAPI.GetCategoryByTypeIDs:input_type -> product.service.sc.GetCategoryByTypeIDsRequest
	50,  // 56: product.service.sc.SellerCenterAPI.GetCommercialCategoriesByIDs:input_type -> product.service.sc.GetCommercialCategoriesByIDsRequest
	48,  // 57: product.service.sc.SellerCenterAPI.GetCommercialCategoriesByTypeIDs:input_type -> product.service.sc.GetCommercialCategoriesByTypeIDsRequest
	25,  // 58: product.service.sc.SellerCenterAPI.GetCommercialCategoriesMap:input_type -> product.service.sc.GetCommercialCategoriesMapRequest
	35,  // 59: product.service.sc.SellerCenterAPI.GetMappedCommercialCategoriesByDescriptionIDs:input_type -> product.service.sc.GetMappedCommercialCategoriesByDescriptionIDsRequest
	23,  // 60: product.service.sc.SellerCenterAPI.SearchCommercialCategoriesByName:input_type -> product.service.sc.SearchCommercialCategoriesByNameRequest
	7,   // 61: product.service.sc.SellerCenterAPI.GetCommercialCategoriesTree:input_type -> product.service.sc.GetCommercialCategoriesTreeRequest
	0,   // 62: product.service.sc.SellerCenterAPI.GetCommercialCategoriesByMetazonIDs:input_type -> product.service.sc.GetCommercialCategoriesByMetazonIDsRequest
	2,   // 63: product.service.sc.SellerCenterAPI.GetDictionaryByIDs:input_type -> product.service.sc.GetDictionaryByIDsRequest
	39,  // 64: product.service.sc.SellerCenterAPI.GetDictionaryValuesByDictionaryExternalIDs:input_type -> product.service.sc.GetDictionaryValuesByDictionaryExternalIDsRequest
	42,  // 65: product.service.sc.SellerCenterAPI.GetDictionaryValuesByDictionaryKeyAndRsIDList:input_type -> product.service.sc.GetDictionaryValuesByDictionaryKeyAndRsIDListRequest
	5,   // 66: product.service.sc.SellerCenterAPI.GetDictionaryValuesByAttributeIDAndRsIDList:input_type -> product.service.sc.GetDictionaryValuesByAttributeIDAndRsIDListRequest
	62,  // 67: product.service.sc.SellerCenterAPI.GetDictionaryValuesByDescCategoryAttribute:input_type -> product.service.sc.GetDictionaryValuesByDescCategoryAttributeRequest
	44,  // 68: product.service.sc.SellerCenterAPI.GetDictionaryValuesByIDs:input_type -> product.service.sc.GetDictionaryValuesByIDsRequest
	14,  // 69: product.service.sc.SellerCenterAPI.GetDictionaryValueBatch:input_type -> product.service.sc.GetDictionaryValueBatchRequest
	70,  // 70: product.service.sc.SellerCenterAPI.GetDictionaryBrands:input_type -> product.service.sc.GetDictionaryBrandsRequest
	74,  // 71: product.service.sc.SellerCenterAPI.SearchBrandByName:input_type -> product.service.sc.SearchBrandByNameRequest
	54,  // 72: product.service.sc.SellerCenterAPI.ToDescriptionCategory:input_type -> product.service.sc.ToDescriptionCategoryRequest
	60,  // 73: product.service.sc.SellerCenterAPI.CheckSellerDescriptionCategoryExists:input_type -> product.service.sc.CheckSellerDescriptionCategoryExistsRequest
	64,  // 74: product.service.sc.SellerCenterAPI.GetSellerCategoryTree:input_type -> product.service.sc.GetSellerCategoryTreeRequest
	56,  // 75: product.service.sc.SellerCenterAPI.GetSellerDescriptionCategoriesByIDs:input_type -> product.service.sc.GetSellerDescriptionCategoriesByIDsRequest
	33,  // 76: product.service.sc.SellerCenterAPI.GetSellerDescriptionCategoriesFinalByDescriptionID:input_type -> product.service.sc.GetSellerDescriptionCategoriesFinalByDescriptionIDRequest
	29,  // 77: product.service.sc.SellerCenterAPI.GetSellerDescriptionCategoryBranchByID:input_type -> product.service.sc.GetSellerDescriptionCategoryBranchByIDRequest
	72,  // 78: product.service.sc.SellerCenterAPI.GetSellerCategoryLevelsByCategoryIDs:input_type -> product.service.sc.GetSellerCategoryLevelsByCategoryIDsRequest
	53,  // 79: product.service.sc.SellerCenterAPI.GetAttributesNamesMap:output_type -> product.service.sc.GetAttributesNamesMapResponse
	68,  // 80: product.service.sc.SellerCenterAPI.GetCategoryAttributesWithDictionaryValue:output_type -> product.service.sc.GetCategoryAttributesResponse
	13,  // 81: product.service.sc.SellerCenterAPI.GetCategoriesAttributesWithHierarchy:output_type -> product.service.sc.GetCategoriesAttributesWithHierarchyResponse
	59,  // 82: product.service.sc.SellerCenterAPI.CheckCategoryFinal:output_type -> product.service.sc.CheckCategoryFinalResponse
	47,  // 83: product.service.sc.SellerCenterAPI.GetCategoryBranchByID:output_type -> product.service.sc.GetCategoryBranchByIDResponse
	38,  // 84: product.service.sc.SellerCenterAPI.GetDescriptionCategoryDeep:output_type -> product.service.sc.GetDescriptionCategoryDeepResponse
	32,  // 85: product.service.sc.SellerCenterAPI.GetFinalUnmappedDescriptionCategories:output_type -> product.service.sc.GetFinalUnmappedDescriptionCategoriesResponse
	22,  // 86: product.service.sc.SellerCenterAPI.GetCategoriesByIDs:output_type -> product.service.sc.GetCategoriesByIDsResponse
	18,  // 87: product.service.sc.SellerCenterAPI.GetCategoryTypeMapByCategoryIDs:output_type -> product.service.sc.GetCategoryTypeMapByCategoryIDsResponse
	20,  // 88: product.service.sc.SellerCenterAPI.GetCategoryTypeMapByCategoryTypeIDs:output_type -> product.service.sc.GetCategoryTypeMapByCategoryTypeIDsResponse
	77,  // 89: product.service.sc.SellerCenterAPI.GetCategoryByTypeIDs:output_type -> product.service.sc.GetCategoryByTypeIDsResponse
	51,  // 90: product.service.sc.SellerCenterAPI.GetCommercialCategoriesByIDs:output_type -> product.service.sc.GetCommercialCategoriesByIDsResponse
	49,  // 91: product.service.sc.SellerCenterAPI.GetCommercialCategoriesByTypeIDs:output_type -> product.service.sc.GetCommercialCategoriesByTypeIDsResponse
	26,  // 92: product.service.sc.SellerCenterAPI.GetCommercialCategoriesMap:output_type -> product.service.sc.GetCommercialCategoriesMapResponse
	36,  // 93: product.service.sc.SellerCenterAPI.GetMappedCommercialCategoriesByDescriptionIDs:output_type -> product.service.sc.GetMappedCommercialCategoriesByDescriptionIDsResponse
	24,  // 94: product.service.sc.SellerCenterAPI.SearchCommercialCategoriesByName:output_type -> product.service.sc.SearchCommercialCategoriesByNameResponse
	8,   // 95: product.service.sc.SellerCenterAPI.GetCommercialCategoriesTree:output_type -> product.service.sc.GetCommercialCategoriesTreeResponse
	1,   // 96: product.service.sc.SellerCenterAPI.GetCommercialCategoriesByMetazonIDs:output_type -> product.service.sc.GetCommercialCategoriesByMetazonIDsResponse
	4,   // 97: product.service.sc.SellerCenterAPI.GetDictionaryByIDs:output_type -> product.service.sc.GetDictionaryByIDsResponse
	40,  // 98: product.service.sc.SellerCenterAPI.GetDictionaryValuesByDictionaryExternalIDs:output_type -> product.service.sc.GetDictionaryValuesByDictionaryExternalIDsResponse
	43,  // 99: product.service.sc.SellerCenterAPI.GetDictionaryValuesByDictionaryKeyAndRsIDList:output_type -> product.service.sc.GetDictionaryValuesByDictionaryKeyAndRsIDListResponse
	6,   // 100: product.service.sc.SellerCenterAPI.GetDictionaryValuesByAttributeIDAndRsIDList:output_type -> product.service.sc.GetDictionaryValuesByAttributeIDAndRsIDListResponse
	63,  // 101: product.service.sc.SellerCenterAPI.GetDictionaryValuesByDescCategoryAttribute:output_type -> product.service.sc.GetDictionaryValuesByDescCategoryAttributeResponse
	45,  // 102: product.service.sc.SellerCenterAPI.GetDictionaryValuesByIDs:output_type -> product.service.sc.GetDictionaryValuesByIDsResponse
	15,  // 103: product.service.sc.SellerCenterAPI.GetDictionaryValueBatch:output_type -> product.service.sc.GetDictionaryValueBatchResponse
	71,  // 104: product.service.sc.SellerCenterAPI.GetDictionaryBrands:output_type -> product.service.sc.GetDictionaryBrandsResponse
	75,  // 105: product.service.sc.SellerCenterAPI.SearchBrandByName:output_type -> product.service.sc.SearchBrandByNameResponse
	55,  // 106: product.service.sc.SellerCenterAPI.ToDescriptionCategory:output_type -> product.service.sc.ToDescriptionCategoryResponse
	61,  // 107: product.service.sc.SellerCenterAPI.CheckSellerDescriptionCategoryExists:output_type -> product.service.sc.CheckSellerDescriptionCategoryExistsResponse
	65,  // 108: product.service.sc.SellerCenterAPI.GetSellerCategoryTree:output_type -> product.service.sc.GetSellerCategoryTreeResponse
	57,  // 109: product.service.sc.SellerCenterAPI.GetSellerDescriptionCategoriesByIDs:output_type -> product.service.sc.GetSellerDescriptionCategoriesByIDsResponse
	34,  // 110: product.service.sc.SellerCenterAPI.GetSellerDescriptionCategoriesFinalByDescriptionID:output_type -> product.service.sc.GetSellerDescriptionCategoriesFinalByDescriptionIDResponse
	30,  // 111: product.service.sc.SellerCenterAPI.GetSellerDescriptionCategoryBranchByID:output_type -> product.service.sc.GetSellerDescriptionCategoryBranchByIDResponse
	73,  // 112: product.service.sc.SellerCenterAPI.GetSellerCategoryLevelsByCategoryIDs:output_type -> product.service.sc.GetSellerCategoryLevelsByCategoryIDsResponse
	79,  // [79:113] is the sub-list for method output_type
	45,  // [45:79] is the sub-list for method input_type
	45,  // [45:45] is the sub-list for extension type_name
	45,  // [45:45] is the sub-list for extension extendee
	0,   // [0:45] is the sub-list for field type_name
}

func init() { file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_init() }
func file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_init() {
	if File_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommercialCategoriesByMetazonIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommercialCategoriesByMetazonIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryByIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dictionary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryByIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByAttributeIDAndRsIDListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByAttributeIDAndRsIDListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommercialCategoriesTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommercialCategoriesTreeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryAttributeFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryAttributeModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoriesAttributesWithHierarchyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoriesAttributesWithHierarchyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValueBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValueBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryTypeMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryTypeMapByCategoryIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryTypeMapByCategoryIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryTypeMapByCategoryTypeIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryTypeMapByCategoryTypeIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoriesByIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoriesByIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCommercialCategoriesByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCommercialCategoriesByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommercialCategoriesMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommercialCategoriesMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellerDescriptionCategoryBranchByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellerDescriptionCategoryBranchByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinalUnmappedDescriptionCategoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinalUnmappedDescriptionCategoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellerDescriptionCategoriesFinalByDescriptionIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellerDescriptionCategoriesFinalByDescriptionIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMappedCommercialCategoriesByDescriptionIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMappedCommercialCategoriesByDescriptionIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDescriptionCategoryDeepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDescriptionCategoryDeepResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByDictionaryExternalIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByDictionaryExternalIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByDictionaryKeyAndRsIDListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByDictionaryKeyAndRsIDListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryBranchByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryBranchByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommercialCategoriesByTypeIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommercialCategoriesByTypeIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommercialCategoriesByIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommercialCategoriesByIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttributesNamesMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttributesNamesMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToDescriptionCategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToDescriptionCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellerDescriptionCategoriesByIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellerDescriptionCategoriesByIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCategoryFinalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCategoryFinalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSellerDescriptionCategoryExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSellerDescriptionCategoryExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByDescCategoryAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByDescCategoryAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellerCategoryTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellerCategoryTreeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DictionaryValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryBrandsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryBrandsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellerCategoryLevelsByCategoryIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellerCategoryLevelsByCategoryIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBrandByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBrandByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryByTypeIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryByTypeIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommercialCategoriesByMetazonIDsResponse_CommercialCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByAttributeIDAndRsIDListRequest_AttributeIDAndRsID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByAttributeIDAndRsIDListResponse_DictionaryValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommercialCategoriesTreeResponse_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValueBatchResponse_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCommercialCategoriesByNameResponse_CommercialCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMappedCommercialCategoriesByDescriptionIDsResponse_CommercialCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByDictionaryExternalIDsResponse_DictionaryValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByDictionaryKeyAndRsIDListRequest_DictionaryKeyAndRsID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByDictionaryKeyAndRsIDListResponse_DictionaryValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByIDsResponse_DictionaryValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommercialCategoriesByTypeIDsResponse_CommercialCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommercialCategoriesByIDsResponse_CommercialCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttributesNamesMapResponse_Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryValuesByDescCategoryAttributeResponse_DictionaryValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryBrandsResponse_Brand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellerCategoryLevelsByCategoryIDsResponse_CategoryLevelsGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBrandByNameResponse_BrandValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   106,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_goTypes,
		DependencyIndexes: file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_depIdxs,
		MessageInfos:      file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_msgTypes,
	}.Build()
	File_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto = out.File
	file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_rawDesc = nil
	file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_goTypes = nil
	file_gitlab_dg_ru_product_service_go_product_service_meta_api_sc_messages_proto_depIdxs = nil
}
