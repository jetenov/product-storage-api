// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SellerCenterAPIClient is the client API for SellerCenterAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SellerCenterAPIClient interface {
	//GetAttributesNamesMap
	GetAttributesNamesMap(ctx context.Context, in *GetAttributesNamesMapRequest, opts ...grpc.CallOption) (*GetAttributesNamesMapResponse, error)
	//GetCategoryAttributesWithDictionaryValue
	GetCategoryAttributesWithDictionaryValue(ctx context.Context, in *GetCategoryAttributesRequest, opts ...grpc.CallOption) (*GetCategoryAttributesResponse, error)
	//GetCategoriesAttributesWithHierarchy
	GetCategoriesAttributesWithHierarchy(ctx context.Context, in *GetCategoriesAttributesWithHierarchyRequest, opts ...grpc.CallOption) (*GetCategoriesAttributesWithHierarchyResponse, error)
	//CheckCategoryFinal
	CheckCategoryFinal(ctx context.Context, in *CheckCategoryFinalRequest, opts ...grpc.CallOption) (*CheckCategoryFinalResponse, error)
	//GetCategoryBranchByID
	GetCategoryBranchByID(ctx context.Context, in *GetCategoryBranchByIDRequest, opts ...grpc.CallOption) (*GetCategoryBranchByIDResponse, error)
	//GetDescriptionCategoryDeep
	GetDescriptionCategoryDeep(ctx context.Context, in *GetDescriptionCategoryDeepRequest, opts ...grpc.CallOption) (*GetDescriptionCategoryDeepResponse, error)
	//GetFinalUnmappedDescriptionCategories
	GetFinalUnmappedDescriptionCategories(ctx context.Context, in *GetFinalUnmappedDescriptionCategoriesRequest, opts ...grpc.CallOption) (*GetFinalUnmappedDescriptionCategoriesResponse, error)
	//GetCategoriesByIDs
	GetCategoriesByIDs(ctx context.Context, in *GetCategoriesByIDsRequest, opts ...grpc.CallOption) (*GetCategoriesByIDsResponse, error)
	// Deprecated: Do not use.
	//GetCategoryTypeMapByCategoryIDs
	GetCategoryTypeMapByCategoryIDs(ctx context.Context, in *GetCategoryTypeMapByCategoryIDsRequest, opts ...grpc.CallOption) (*GetCategoryTypeMapByCategoryIDsResponse, error)
	// Deprecated: Do not use.
	//GetCategoryTypeMapByCategoryTypeIDs
	GetCategoryTypeMapByCategoryTypeIDs(ctx context.Context, in *GetCategoryTypeMapByCategoryTypeIDsRequest, opts ...grpc.CallOption) (*GetCategoryTypeMapByCategoryTypeIDsResponse, error)
	//GetCategoryByTypeIDs
	GetCategoryByTypeIDs(ctx context.Context, in *GetCategoryByTypeIDsRequest, opts ...grpc.CallOption) (*GetCategoryByTypeIDsResponse, error)
	//GetCommercialCategoriesByIDs
	GetCommercialCategoriesByIDs(ctx context.Context, in *GetCommercialCategoriesByIDsRequest, opts ...grpc.CallOption) (*GetCommercialCategoriesByIDsResponse, error)
	//GetCommercialCategoriesByTypeIDs
	GetCommercialCategoriesByTypeIDs(ctx context.Context, in *GetCommercialCategoriesByTypeIDsRequest, opts ...grpc.CallOption) (*GetCommercialCategoriesByTypeIDsResponse, error)
	//GetCommercialCategoriesMap
	GetCommercialCategoriesMap(ctx context.Context, in *GetCommercialCategoriesMapRequest, opts ...grpc.CallOption) (*GetCommercialCategoriesMapResponse, error)
	//GetMappedCommercialCategoriesByDescriptionIDs
	GetMappedCommercialCategoriesByDescriptionIDs(ctx context.Context, in *GetMappedCommercialCategoriesByDescriptionIDsRequest, opts ...grpc.CallOption) (*GetMappedCommercialCategoriesByDescriptionIDsResponse, error)
	//SearchCommercialCategoriesByName
	SearchCommercialCategoriesByName(ctx context.Context, in *SearchCommercialCategoriesByNameRequest, opts ...grpc.CallOption) (*SearchCommercialCategoriesByNameResponse, error)
	//GetCommercialCategoriesTree
	GetCommercialCategoriesTree(ctx context.Context, in *GetCommercialCategoriesTreeRequest, opts ...grpc.CallOption) (*GetCommercialCategoriesTreeResponse, error)
	//GetCommercialCategoriesByMetazonIDs
	GetCommercialCategoriesByMetazonIDs(ctx context.Context, in *GetCommercialCategoriesByMetazonIDsRequest, opts ...grpc.CallOption) (*GetCommercialCategoriesByMetazonIDsResponse, error)
	//GetDictionaryByIDs
	GetDictionaryByIDs(ctx context.Context, in *GetDictionaryByIDsRequest, opts ...grpc.CallOption) (*GetDictionaryByIDsResponse, error)
	//GetDictionaryValuesByDictionaryExternalIDs
	GetDictionaryValuesByDictionaryExternalIDs(ctx context.Context, in *GetDictionaryValuesByDictionaryExternalIDsRequest, opts ...grpc.CallOption) (*GetDictionaryValuesByDictionaryExternalIDsResponse, error)
	//GetDictionaryValuesByDictionaryKeyAndRsIDList
	GetDictionaryValuesByDictionaryKeyAndRsIDList(ctx context.Context, in *GetDictionaryValuesByDictionaryKeyAndRsIDListRequest, opts ...grpc.CallOption) (*GetDictionaryValuesByDictionaryKeyAndRsIDListResponse, error)
	//GetDictionaryValuesByAttributeIDAndRsIDList
	GetDictionaryValuesByAttributeIDAndRsIDList(ctx context.Context, in *GetDictionaryValuesByAttributeIDAndRsIDListRequest, opts ...grpc.CallOption) (*GetDictionaryValuesByAttributeIDAndRsIDListResponse, error)
	//GetDictionaryValuesByDescCategoryAttribute
	GetDictionaryValuesByDescCategoryAttribute(ctx context.Context, in *GetDictionaryValuesByDescCategoryAttributeRequest, opts ...grpc.CallOption) (*GetDictionaryValuesByDescCategoryAttributeResponse, error)
	//GetDictionaryValuesByIDs
	GetDictionaryValuesByIDs(ctx context.Context, in *GetDictionaryValuesByIDsRequest, opts ...grpc.CallOption) (*GetDictionaryValuesByIDsResponse, error)
	//GetDictionaryValueBatch
	GetDictionaryValueBatch(ctx context.Context, in *GetDictionaryValueBatchRequest, opts ...grpc.CallOption) (*GetDictionaryValueBatchResponse, error)
	//GetDictionaryBrands
	GetDictionaryBrands(ctx context.Context, in *GetDictionaryBrandsRequest, opts ...grpc.CallOption) (*GetDictionaryBrandsResponse, error)
	//SearchBrandByName
	SearchBrandByName(ctx context.Context, in *SearchBrandByNameRequest, opts ...grpc.CallOption) (*SearchBrandByNameResponse, error)
	//ToDescriptionCategory
	ToDescriptionCategory(ctx context.Context, in *ToDescriptionCategoryRequest, opts ...grpc.CallOption) (*ToDescriptionCategoryResponse, error)
	//CheckSellerDescriptionCategoryExists
	CheckSellerDescriptionCategoryExists(ctx context.Context, in *CheckSellerDescriptionCategoryExistsRequest, opts ...grpc.CallOption) (*CheckSellerDescriptionCategoryExistsResponse, error)
	//GetSellerCategoryTree
	GetSellerCategoryTree(ctx context.Context, in *GetSellerCategoryTreeRequest, opts ...grpc.CallOption) (*GetSellerCategoryTreeResponse, error)
	//GetSellerDescriptionCategoriesByIDs
	GetSellerDescriptionCategoriesByIDs(ctx context.Context, in *GetSellerDescriptionCategoriesByIDsRequest, opts ...grpc.CallOption) (*GetSellerDescriptionCategoriesByIDsResponse, error)
	//GetSellerDescriptionCategoriesFinalByDescriptionID
	GetSellerDescriptionCategoriesFinalByDescriptionID(ctx context.Context, in *GetSellerDescriptionCategoriesFinalByDescriptionIDRequest, opts ...grpc.CallOption) (*GetSellerDescriptionCategoriesFinalByDescriptionIDResponse, error)
	//GetSellerDescriptionCategoryBranchByID
	GetSellerDescriptionCategoryBranchByID(ctx context.Context, in *GetSellerDescriptionCategoryBranchByIDRequest, opts ...grpc.CallOption) (*GetSellerDescriptionCategoryBranchByIDResponse, error)
	//GetSellerCategoryLevelsByCategoryIDs
	GetSellerCategoryLevelsByCategoryIDs(ctx context.Context, in *GetSellerCategoryLevelsByCategoryIDsRequest, opts ...grpc.CallOption) (*GetSellerCategoryLevelsByCategoryIDsResponse, error)
}

type sellerCenterAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSellerCenterAPIClient(cc grpc.ClientConnInterface) SellerCenterAPIClient {
	return &sellerCenterAPIClient{cc}
}

func (c *sellerCenterAPIClient) GetAttributesNamesMap(ctx context.Context, in *GetAttributesNamesMapRequest, opts ...grpc.CallOption) (*GetAttributesNamesMapResponse, error) {
	out := new(GetAttributesNamesMapResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetAttributesNamesMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetCategoryAttributesWithDictionaryValue(ctx context.Context, in *GetCategoryAttributesRequest, opts ...grpc.CallOption) (*GetCategoryAttributesResponse, error) {
	out := new(GetCategoryAttributesResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetCategoryAttributesWithDictionaryValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetCategoriesAttributesWithHierarchy(ctx context.Context, in *GetCategoriesAttributesWithHierarchyRequest, opts ...grpc.CallOption) (*GetCategoriesAttributesWithHierarchyResponse, error) {
	out := new(GetCategoriesAttributesWithHierarchyResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetCategoriesAttributesWithHierarchy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) CheckCategoryFinal(ctx context.Context, in *CheckCategoryFinalRequest, opts ...grpc.CallOption) (*CheckCategoryFinalResponse, error) {
	out := new(CheckCategoryFinalResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/CheckCategoryFinal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetCategoryBranchByID(ctx context.Context, in *GetCategoryBranchByIDRequest, opts ...grpc.CallOption) (*GetCategoryBranchByIDResponse, error) {
	out := new(GetCategoryBranchByIDResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetCategoryBranchByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetDescriptionCategoryDeep(ctx context.Context, in *GetDescriptionCategoryDeepRequest, opts ...grpc.CallOption) (*GetDescriptionCategoryDeepResponse, error) {
	out := new(GetDescriptionCategoryDeepResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetDescriptionCategoryDeep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetFinalUnmappedDescriptionCategories(ctx context.Context, in *GetFinalUnmappedDescriptionCategoriesRequest, opts ...grpc.CallOption) (*GetFinalUnmappedDescriptionCategoriesResponse, error) {
	out := new(GetFinalUnmappedDescriptionCategoriesResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetFinalUnmappedDescriptionCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetCategoriesByIDs(ctx context.Context, in *GetCategoriesByIDsRequest, opts ...grpc.CallOption) (*GetCategoriesByIDsResponse, error) {
	out := new(GetCategoriesByIDsResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetCategoriesByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *sellerCenterAPIClient) GetCategoryTypeMapByCategoryIDs(ctx context.Context, in *GetCategoryTypeMapByCategoryIDsRequest, opts ...grpc.CallOption) (*GetCategoryTypeMapByCategoryIDsResponse, error) {
	out := new(GetCategoryTypeMapByCategoryIDsResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetCategoryTypeMapByCategoryIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *sellerCenterAPIClient) GetCategoryTypeMapByCategoryTypeIDs(ctx context.Context, in *GetCategoryTypeMapByCategoryTypeIDsRequest, opts ...grpc.CallOption) (*GetCategoryTypeMapByCategoryTypeIDsResponse, error) {
	out := new(GetCategoryTypeMapByCategoryTypeIDsResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetCategoryTypeMapByCategoryTypeIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetCategoryByTypeIDs(ctx context.Context, in *GetCategoryByTypeIDsRequest, opts ...grpc.CallOption) (*GetCategoryByTypeIDsResponse, error) {
	out := new(GetCategoryByTypeIDsResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetCategoryByTypeIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetCommercialCategoriesByIDs(ctx context.Context, in *GetCommercialCategoriesByIDsRequest, opts ...grpc.CallOption) (*GetCommercialCategoriesByIDsResponse, error) {
	out := new(GetCommercialCategoriesByIDsResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetCommercialCategoriesByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetCommercialCategoriesByTypeIDs(ctx context.Context, in *GetCommercialCategoriesByTypeIDsRequest, opts ...grpc.CallOption) (*GetCommercialCategoriesByTypeIDsResponse, error) {
	out := new(GetCommercialCategoriesByTypeIDsResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetCommercialCategoriesByTypeIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetCommercialCategoriesMap(ctx context.Context, in *GetCommercialCategoriesMapRequest, opts ...grpc.CallOption) (*GetCommercialCategoriesMapResponse, error) {
	out := new(GetCommercialCategoriesMapResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetCommercialCategoriesMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetMappedCommercialCategoriesByDescriptionIDs(ctx context.Context, in *GetMappedCommercialCategoriesByDescriptionIDsRequest, opts ...grpc.CallOption) (*GetMappedCommercialCategoriesByDescriptionIDsResponse, error) {
	out := new(GetMappedCommercialCategoriesByDescriptionIDsResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetMappedCommercialCategoriesByDescriptionIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) SearchCommercialCategoriesByName(ctx context.Context, in *SearchCommercialCategoriesByNameRequest, opts ...grpc.CallOption) (*SearchCommercialCategoriesByNameResponse, error) {
	out := new(SearchCommercialCategoriesByNameResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/SearchCommercialCategoriesByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetCommercialCategoriesTree(ctx context.Context, in *GetCommercialCategoriesTreeRequest, opts ...grpc.CallOption) (*GetCommercialCategoriesTreeResponse, error) {
	out := new(GetCommercialCategoriesTreeResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetCommercialCategoriesTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetCommercialCategoriesByMetazonIDs(ctx context.Context, in *GetCommercialCategoriesByMetazonIDsRequest, opts ...grpc.CallOption) (*GetCommercialCategoriesByMetazonIDsResponse, error) {
	out := new(GetCommercialCategoriesByMetazonIDsResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetCommercialCategoriesByMetazonIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetDictionaryByIDs(ctx context.Context, in *GetDictionaryByIDsRequest, opts ...grpc.CallOption) (*GetDictionaryByIDsResponse, error) {
	out := new(GetDictionaryByIDsResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetDictionaryByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetDictionaryValuesByDictionaryExternalIDs(ctx context.Context, in *GetDictionaryValuesByDictionaryExternalIDsRequest, opts ...grpc.CallOption) (*GetDictionaryValuesByDictionaryExternalIDsResponse, error) {
	out := new(GetDictionaryValuesByDictionaryExternalIDsResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetDictionaryValuesByDictionaryExternalIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetDictionaryValuesByDictionaryKeyAndRsIDList(ctx context.Context, in *GetDictionaryValuesByDictionaryKeyAndRsIDListRequest, opts ...grpc.CallOption) (*GetDictionaryValuesByDictionaryKeyAndRsIDListResponse, error) {
	out := new(GetDictionaryValuesByDictionaryKeyAndRsIDListResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetDictionaryValuesByDictionaryKeyAndRsIDList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetDictionaryValuesByAttributeIDAndRsIDList(ctx context.Context, in *GetDictionaryValuesByAttributeIDAndRsIDListRequest, opts ...grpc.CallOption) (*GetDictionaryValuesByAttributeIDAndRsIDListResponse, error) {
	out := new(GetDictionaryValuesByAttributeIDAndRsIDListResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetDictionaryValuesByAttributeIDAndRsIDList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetDictionaryValuesByDescCategoryAttribute(ctx context.Context, in *GetDictionaryValuesByDescCategoryAttributeRequest, opts ...grpc.CallOption) (*GetDictionaryValuesByDescCategoryAttributeResponse, error) {
	out := new(GetDictionaryValuesByDescCategoryAttributeResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetDictionaryValuesByDescCategoryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetDictionaryValuesByIDs(ctx context.Context, in *GetDictionaryValuesByIDsRequest, opts ...grpc.CallOption) (*GetDictionaryValuesByIDsResponse, error) {
	out := new(GetDictionaryValuesByIDsResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetDictionaryValuesByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetDictionaryValueBatch(ctx context.Context, in *GetDictionaryValueBatchRequest, opts ...grpc.CallOption) (*GetDictionaryValueBatchResponse, error) {
	out := new(GetDictionaryValueBatchResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetDictionaryValueBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetDictionaryBrands(ctx context.Context, in *GetDictionaryBrandsRequest, opts ...grpc.CallOption) (*GetDictionaryBrandsResponse, error) {
	out := new(GetDictionaryBrandsResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetDictionaryBrands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) SearchBrandByName(ctx context.Context, in *SearchBrandByNameRequest, opts ...grpc.CallOption) (*SearchBrandByNameResponse, error) {
	out := new(SearchBrandByNameResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/SearchBrandByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) ToDescriptionCategory(ctx context.Context, in *ToDescriptionCategoryRequest, opts ...grpc.CallOption) (*ToDescriptionCategoryResponse, error) {
	out := new(ToDescriptionCategoryResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/ToDescriptionCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) CheckSellerDescriptionCategoryExists(ctx context.Context, in *CheckSellerDescriptionCategoryExistsRequest, opts ...grpc.CallOption) (*CheckSellerDescriptionCategoryExistsResponse, error) {
	out := new(CheckSellerDescriptionCategoryExistsResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/CheckSellerDescriptionCategoryExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetSellerCategoryTree(ctx context.Context, in *GetSellerCategoryTreeRequest, opts ...grpc.CallOption) (*GetSellerCategoryTreeResponse, error) {
	out := new(GetSellerCategoryTreeResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetSellerCategoryTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetSellerDescriptionCategoriesByIDs(ctx context.Context, in *GetSellerDescriptionCategoriesByIDsRequest, opts ...grpc.CallOption) (*GetSellerDescriptionCategoriesByIDsResponse, error) {
	out := new(GetSellerDescriptionCategoriesByIDsResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetSellerDescriptionCategoriesByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetSellerDescriptionCategoriesFinalByDescriptionID(ctx context.Context, in *GetSellerDescriptionCategoriesFinalByDescriptionIDRequest, opts ...grpc.CallOption) (*GetSellerDescriptionCategoriesFinalByDescriptionIDResponse, error) {
	out := new(GetSellerDescriptionCategoriesFinalByDescriptionIDResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetSellerDescriptionCategoriesFinalByDescriptionID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetSellerDescriptionCategoryBranchByID(ctx context.Context, in *GetSellerDescriptionCategoryBranchByIDRequest, opts ...grpc.CallOption) (*GetSellerDescriptionCategoryBranchByIDResponse, error) {
	out := new(GetSellerDescriptionCategoryBranchByIDResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetSellerDescriptionCategoryBranchByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerCenterAPIClient) GetSellerCategoryLevelsByCategoryIDs(ctx context.Context, in *GetSellerCategoryLevelsByCategoryIDsRequest, opts ...grpc.CallOption) (*GetSellerCategoryLevelsByCategoryIDsResponse, error) {
	out := new(GetSellerCategoryLevelsByCategoryIDsResponse)
	err := c.cc.Invoke(ctx, "/product.service.sc.SellerCenterAPI/GetSellerCategoryLevelsByCategoryIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SellerCenterAPIServer is the server API for SellerCenterAPI service.
// All implementations must embed UnimplementedSellerCenterAPIServer
// for forward compatibility
type SellerCenterAPIServer interface {
	//GetAttributesNamesMap
	GetAttributesNamesMap(context.Context, *GetAttributesNamesMapRequest) (*GetAttributesNamesMapResponse, error)
	//GetCategoryAttributesWithDictionaryValue
	GetCategoryAttributesWithDictionaryValue(context.Context, *GetCategoryAttributesRequest) (*GetCategoryAttributesResponse, error)
	//GetCategoriesAttributesWithHierarchy
	GetCategoriesAttributesWithHierarchy(context.Context, *GetCategoriesAttributesWithHierarchyRequest) (*GetCategoriesAttributesWithHierarchyResponse, error)
	//CheckCategoryFinal
	CheckCategoryFinal(context.Context, *CheckCategoryFinalRequest) (*CheckCategoryFinalResponse, error)
	//GetCategoryBranchByID
	GetCategoryBranchByID(context.Context, *GetCategoryBranchByIDRequest) (*GetCategoryBranchByIDResponse, error)
	//GetDescriptionCategoryDeep
	GetDescriptionCategoryDeep(context.Context, *GetDescriptionCategoryDeepRequest) (*GetDescriptionCategoryDeepResponse, error)
	//GetFinalUnmappedDescriptionCategories
	GetFinalUnmappedDescriptionCategories(context.Context, *GetFinalUnmappedDescriptionCategoriesRequest) (*GetFinalUnmappedDescriptionCategoriesResponse, error)
	//GetCategoriesByIDs
	GetCategoriesByIDs(context.Context, *GetCategoriesByIDsRequest) (*GetCategoriesByIDsResponse, error)
	// Deprecated: Do not use.
	//GetCategoryTypeMapByCategoryIDs
	GetCategoryTypeMapByCategoryIDs(context.Context, *GetCategoryTypeMapByCategoryIDsRequest) (*GetCategoryTypeMapByCategoryIDsResponse, error)
	// Deprecated: Do not use.
	//GetCategoryTypeMapByCategoryTypeIDs
	GetCategoryTypeMapByCategoryTypeIDs(context.Context, *GetCategoryTypeMapByCategoryTypeIDsRequest) (*GetCategoryTypeMapByCategoryTypeIDsResponse, error)
	//GetCategoryByTypeIDs
	GetCategoryByTypeIDs(context.Context, *GetCategoryByTypeIDsRequest) (*GetCategoryByTypeIDsResponse, error)
	//GetCommercialCategoriesByIDs
	GetCommercialCategoriesByIDs(context.Context, *GetCommercialCategoriesByIDsRequest) (*GetCommercialCategoriesByIDsResponse, error)
	//GetCommercialCategoriesByTypeIDs
	GetCommercialCategoriesByTypeIDs(context.Context, *GetCommercialCategoriesByTypeIDsRequest) (*GetCommercialCategoriesByTypeIDsResponse, error)
	//GetCommercialCategoriesMap
	GetCommercialCategoriesMap(context.Context, *GetCommercialCategoriesMapRequest) (*GetCommercialCategoriesMapResponse, error)
	//GetMappedCommercialCategoriesByDescriptionIDs
	GetMappedCommercialCategoriesByDescriptionIDs(context.Context, *GetMappedCommercialCategoriesByDescriptionIDsRequest) (*GetMappedCommercialCategoriesByDescriptionIDsResponse, error)
	//SearchCommercialCategoriesByName
	SearchCommercialCategoriesByName(context.Context, *SearchCommercialCategoriesByNameRequest) (*SearchCommercialCategoriesByNameResponse, error)
	//GetCommercialCategoriesTree
	GetCommercialCategoriesTree(context.Context, *GetCommercialCategoriesTreeRequest) (*GetCommercialCategoriesTreeResponse, error)
	//GetCommercialCategoriesByMetazonIDs
	GetCommercialCategoriesByMetazonIDs(context.Context, *GetCommercialCategoriesByMetazonIDsRequest) (*GetCommercialCategoriesByMetazonIDsResponse, error)
	//GetDictionaryByIDs
	GetDictionaryByIDs(context.Context, *GetDictionaryByIDsRequest) (*GetDictionaryByIDsResponse, error)
	//GetDictionaryValuesByDictionaryExternalIDs
	GetDictionaryValuesByDictionaryExternalIDs(context.Context, *GetDictionaryValuesByDictionaryExternalIDsRequest) (*GetDictionaryValuesByDictionaryExternalIDsResponse, error)
	//GetDictionaryValuesByDictionaryKeyAndRsIDList
	GetDictionaryValuesByDictionaryKeyAndRsIDList(context.Context, *GetDictionaryValuesByDictionaryKeyAndRsIDListRequest) (*GetDictionaryValuesByDictionaryKeyAndRsIDListResponse, error)
	//GetDictionaryValuesByAttributeIDAndRsIDList
	GetDictionaryValuesByAttributeIDAndRsIDList(context.Context, *GetDictionaryValuesByAttributeIDAndRsIDListRequest) (*GetDictionaryValuesByAttributeIDAndRsIDListResponse, error)
	//GetDictionaryValuesByDescCategoryAttribute
	GetDictionaryValuesByDescCategoryAttribute(context.Context, *GetDictionaryValuesByDescCategoryAttributeRequest) (*GetDictionaryValuesByDescCategoryAttributeResponse, error)
	//GetDictionaryValuesByIDs
	GetDictionaryValuesByIDs(context.Context, *GetDictionaryValuesByIDsRequest) (*GetDictionaryValuesByIDsResponse, error)
	//GetDictionaryValueBatch
	GetDictionaryValueBatch(context.Context, *GetDictionaryValueBatchRequest) (*GetDictionaryValueBatchResponse, error)
	//GetDictionaryBrands
	GetDictionaryBrands(context.Context, *GetDictionaryBrandsRequest) (*GetDictionaryBrandsResponse, error)
	//SearchBrandByName
	SearchBrandByName(context.Context, *SearchBrandByNameRequest) (*SearchBrandByNameResponse, error)
	//ToDescriptionCategory
	ToDescriptionCategory(context.Context, *ToDescriptionCategoryRequest) (*ToDescriptionCategoryResponse, error)
	//CheckSellerDescriptionCategoryExists
	CheckSellerDescriptionCategoryExists(context.Context, *CheckSellerDescriptionCategoryExistsRequest) (*CheckSellerDescriptionCategoryExistsResponse, error)
	//GetSellerCategoryTree
	GetSellerCategoryTree(context.Context, *GetSellerCategoryTreeRequest) (*GetSellerCategoryTreeResponse, error)
	//GetSellerDescriptionCategoriesByIDs
	GetSellerDescriptionCategoriesByIDs(context.Context, *GetSellerDescriptionCategoriesByIDsRequest) (*GetSellerDescriptionCategoriesByIDsResponse, error)
	//GetSellerDescriptionCategoriesFinalByDescriptionID
	GetSellerDescriptionCategoriesFinalByDescriptionID(context.Context, *GetSellerDescriptionCategoriesFinalByDescriptionIDRequest) (*GetSellerDescriptionCategoriesFinalByDescriptionIDResponse, error)
	//GetSellerDescriptionCategoryBranchByID
	GetSellerDescriptionCategoryBranchByID(context.Context, *GetSellerDescriptionCategoryBranchByIDRequest) (*GetSellerDescriptionCategoryBranchByIDResponse, error)
	//GetSellerCategoryLevelsByCategoryIDs
	GetSellerCategoryLevelsByCategoryIDs(context.Context, *GetSellerCategoryLevelsByCategoryIDsRequest) (*GetSellerCategoryLevelsByCategoryIDsResponse, error)
	mustEmbedUnimplementedSellerCenterAPIServer()
}

// UnimplementedSellerCenterAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSellerCenterAPIServer struct {
}

func (UnimplementedSellerCenterAPIServer) GetAttributesNamesMap(context.Context, *GetAttributesNamesMapRequest) (*GetAttributesNamesMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttributesNamesMap not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetCategoryAttributesWithDictionaryValue(context.Context, *GetCategoryAttributesRequest) (*GetCategoryAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryAttributesWithDictionaryValue not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetCategoriesAttributesWithHierarchy(context.Context, *GetCategoriesAttributesWithHierarchyRequest) (*GetCategoriesAttributesWithHierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoriesAttributesWithHierarchy not implemented")
}
func (UnimplementedSellerCenterAPIServer) CheckCategoryFinal(context.Context, *CheckCategoryFinalRequest) (*CheckCategoryFinalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCategoryFinal not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetCategoryBranchByID(context.Context, *GetCategoryBranchByIDRequest) (*GetCategoryBranchByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryBranchByID not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetDescriptionCategoryDeep(context.Context, *GetDescriptionCategoryDeepRequest) (*GetDescriptionCategoryDeepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescriptionCategoryDeep not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetFinalUnmappedDescriptionCategories(context.Context, *GetFinalUnmappedDescriptionCategoriesRequest) (*GetFinalUnmappedDescriptionCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinalUnmappedDescriptionCategories not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetCategoriesByIDs(context.Context, *GetCategoriesByIDsRequest) (*GetCategoriesByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoriesByIDs not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetCategoryTypeMapByCategoryIDs(context.Context, *GetCategoryTypeMapByCategoryIDsRequest) (*GetCategoryTypeMapByCategoryIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryTypeMapByCategoryIDs not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetCategoryTypeMapByCategoryTypeIDs(context.Context, *GetCategoryTypeMapByCategoryTypeIDsRequest) (*GetCategoryTypeMapByCategoryTypeIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryTypeMapByCategoryTypeIDs not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetCategoryByTypeIDs(context.Context, *GetCategoryByTypeIDsRequest) (*GetCategoryByTypeIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryByTypeIDs not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetCommercialCategoriesByIDs(context.Context, *GetCommercialCategoriesByIDsRequest) (*GetCommercialCategoriesByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommercialCategoriesByIDs not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetCommercialCategoriesByTypeIDs(context.Context, *GetCommercialCategoriesByTypeIDsRequest) (*GetCommercialCategoriesByTypeIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommercialCategoriesByTypeIDs not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetCommercialCategoriesMap(context.Context, *GetCommercialCategoriesMapRequest) (*GetCommercialCategoriesMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommercialCategoriesMap not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetMappedCommercialCategoriesByDescriptionIDs(context.Context, *GetMappedCommercialCategoriesByDescriptionIDsRequest) (*GetMappedCommercialCategoriesByDescriptionIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMappedCommercialCategoriesByDescriptionIDs not implemented")
}
func (UnimplementedSellerCenterAPIServer) SearchCommercialCategoriesByName(context.Context, *SearchCommercialCategoriesByNameRequest) (*SearchCommercialCategoriesByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCommercialCategoriesByName not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetCommercialCategoriesTree(context.Context, *GetCommercialCategoriesTreeRequest) (*GetCommercialCategoriesTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommercialCategoriesTree not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetCommercialCategoriesByMetazonIDs(context.Context, *GetCommercialCategoriesByMetazonIDsRequest) (*GetCommercialCategoriesByMetazonIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommercialCategoriesByMetazonIDs not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetDictionaryByIDs(context.Context, *GetDictionaryByIDsRequest) (*GetDictionaryByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryByIDs not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetDictionaryValuesByDictionaryExternalIDs(context.Context, *GetDictionaryValuesByDictionaryExternalIDsRequest) (*GetDictionaryValuesByDictionaryExternalIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryValuesByDictionaryExternalIDs not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetDictionaryValuesByDictionaryKeyAndRsIDList(context.Context, *GetDictionaryValuesByDictionaryKeyAndRsIDListRequest) (*GetDictionaryValuesByDictionaryKeyAndRsIDListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryValuesByDictionaryKeyAndRsIDList not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetDictionaryValuesByAttributeIDAndRsIDList(context.Context, *GetDictionaryValuesByAttributeIDAndRsIDListRequest) (*GetDictionaryValuesByAttributeIDAndRsIDListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryValuesByAttributeIDAndRsIDList not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetDictionaryValuesByDescCategoryAttribute(context.Context, *GetDictionaryValuesByDescCategoryAttributeRequest) (*GetDictionaryValuesByDescCategoryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryValuesByDescCategoryAttribute not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetDictionaryValuesByIDs(context.Context, *GetDictionaryValuesByIDsRequest) (*GetDictionaryValuesByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryValuesByIDs not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetDictionaryValueBatch(context.Context, *GetDictionaryValueBatchRequest) (*GetDictionaryValueBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryValueBatch not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetDictionaryBrands(context.Context, *GetDictionaryBrandsRequest) (*GetDictionaryBrandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryBrands not implemented")
}
func (UnimplementedSellerCenterAPIServer) SearchBrandByName(context.Context, *SearchBrandByNameRequest) (*SearchBrandByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBrandByName not implemented")
}
func (UnimplementedSellerCenterAPIServer) ToDescriptionCategory(context.Context, *ToDescriptionCategoryRequest) (*ToDescriptionCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToDescriptionCategory not implemented")
}
func (UnimplementedSellerCenterAPIServer) CheckSellerDescriptionCategoryExists(context.Context, *CheckSellerDescriptionCategoryExistsRequest) (*CheckSellerDescriptionCategoryExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSellerDescriptionCategoryExists not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetSellerCategoryTree(context.Context, *GetSellerCategoryTreeRequest) (*GetSellerCategoryTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerCategoryTree not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetSellerDescriptionCategoriesByIDs(context.Context, *GetSellerDescriptionCategoriesByIDsRequest) (*GetSellerDescriptionCategoriesByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerDescriptionCategoriesByIDs not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetSellerDescriptionCategoriesFinalByDescriptionID(context.Context, *GetSellerDescriptionCategoriesFinalByDescriptionIDRequest) (*GetSellerDescriptionCategoriesFinalByDescriptionIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerDescriptionCategoriesFinalByDescriptionID not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetSellerDescriptionCategoryBranchByID(context.Context, *GetSellerDescriptionCategoryBranchByIDRequest) (*GetSellerDescriptionCategoryBranchByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerDescriptionCategoryBranchByID not implemented")
}
func (UnimplementedSellerCenterAPIServer) GetSellerCategoryLevelsByCategoryIDs(context.Context, *GetSellerCategoryLevelsByCategoryIDsRequest) (*GetSellerCategoryLevelsByCategoryIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerCategoryLevelsByCategoryIDs not implemented")
}
func (UnimplementedSellerCenterAPIServer) mustEmbedUnimplementedSellerCenterAPIServer() {}

// UnsafeSellerCenterAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SellerCenterAPIServer will
// result in compilation errors.
type UnsafeSellerCenterAPIServer interface {
	mustEmbedUnimplementedSellerCenterAPIServer()
}

func RegisterSellerCenterAPIServer(s grpc.ServiceRegistrar, srv SellerCenterAPIServer) {
	s.RegisterService(&SellerCenterAPI_ServiceDesc, srv)
}

func _SellerCenterAPI_GetAttributesNamesMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttributesNamesMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetAttributesNamesMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetAttributesNamesMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetAttributesNamesMap(ctx, req.(*GetAttributesNamesMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetCategoryAttributesWithDictionaryValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetCategoryAttributesWithDictionaryValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetCategoryAttributesWithDictionaryValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetCategoryAttributesWithDictionaryValue(ctx, req.(*GetCategoryAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetCategoriesAttributesWithHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesAttributesWithHierarchyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetCategoriesAttributesWithHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetCategoriesAttributesWithHierarchy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetCategoriesAttributesWithHierarchy(ctx, req.(*GetCategoriesAttributesWithHierarchyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_CheckCategoryFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCategoryFinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).CheckCategoryFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/CheckCategoryFinal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).CheckCategoryFinal(ctx, req.(*CheckCategoryFinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetCategoryBranchByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryBranchByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetCategoryBranchByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetCategoryBranchByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetCategoryBranchByID(ctx, req.(*GetCategoryBranchByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetDescriptionCategoryDeep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDescriptionCategoryDeepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetDescriptionCategoryDeep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetDescriptionCategoryDeep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetDescriptionCategoryDeep(ctx, req.(*GetDescriptionCategoryDeepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetFinalUnmappedDescriptionCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinalUnmappedDescriptionCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetFinalUnmappedDescriptionCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetFinalUnmappedDescriptionCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetFinalUnmappedDescriptionCategories(ctx, req.(*GetFinalUnmappedDescriptionCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetCategoriesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetCategoriesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetCategoriesByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetCategoriesByIDs(ctx, req.(*GetCategoriesByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetCategoryTypeMapByCategoryIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryTypeMapByCategoryIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetCategoryTypeMapByCategoryIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetCategoryTypeMapByCategoryIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetCategoryTypeMapByCategoryIDs(ctx, req.(*GetCategoryTypeMapByCategoryIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetCategoryTypeMapByCategoryTypeIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryTypeMapByCategoryTypeIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetCategoryTypeMapByCategoryTypeIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetCategoryTypeMapByCategoryTypeIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetCategoryTypeMapByCategoryTypeIDs(ctx, req.(*GetCategoryTypeMapByCategoryTypeIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetCategoryByTypeIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByTypeIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetCategoryByTypeIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetCategoryByTypeIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetCategoryByTypeIDs(ctx, req.(*GetCategoryByTypeIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetCommercialCategoriesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommercialCategoriesByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetCommercialCategoriesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetCommercialCategoriesByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetCommercialCategoriesByIDs(ctx, req.(*GetCommercialCategoriesByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetCommercialCategoriesByTypeIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommercialCategoriesByTypeIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetCommercialCategoriesByTypeIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetCommercialCategoriesByTypeIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetCommercialCategoriesByTypeIDs(ctx, req.(*GetCommercialCategoriesByTypeIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetCommercialCategoriesMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommercialCategoriesMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetCommercialCategoriesMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetCommercialCategoriesMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetCommercialCategoriesMap(ctx, req.(*GetCommercialCategoriesMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetMappedCommercialCategoriesByDescriptionIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMappedCommercialCategoriesByDescriptionIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetMappedCommercialCategoriesByDescriptionIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetMappedCommercialCategoriesByDescriptionIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetMappedCommercialCategoriesByDescriptionIDs(ctx, req.(*GetMappedCommercialCategoriesByDescriptionIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_SearchCommercialCategoriesByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCommercialCategoriesByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).SearchCommercialCategoriesByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/SearchCommercialCategoriesByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).SearchCommercialCategoriesByName(ctx, req.(*SearchCommercialCategoriesByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetCommercialCategoriesTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommercialCategoriesTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetCommercialCategoriesTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetCommercialCategoriesTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetCommercialCategoriesTree(ctx, req.(*GetCommercialCategoriesTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetCommercialCategoriesByMetazonIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommercialCategoriesByMetazonIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetCommercialCategoriesByMetazonIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetCommercialCategoriesByMetazonIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetCommercialCategoriesByMetazonIDs(ctx, req.(*GetCommercialCategoriesByMetazonIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetDictionaryByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetDictionaryByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetDictionaryByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetDictionaryByIDs(ctx, req.(*GetDictionaryByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetDictionaryValuesByDictionaryExternalIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryValuesByDictionaryExternalIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetDictionaryValuesByDictionaryExternalIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetDictionaryValuesByDictionaryExternalIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetDictionaryValuesByDictionaryExternalIDs(ctx, req.(*GetDictionaryValuesByDictionaryExternalIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetDictionaryValuesByDictionaryKeyAndRsIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryValuesByDictionaryKeyAndRsIDListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetDictionaryValuesByDictionaryKeyAndRsIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetDictionaryValuesByDictionaryKeyAndRsIDList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetDictionaryValuesByDictionaryKeyAndRsIDList(ctx, req.(*GetDictionaryValuesByDictionaryKeyAndRsIDListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetDictionaryValuesByAttributeIDAndRsIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryValuesByAttributeIDAndRsIDListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetDictionaryValuesByAttributeIDAndRsIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetDictionaryValuesByAttributeIDAndRsIDList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetDictionaryValuesByAttributeIDAndRsIDList(ctx, req.(*GetDictionaryValuesByAttributeIDAndRsIDListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetDictionaryValuesByDescCategoryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryValuesByDescCategoryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetDictionaryValuesByDescCategoryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetDictionaryValuesByDescCategoryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetDictionaryValuesByDescCategoryAttribute(ctx, req.(*GetDictionaryValuesByDescCategoryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetDictionaryValuesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryValuesByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetDictionaryValuesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetDictionaryValuesByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetDictionaryValuesByIDs(ctx, req.(*GetDictionaryValuesByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetDictionaryValueBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryValueBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetDictionaryValueBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetDictionaryValueBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetDictionaryValueBatch(ctx, req.(*GetDictionaryValueBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetDictionaryBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryBrandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetDictionaryBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetDictionaryBrands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetDictionaryBrands(ctx, req.(*GetDictionaryBrandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_SearchBrandByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBrandByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).SearchBrandByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/SearchBrandByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).SearchBrandByName(ctx, req.(*SearchBrandByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_ToDescriptionCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToDescriptionCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).ToDescriptionCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/ToDescriptionCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).ToDescriptionCategory(ctx, req.(*ToDescriptionCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_CheckSellerDescriptionCategoryExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSellerDescriptionCategoryExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).CheckSellerDescriptionCategoryExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/CheckSellerDescriptionCategoryExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).CheckSellerDescriptionCategoryExists(ctx, req.(*CheckSellerDescriptionCategoryExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetSellerCategoryTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerCategoryTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetSellerCategoryTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetSellerCategoryTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetSellerCategoryTree(ctx, req.(*GetSellerCategoryTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetSellerDescriptionCategoriesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerDescriptionCategoriesByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetSellerDescriptionCategoriesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetSellerDescriptionCategoriesByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetSellerDescriptionCategoriesByIDs(ctx, req.(*GetSellerDescriptionCategoriesByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetSellerDescriptionCategoriesFinalByDescriptionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerDescriptionCategoriesFinalByDescriptionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetSellerDescriptionCategoriesFinalByDescriptionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetSellerDescriptionCategoriesFinalByDescriptionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetSellerDescriptionCategoriesFinalByDescriptionID(ctx, req.(*GetSellerDescriptionCategoriesFinalByDescriptionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetSellerDescriptionCategoryBranchByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerDescriptionCategoryBranchByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetSellerDescriptionCategoryBranchByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetSellerDescriptionCategoryBranchByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetSellerDescriptionCategoryBranchByID(ctx, req.(*GetSellerDescriptionCategoryBranchByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerCenterAPI_GetSellerCategoryLevelsByCategoryIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerCategoryLevelsByCategoryIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerCenterAPIServer).GetSellerCategoryLevelsByCategoryIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.service.sc.SellerCenterAPI/GetSellerCategoryLevelsByCategoryIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerCenterAPIServer).GetSellerCategoryLevelsByCategoryIDs(ctx, req.(*GetSellerCategoryLevelsByCategoryIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SellerCenterAPI_ServiceDesc is the grpc.ServiceDesc for SellerCenterAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SellerCenterAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.service.sc.SellerCenterAPI",
	HandlerType: (*SellerCenterAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAttributesNamesMap",
			Handler:    _SellerCenterAPI_GetAttributesNamesMap_Handler,
		},
		{
			MethodName: "GetCategoryAttributesWithDictionaryValue",
			Handler:    _SellerCenterAPI_GetCategoryAttributesWithDictionaryValue_Handler,
		},
		{
			MethodName: "GetCategoriesAttributesWithHierarchy",
			Handler:    _SellerCenterAPI_GetCategoriesAttributesWithHierarchy_Handler,
		},
		{
			MethodName: "CheckCategoryFinal",
			Handler:    _SellerCenterAPI_CheckCategoryFinal_Handler,
		},
		{
			MethodName: "GetCategoryBranchByID",
			Handler:    _SellerCenterAPI_GetCategoryBranchByID_Handler,
		},
		{
			MethodName: "GetDescriptionCategoryDeep",
			Handler:    _SellerCenterAPI_GetDescriptionCategoryDeep_Handler,
		},
		{
			MethodName: "GetFinalUnmappedDescriptionCategories",
			Handler:    _SellerCenterAPI_GetFinalUnmappedDescriptionCategories_Handler,
		},
		{
			MethodName: "GetCategoriesByIDs",
			Handler:    _SellerCenterAPI_GetCategoriesByIDs_Handler,
		},
		{
			MethodName: "GetCategoryTypeMapByCategoryIDs",
			Handler:    _SellerCenterAPI_GetCategoryTypeMapByCategoryIDs_Handler,
		},
		{
			MethodName: "GetCategoryTypeMapByCategoryTypeIDs",
			Handler:    _SellerCenterAPI_GetCategoryTypeMapByCategoryTypeIDs_Handler,
		},
		{
			MethodName: "GetCategoryByTypeIDs",
			Handler:    _SellerCenterAPI_GetCategoryByTypeIDs_Handler,
		},
		{
			MethodName: "GetCommercialCategoriesByIDs",
			Handler:    _SellerCenterAPI_GetCommercialCategoriesByIDs_Handler,
		},
		{
			MethodName: "GetCommercialCategoriesByTypeIDs",
			Handler:    _SellerCenterAPI_GetCommercialCategoriesByTypeIDs_Handler,
		},
		{
			MethodName: "GetCommercialCategoriesMap",
			Handler:    _SellerCenterAPI_GetCommercialCategoriesMap_Handler,
		},
		{
			MethodName: "GetMappedCommercialCategoriesByDescriptionIDs",
			Handler:    _SellerCenterAPI_GetMappedCommercialCategoriesByDescriptionIDs_Handler,
		},
		{
			MethodName: "SearchCommercialCategoriesByName",
			Handler:    _SellerCenterAPI_SearchCommercialCategoriesByName_Handler,
		},
		{
			MethodName: "GetCommercialCategoriesTree",
			Handler:    _SellerCenterAPI_GetCommercialCategoriesTree_Handler,
		},
		{
			MethodName: "GetCommercialCategoriesByMetazonIDs",
			Handler:    _SellerCenterAPI_GetCommercialCategoriesByMetazonIDs_Handler,
		},
		{
			MethodName: "GetDictionaryByIDs",
			Handler:    _SellerCenterAPI_GetDictionaryByIDs_Handler,
		},
		{
			MethodName: "GetDictionaryValuesByDictionaryExternalIDs",
			Handler:    _SellerCenterAPI_GetDictionaryValuesByDictionaryExternalIDs_Handler,
		},
		{
			MethodName: "GetDictionaryValuesByDictionaryKeyAndRsIDList",
			Handler:    _SellerCenterAPI_GetDictionaryValuesByDictionaryKeyAndRsIDList_Handler,
		},
		{
			MethodName: "GetDictionaryValuesByAttributeIDAndRsIDList",
			Handler:    _SellerCenterAPI_GetDictionaryValuesByAttributeIDAndRsIDList_Handler,
		},
		{
			MethodName: "GetDictionaryValuesByDescCategoryAttribute",
			Handler:    _SellerCenterAPI_GetDictionaryValuesByDescCategoryAttribute_Handler,
		},
		{
			MethodName: "GetDictionaryValuesByIDs",
			Handler:    _SellerCenterAPI_GetDictionaryValuesByIDs_Handler,
		},
		{
			MethodName: "GetDictionaryValueBatch",
			Handler:    _SellerCenterAPI_GetDictionaryValueBatch_Handler,
		},
		{
			MethodName: "GetDictionaryBrands",
			Handler:    _SellerCenterAPI_GetDictionaryBrands_Handler,
		},
		{
			MethodName: "SearchBrandByName",
			Handler:    _SellerCenterAPI_SearchBrandByName_Handler,
		},
		{
			MethodName: "ToDescriptionCategory",
			Handler:    _SellerCenterAPI_ToDescriptionCategory_Handler,
		},
		{
			MethodName: "CheckSellerDescriptionCategoryExists",
			Handler:    _SellerCenterAPI_CheckSellerDescriptionCategoryExists_Handler,
		},
		{
			MethodName: "GetSellerCategoryTree",
			Handler:    _SellerCenterAPI_GetSellerCategoryTree_Handler,
		},
		{
			MethodName: "GetSellerDescriptionCategoriesByIDs",
			Handler:    _SellerCenterAPI_GetSellerDescriptionCategoriesByIDs_Handler,
		},
		{
			MethodName: "GetSellerDescriptionCategoriesFinalByDescriptionID",
			Handler:    _SellerCenterAPI_GetSellerDescriptionCategoriesFinalByDescriptionID_Handler,
		},
		{
			MethodName: "GetSellerDescriptionCategoryBranchByID",
			Handler:    _SellerCenterAPI_GetSellerDescriptionCategoryBranchByID_Handler,
		},
		{
			MethodName: "GetSellerCategoryLevelsByCategoryIDs",
			Handler:    _SellerCenterAPI_GetSellerCategoryLevelsByCategoryIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.dg.ru/product-service/go/product-service-meta/api/sc/messages.proto",
}
