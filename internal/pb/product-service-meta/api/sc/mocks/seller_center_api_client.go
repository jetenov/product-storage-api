// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	sc "gitlab.dg.ru/ocb/product-creation/product-storage-api/internal/pb/product-service-meta/api/sc"
)

// SellerCenterAPIClient is an autogenerated mock type for the SellerCenterAPIClient type
type SellerCenterAPIClient struct {
	mock.Mock
}

// CheckCategoryFinal provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) CheckCategoryFinal(ctx context.Context, in *sc.CheckCategoryFinalRequest, opts ...grpc.CallOption) (*sc.CheckCategoryFinalResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.CheckCategoryFinalResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.CheckCategoryFinalRequest, ...grpc.CallOption) *sc.CheckCategoryFinalResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.CheckCategoryFinalResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.CheckCategoryFinalRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckSellerDescriptionCategoryExists provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) CheckSellerDescriptionCategoryExists(ctx context.Context, in *sc.CheckSellerDescriptionCategoryExistsRequest, opts ...grpc.CallOption) (*sc.CheckSellerDescriptionCategoryExistsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.CheckSellerDescriptionCategoryExistsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.CheckSellerDescriptionCategoryExistsRequest, ...grpc.CallOption) *sc.CheckSellerDescriptionCategoryExistsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.CheckSellerDescriptionCategoryExistsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.CheckSellerDescriptionCategoryExistsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttributesNamesMap provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetAttributesNamesMap(ctx context.Context, in *sc.GetAttributesNamesMapRequest, opts ...grpc.CallOption) (*sc.GetAttributesNamesMapResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetAttributesNamesMapResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetAttributesNamesMapRequest, ...grpc.CallOption) *sc.GetAttributesNamesMapResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetAttributesNamesMapResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetAttributesNamesMapRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoriesAttributesWithHierarchy provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetCategoriesAttributesWithHierarchy(ctx context.Context, in *sc.GetCategoriesAttributesWithHierarchyRequest, opts ...grpc.CallOption) (*sc.GetCategoriesAttributesWithHierarchyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetCategoriesAttributesWithHierarchyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetCategoriesAttributesWithHierarchyRequest, ...grpc.CallOption) *sc.GetCategoriesAttributesWithHierarchyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetCategoriesAttributesWithHierarchyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetCategoriesAttributesWithHierarchyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoriesByIDs provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetCategoriesByIDs(ctx context.Context, in *sc.GetCategoriesByIDsRequest, opts ...grpc.CallOption) (*sc.GetCategoriesByIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetCategoriesByIDsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetCategoriesByIDsRequest, ...grpc.CallOption) *sc.GetCategoriesByIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetCategoriesByIDsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetCategoriesByIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryAttributesWithDictionaryValue provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetCategoryAttributesWithDictionaryValue(ctx context.Context, in *sc.GetCategoryAttributesRequest, opts ...grpc.CallOption) (*sc.GetCategoryAttributesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetCategoryAttributesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetCategoryAttributesRequest, ...grpc.CallOption) *sc.GetCategoryAttributesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetCategoryAttributesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetCategoryAttributesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryBranchByID provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetCategoryBranchByID(ctx context.Context, in *sc.GetCategoryBranchByIDRequest, opts ...grpc.CallOption) (*sc.GetCategoryBranchByIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetCategoryBranchByIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetCategoryBranchByIDRequest, ...grpc.CallOption) *sc.GetCategoryBranchByIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetCategoryBranchByIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetCategoryBranchByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryByTypeIDs provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetCategoryByTypeIDs(ctx context.Context, in *sc.GetCategoryByTypeIDsRequest, opts ...grpc.CallOption) (*sc.GetCategoryByTypeIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetCategoryByTypeIDsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetCategoryByTypeIDsRequest, ...grpc.CallOption) *sc.GetCategoryByTypeIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetCategoryByTypeIDsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetCategoryByTypeIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryTypeMapByCategoryIDs provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetCategoryTypeMapByCategoryIDs(ctx context.Context, in *sc.GetCategoryTypeMapByCategoryIDsRequest, opts ...grpc.CallOption) (*sc.GetCategoryTypeMapByCategoryIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetCategoryTypeMapByCategoryIDsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetCategoryTypeMapByCategoryIDsRequest, ...grpc.CallOption) *sc.GetCategoryTypeMapByCategoryIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetCategoryTypeMapByCategoryIDsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetCategoryTypeMapByCategoryIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryTypeMapByCategoryTypeIDs provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetCategoryTypeMapByCategoryTypeIDs(ctx context.Context, in *sc.GetCategoryTypeMapByCategoryTypeIDsRequest, opts ...grpc.CallOption) (*sc.GetCategoryTypeMapByCategoryTypeIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetCategoryTypeMapByCategoryTypeIDsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetCategoryTypeMapByCategoryTypeIDsRequest, ...grpc.CallOption) *sc.GetCategoryTypeMapByCategoryTypeIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetCategoryTypeMapByCategoryTypeIDsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetCategoryTypeMapByCategoryTypeIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommercialCategoriesByIDs provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetCommercialCategoriesByIDs(ctx context.Context, in *sc.GetCommercialCategoriesByIDsRequest, opts ...grpc.CallOption) (*sc.GetCommercialCategoriesByIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetCommercialCategoriesByIDsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetCommercialCategoriesByIDsRequest, ...grpc.CallOption) *sc.GetCommercialCategoriesByIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetCommercialCategoriesByIDsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetCommercialCategoriesByIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommercialCategoriesByMetazonIDs provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetCommercialCategoriesByMetazonIDs(ctx context.Context, in *sc.GetCommercialCategoriesByMetazonIDsRequest, opts ...grpc.CallOption) (*sc.GetCommercialCategoriesByMetazonIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetCommercialCategoriesByMetazonIDsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetCommercialCategoriesByMetazonIDsRequest, ...grpc.CallOption) *sc.GetCommercialCategoriesByMetazonIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetCommercialCategoriesByMetazonIDsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetCommercialCategoriesByMetazonIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommercialCategoriesByTypeIDs provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetCommercialCategoriesByTypeIDs(ctx context.Context, in *sc.GetCommercialCategoriesByTypeIDsRequest, opts ...grpc.CallOption) (*sc.GetCommercialCategoriesByTypeIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetCommercialCategoriesByTypeIDsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetCommercialCategoriesByTypeIDsRequest, ...grpc.CallOption) *sc.GetCommercialCategoriesByTypeIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetCommercialCategoriesByTypeIDsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetCommercialCategoriesByTypeIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommercialCategoriesMap provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetCommercialCategoriesMap(ctx context.Context, in *sc.GetCommercialCategoriesMapRequest, opts ...grpc.CallOption) (*sc.GetCommercialCategoriesMapResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetCommercialCategoriesMapResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetCommercialCategoriesMapRequest, ...grpc.CallOption) *sc.GetCommercialCategoriesMapResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetCommercialCategoriesMapResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetCommercialCategoriesMapRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommercialCategoriesTree provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetCommercialCategoriesTree(ctx context.Context, in *sc.GetCommercialCategoriesTreeRequest, opts ...grpc.CallOption) (*sc.GetCommercialCategoriesTreeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetCommercialCategoriesTreeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetCommercialCategoriesTreeRequest, ...grpc.CallOption) *sc.GetCommercialCategoriesTreeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetCommercialCategoriesTreeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetCommercialCategoriesTreeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDescriptionCategoryDeep provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetDescriptionCategoryDeep(ctx context.Context, in *sc.GetDescriptionCategoryDeepRequest, opts ...grpc.CallOption) (*sc.GetDescriptionCategoryDeepResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetDescriptionCategoryDeepResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetDescriptionCategoryDeepRequest, ...grpc.CallOption) *sc.GetDescriptionCategoryDeepResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetDescriptionCategoryDeepResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetDescriptionCategoryDeepRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDictionaryBrands provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetDictionaryBrands(ctx context.Context, in *sc.GetDictionaryBrandsRequest, opts ...grpc.CallOption) (*sc.GetDictionaryBrandsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetDictionaryBrandsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetDictionaryBrandsRequest, ...grpc.CallOption) *sc.GetDictionaryBrandsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetDictionaryBrandsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetDictionaryBrandsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDictionaryByIDs provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetDictionaryByIDs(ctx context.Context, in *sc.GetDictionaryByIDsRequest, opts ...grpc.CallOption) (*sc.GetDictionaryByIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetDictionaryByIDsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetDictionaryByIDsRequest, ...grpc.CallOption) *sc.GetDictionaryByIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetDictionaryByIDsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetDictionaryByIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDictionaryValueBatch provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetDictionaryValueBatch(ctx context.Context, in *sc.GetDictionaryValueBatchRequest, opts ...grpc.CallOption) (*sc.GetDictionaryValueBatchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetDictionaryValueBatchResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetDictionaryValueBatchRequest, ...grpc.CallOption) *sc.GetDictionaryValueBatchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetDictionaryValueBatchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetDictionaryValueBatchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDictionaryValuesByAttributeIDAndRsIDList provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetDictionaryValuesByAttributeIDAndRsIDList(ctx context.Context, in *sc.GetDictionaryValuesByAttributeIDAndRsIDListRequest, opts ...grpc.CallOption) (*sc.GetDictionaryValuesByAttributeIDAndRsIDListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetDictionaryValuesByAttributeIDAndRsIDListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetDictionaryValuesByAttributeIDAndRsIDListRequest, ...grpc.CallOption) *sc.GetDictionaryValuesByAttributeIDAndRsIDListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetDictionaryValuesByAttributeIDAndRsIDListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetDictionaryValuesByAttributeIDAndRsIDListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDictionaryValuesByDescCategoryAttribute provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetDictionaryValuesByDescCategoryAttribute(ctx context.Context, in *sc.GetDictionaryValuesByDescCategoryAttributeRequest, opts ...grpc.CallOption) (*sc.GetDictionaryValuesByDescCategoryAttributeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetDictionaryValuesByDescCategoryAttributeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetDictionaryValuesByDescCategoryAttributeRequest, ...grpc.CallOption) *sc.GetDictionaryValuesByDescCategoryAttributeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetDictionaryValuesByDescCategoryAttributeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetDictionaryValuesByDescCategoryAttributeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDictionaryValuesByDictionaryExternalIDs provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetDictionaryValuesByDictionaryExternalIDs(ctx context.Context, in *sc.GetDictionaryValuesByDictionaryExternalIDsRequest, opts ...grpc.CallOption) (*sc.GetDictionaryValuesByDictionaryExternalIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetDictionaryValuesByDictionaryExternalIDsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetDictionaryValuesByDictionaryExternalIDsRequest, ...grpc.CallOption) *sc.GetDictionaryValuesByDictionaryExternalIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetDictionaryValuesByDictionaryExternalIDsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetDictionaryValuesByDictionaryExternalIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDictionaryValuesByDictionaryKeyAndRsIDList provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetDictionaryValuesByDictionaryKeyAndRsIDList(ctx context.Context, in *sc.GetDictionaryValuesByDictionaryKeyAndRsIDListRequest, opts ...grpc.CallOption) (*sc.GetDictionaryValuesByDictionaryKeyAndRsIDListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetDictionaryValuesByDictionaryKeyAndRsIDListResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetDictionaryValuesByDictionaryKeyAndRsIDListRequest, ...grpc.CallOption) *sc.GetDictionaryValuesByDictionaryKeyAndRsIDListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetDictionaryValuesByDictionaryKeyAndRsIDListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetDictionaryValuesByDictionaryKeyAndRsIDListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDictionaryValuesByIDs provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetDictionaryValuesByIDs(ctx context.Context, in *sc.GetDictionaryValuesByIDsRequest, opts ...grpc.CallOption) (*sc.GetDictionaryValuesByIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetDictionaryValuesByIDsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetDictionaryValuesByIDsRequest, ...grpc.CallOption) *sc.GetDictionaryValuesByIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetDictionaryValuesByIDsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetDictionaryValuesByIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFinalUnmappedDescriptionCategories provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetFinalUnmappedDescriptionCategories(ctx context.Context, in *sc.GetFinalUnmappedDescriptionCategoriesRequest, opts ...grpc.CallOption) (*sc.GetFinalUnmappedDescriptionCategoriesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetFinalUnmappedDescriptionCategoriesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetFinalUnmappedDescriptionCategoriesRequest, ...grpc.CallOption) *sc.GetFinalUnmappedDescriptionCategoriesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetFinalUnmappedDescriptionCategoriesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetFinalUnmappedDescriptionCategoriesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappedCommercialCategoriesByDescriptionIDs provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetMappedCommercialCategoriesByDescriptionIDs(ctx context.Context, in *sc.GetMappedCommercialCategoriesByDescriptionIDsRequest, opts ...grpc.CallOption) (*sc.GetMappedCommercialCategoriesByDescriptionIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetMappedCommercialCategoriesByDescriptionIDsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetMappedCommercialCategoriesByDescriptionIDsRequest, ...grpc.CallOption) *sc.GetMappedCommercialCategoriesByDescriptionIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetMappedCommercialCategoriesByDescriptionIDsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetMappedCommercialCategoriesByDescriptionIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellerCategoryLevelsByCategoryIDs provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetSellerCategoryLevelsByCategoryIDs(ctx context.Context, in *sc.GetSellerCategoryLevelsByCategoryIDsRequest, opts ...grpc.CallOption) (*sc.GetSellerCategoryLevelsByCategoryIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetSellerCategoryLevelsByCategoryIDsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetSellerCategoryLevelsByCategoryIDsRequest, ...grpc.CallOption) *sc.GetSellerCategoryLevelsByCategoryIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetSellerCategoryLevelsByCategoryIDsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetSellerCategoryLevelsByCategoryIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellerCategoryTree provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetSellerCategoryTree(ctx context.Context, in *sc.GetSellerCategoryTreeRequest, opts ...grpc.CallOption) (*sc.GetSellerCategoryTreeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetSellerCategoryTreeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetSellerCategoryTreeRequest, ...grpc.CallOption) *sc.GetSellerCategoryTreeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetSellerCategoryTreeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetSellerCategoryTreeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellerDescriptionCategoriesByIDs provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetSellerDescriptionCategoriesByIDs(ctx context.Context, in *sc.GetSellerDescriptionCategoriesByIDsRequest, opts ...grpc.CallOption) (*sc.GetSellerDescriptionCategoriesByIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetSellerDescriptionCategoriesByIDsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetSellerDescriptionCategoriesByIDsRequest, ...grpc.CallOption) *sc.GetSellerDescriptionCategoriesByIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetSellerDescriptionCategoriesByIDsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetSellerDescriptionCategoriesByIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellerDescriptionCategoriesFinalByDescriptionID provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetSellerDescriptionCategoriesFinalByDescriptionID(ctx context.Context, in *sc.GetSellerDescriptionCategoriesFinalByDescriptionIDRequest, opts ...grpc.CallOption) (*sc.GetSellerDescriptionCategoriesFinalByDescriptionIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetSellerDescriptionCategoriesFinalByDescriptionIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetSellerDescriptionCategoriesFinalByDescriptionIDRequest, ...grpc.CallOption) *sc.GetSellerDescriptionCategoriesFinalByDescriptionIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetSellerDescriptionCategoriesFinalByDescriptionIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetSellerDescriptionCategoriesFinalByDescriptionIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellerDescriptionCategoryBranchByID provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) GetSellerDescriptionCategoryBranchByID(ctx context.Context, in *sc.GetSellerDescriptionCategoryBranchByIDRequest, opts ...grpc.CallOption) (*sc.GetSellerDescriptionCategoryBranchByIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.GetSellerDescriptionCategoryBranchByIDResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.GetSellerDescriptionCategoryBranchByIDRequest, ...grpc.CallOption) *sc.GetSellerDescriptionCategoryBranchByIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.GetSellerDescriptionCategoryBranchByIDResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.GetSellerDescriptionCategoryBranchByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchBrandByName provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) SearchBrandByName(ctx context.Context, in *sc.SearchBrandByNameRequest, opts ...grpc.CallOption) (*sc.SearchBrandByNameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.SearchBrandByNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.SearchBrandByNameRequest, ...grpc.CallOption) *sc.SearchBrandByNameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.SearchBrandByNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.SearchBrandByNameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchCommercialCategoriesByName provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) SearchCommercialCategoriesByName(ctx context.Context, in *sc.SearchCommercialCategoriesByNameRequest, opts ...grpc.CallOption) (*sc.SearchCommercialCategoriesByNameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.SearchCommercialCategoriesByNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.SearchCommercialCategoriesByNameRequest, ...grpc.CallOption) *sc.SearchCommercialCategoriesByNameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.SearchCommercialCategoriesByNameResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.SearchCommercialCategoriesByNameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToDescriptionCategory provides a mock function with given fields: ctx, in, opts
func (_m *SellerCenterAPIClient) ToDescriptionCategory(ctx context.Context, in *sc.ToDescriptionCategoryRequest, opts ...grpc.CallOption) (*sc.ToDescriptionCategoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sc.ToDescriptionCategoryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *sc.ToDescriptionCategoryRequest, ...grpc.CallOption) *sc.ToDescriptionCategoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sc.ToDescriptionCategoryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sc.ToDescriptionCategoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
