// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.1
// source: gitlab.dg.ru/ocb/categories/api/api/categories/categories.proto

package categories

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/mwitkow/go-proto-validators"
	_ "gitlab.dg.ru/ocb/product-creation/product-storage-api/internal/pb/product-service-meta/api/sc"
	_ "gitlab.dg.ru/ocb/product-creation/product-storage-api/internal/pb/seller-api/api/category/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCode int32

const (
	ErrorCode_ERROR_CODE_VALIDATION_ERRORS ErrorCode = 0 // Поле не соответсвтует валидации
	ErrorCode_ERROR_CODE_NOT_FOUND         ErrorCode = 1 // Запрашиваемый объект не найден
	ErrorCode_ERROR_CODE_BAD_REQUEST       ErrorCode = 2 // Поле не соответсвтует валидации
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "ERROR_CODE_VALIDATION_ERRORS",
		1: "ERROR_CODE_NOT_FOUND",
		2: "ERROR_CODE_BAD_REQUEST",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_CODE_VALIDATION_ERRORS": 0,
		"ERROR_CODE_NOT_FOUND":         1,
		"ERROR_CODE_BAD_REQUEST":       2,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{0}
}

type Priority int32

const (
	Priority_PRIORITY_NULL   Priority = 0
	Priority_PRIORITY_HIGH   Priority = 1
	Priority_PRIORITY_MEDIUM Priority = 2
	Priority_PRIORITY_LOW    Priority = 3
)

// Enum value maps for Priority.
var (
	Priority_name = map[int32]string{
		0: "PRIORITY_NULL",
		1: "PRIORITY_HIGH",
		2: "PRIORITY_MEDIUM",
		3: "PRIORITY_LOW",
	}
	Priority_value = map[string]int32{
		"PRIORITY_NULL":   0,
		"PRIORITY_HIGH":   1,
		"PRIORITY_MEDIUM": 2,
		"PRIORITY_LOW":    3,
	}
)

func (x Priority) Enum() *Priority {
	p := new(Priority)
	*p = x
	return p
}

func (x Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_enumTypes[1].Descriptor()
}

func (Priority) Type() protoreflect.EnumType {
	return &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_enumTypes[1]
}

func (x Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Priority.Descriptor instead.
func (Priority) EnumDescriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{1}
}

type ValidationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *ValidationError) Reset() {
	*x = ValidationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationError) ProtoMessage() {}

func (x *ValidationError) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationError.ProtoReflect.Descriptor instead.
func (*ValidationError) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{0}
}

func (x *ValidationError) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type ErrorContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ContextType:
	//	*ErrorContext_ValidationError
	ContextType isErrorContext_ContextType `protobuf_oneof:"contextType"`
}

func (x *ErrorContext) Reset() {
	*x = ErrorContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorContext) ProtoMessage() {}

func (x *ErrorContext) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorContext.ProtoReflect.Descriptor instead.
func (*ErrorContext) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{1}
}

func (m *ErrorContext) GetContextType() isErrorContext_ContextType {
	if m != nil {
		return m.ContextType
	}
	return nil
}

func (x *ErrorContext) GetValidationError() *ValidationError {
	if x, ok := x.GetContextType().(*ErrorContext_ValidationError); ok {
		return x.ValidationError
	}
	return nil
}

type isErrorContext_ContextType interface {
	isErrorContext_ContextType()
}

type ErrorContext_ValidationError struct {
	ValidationError *ValidationError `protobuf:"bytes,3,opt,name=validation_error,json=validationError,proto3,oneof"`
}

func (*ErrorContext_ValidationError) isErrorContext_ContextType() {}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ErrorCode     `protobuf:"varint,1,opt,name=code,proto3,enum=dg.ocb.categories.api.api.pkg.categories.ErrorCode" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Context *ErrorContext `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	Errors  []*Error      `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_ERROR_CODE_VALIDATION_ERRORS
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetContext() *ErrorContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Error) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type AttributeDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeId  int64  `protobuf:"varint,1,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	IsRequired   bool   `protobuf:"varint,4,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	Type         string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	IsCollection bool   `protobuf:"varint,6,opt,name=is_collection,json=isCollection,proto3" json:"is_collection,omitempty"`
	IsDictionary bool   `protobuf:"varint,7,opt,name=is_dictionary,json=isDictionary,proto3" json:"is_dictionary,omitempty"`
	ComplexId    int64  `protobuf:"varint,8,opt,name=complex_id,json=complexId,proto3" json:"complex_id,omitempty"`
	MaxLength    int32  `protobuf:"varint,9,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	MinLength    int32  `protobuf:"varint,10,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
}

func (x *AttributeDescription) Reset() {
	*x = AttributeDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeDescription) ProtoMessage() {}

func (x *AttributeDescription) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeDescription.ProtoReflect.Descriptor instead.
func (*AttributeDescription) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{3}
}

func (x *AttributeDescription) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *AttributeDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttributeDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AttributeDescription) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *AttributeDescription) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AttributeDescription) GetIsCollection() bool {
	if x != nil {
		return x.IsCollection
	}
	return false
}

func (x *AttributeDescription) GetIsDictionary() bool {
	if x != nil {
		return x.IsDictionary
	}
	return false
}

func (x *AttributeDescription) GetComplexId() int64 {
	if x != nil {
		return x.ComplexId
	}
	return 0
}

func (x *AttributeDescription) GetMaxLength() int32 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

func (x *AttributeDescription) GetMinLength() int32 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

type AttributeDictionaryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AttributeDictionaryValue) Reset() {
	*x = AttributeDictionaryValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeDictionaryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeDictionaryValue) ProtoMessage() {}

func (x *AttributeDictionaryValue) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeDictionaryValue.ProtoReflect.Descriptor instead.
func (*AttributeDictionaryValue) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{4}
}

func (x *AttributeDictionaryValue) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AttributeDictionaryValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MinFulfillment int64       `protobuf:"varint,3,opt,name=min_fulfillment,json=minFulfillment,proto3" json:"min_fulfillment,omitempty"`
	Priority       Priority    `protobuf:"varint,4,opt,name=priority,proto3,enum=dg.ocb.categories.api.api.pkg.categories.Priority" json:"priority,omitempty"`
	Children       []*Category `protobuf:"bytes,5,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{5}
}

func (x *Category) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetMinFulfillment() int64 {
	if x != nil {
		return x.MinFulfillment
	}
	return 0
}

func (x *Category) GetPriority() Priority {
	if x != nil {
		return x.Priority
	}
	return Priority_PRIORITY_NULL
}

func (x *Category) GetChildren() []*Category {
	if x != nil {
		return x.Children
	}
	return nil
}

type CategoryParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MinFulfillment *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=min_fulfillment,json=minFulfillment,proto3" json:"min_fulfillment,omitempty"`
	Name           string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Priority       Priority               `protobuf:"varint,4,opt,name=priority,proto3,enum=dg.ocb.categories.api.api.pkg.categories.Priority" json:"priority,omitempty"`
	ParentId       int64                  `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	RootCategoryId int64                  `protobuf:"varint,6,opt,name=root_category_id,json=rootCategoryId,proto3" json:"root_category_id,omitempty"`
}

func (x *CategoryParameters) Reset() {
	*x = CategoryParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryParameters) ProtoMessage() {}

func (x *CategoryParameters) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryParameters.ProtoReflect.Descriptor instead.
func (*CategoryParameters) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{6}
}

func (x *CategoryParameters) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CategoryParameters) GetMinFulfillment() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinFulfillment
	}
	return nil
}

func (x *CategoryParameters) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryParameters) GetPriority() Priority {
	if x != nil {
		return x.Priority
	}
	return Priority_PRIORITY_NULL
}

func (x *CategoryParameters) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CategoryParameters) GetRootCategoryId() int64 {
	if x != nil {
		return x.RootCategoryId
	}
	return 0
}

type GetAttributesValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeId int64  `protobuf:"varint,2,opt,name=attribute_id,json=attributeId,proto3" json:"attribute_id,omitempty"`
	CategoryId  int64  `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Query       string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Limit       string `protobuf:"bytes,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int64  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetAttributesValuesRequest) Reset() {
	*x = GetAttributesValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttributesValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttributesValuesRequest) ProtoMessage() {}

func (x *GetAttributesValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttributesValuesRequest.ProtoReflect.Descriptor instead.
func (*GetAttributesValuesRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{7}
}

func (x *GetAttributesValuesRequest) GetAttributeId() int64 {
	if x != nil {
		return x.AttributeId
	}
	return 0
}

func (x *GetAttributesValuesRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *GetAttributesValuesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetAttributesValuesRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetAttributesValuesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetAttributesValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AttributeDictionaryValue `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Total int64                       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetAttributesValuesResponse) Reset() {
	*x = GetAttributesValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttributesValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttributesValuesResponse) ProtoMessage() {}

func (x *GetAttributesValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttributesValuesResponse.ProtoReflect.Descriptor instead.
func (*GetAttributesValuesResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{8}
}

func (x *GetAttributesValuesResponse) GetItems() []*AttributeDictionaryValue {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GetAttributesValuesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetCategoriesAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId int64 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *GetCategoriesAttributesRequest) Reset() {
	*x = GetCategoriesAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoriesAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesAttributesRequest) ProtoMessage() {}

func (x *GetCategoriesAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesAttributesRequest.ProtoReflect.Descriptor instead.
func (*GetCategoriesAttributesRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{9}
}

func (x *GetCategoriesAttributesRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type GetCategoriesAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes []*AttributeDescription `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *GetCategoriesAttributesResponse) Reset() {
	*x = GetCategoriesAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoriesAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesAttributesResponse) ProtoMessage() {}

func (x *GetCategoriesAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesAttributesResponse.ProtoReflect.Descriptor instead.
func (*GetCategoriesAttributesResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{10}
}

func (x *GetCategoriesAttributesResponse) GetAttributes() []*AttributeDescription {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type GetCategoriesTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentId int64  `protobuf:"varint,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Query    string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Limit    int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int64  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetCategoriesTreeRequest) Reset() {
	*x = GetCategoriesTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoriesTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesTreeRequest) ProtoMessage() {}

func (x *GetCategoriesTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesTreeRequest.ProtoReflect.Descriptor instead.
func (*GetCategoriesTreeRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{11}
}

func (x *GetCategoriesTreeRequest) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *GetCategoriesTreeRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetCategoriesTreeRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCategoriesTreeRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetCategoriesTreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*Category `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetCategoriesTreeResponse) Reset() {
	*x = GetCategoriesTreeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoriesTreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesTreeResponse) ProtoMessage() {}

func (x *GetCategoriesTreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesTreeResponse.ProtoReflect.Descriptor instead.
func (*GetCategoriesTreeResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{12}
}

func (x *GetCategoriesTreeResponse) GetResults() []*Category {
	if x != nil {
		return x.Results
	}
	return nil
}

type GetCategoriesParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId int64 `protobuf:"varint,1,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *GetCategoriesParametersRequest) Reset() {
	*x = GetCategoriesParametersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoriesParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesParametersRequest) ProtoMessage() {}

func (x *GetCategoriesParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesParametersRequest.ProtoReflect.Descriptor instead.
func (*GetCategoriesParametersRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{13}
}

func (x *GetCategoriesParametersRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

type GetCategoriesParametersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items *CategoryParameters `protobuf:"bytes,2,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *GetCategoriesParametersResponse) Reset() {
	*x = GetCategoriesParametersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoriesParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesParametersResponse) ProtoMessage() {}

func (x *GetCategoriesParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesParametersResponse.ProtoReflect.Descriptor instead.
func (*GetCategoriesParametersResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{14}
}

func (x *GetCategoriesParametersResponse) GetItems() *CategoryParameters {
	if x != nil {
		return x.Items
	}
	return nil
}

type PutCategoriesParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items *CategoryParameters `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *PutCategoriesParametersRequest) Reset() {
	*x = PutCategoriesParametersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCategoriesParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCategoriesParametersRequest) ProtoMessage() {}

func (x *PutCategoriesParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCategoriesParametersRequest.ProtoReflect.Descriptor instead.
func (*PutCategoriesParametersRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{15}
}

func (x *PutCategoriesParametersRequest) GetItems() *CategoryParameters {
	if x != nil {
		return x.Items
	}
	return nil
}

type PutCategoriesParametersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *PutCategoriesParametersResponse) Reset() {
	*x = PutCategoriesParametersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCategoriesParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCategoriesParametersResponse) ProtoMessage() {}

func (x *PutCategoriesParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCategoriesParametersResponse.ProtoReflect.Descriptor instead.
func (*PutCategoriesParametersResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{16}
}

func (x *PutCategoriesParametersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteCategoriesParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryIds []int64 `protobuf:"varint,1,rep,packed,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
}

func (x *DeleteCategoriesParametersRequest) Reset() {
	*x = DeleteCategoriesParametersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCategoriesParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoriesParametersRequest) ProtoMessage() {}

func (x *DeleteCategoriesParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoriesParametersRequest.ProtoReflect.Descriptor instead.
func (*DeleteCategoriesParametersRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteCategoriesParametersRequest) GetCategoryIds() []int64 {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

type DeleteCategoriesParametersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteCategoriesParametersResponse) Reset() {
	*x = DeleteCategoriesParametersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCategoriesParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoriesParametersResponse) ProtoMessage() {}

func (x *DeleteCategoriesParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoriesParametersResponse.ProtoReflect.Descriptor instead.
func (*DeleteCategoriesParametersResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteCategoriesParametersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto protoreflect.FileDescriptor

var file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDesc = []byte{
	0x0a, 0x41, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x75,
	0x2f, 0x6f, 0x63, 0x62, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a,
	0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74,
	0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4c, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x6f, 0x7a,
	0x6f, 0x6e, 0x2e, 0x72, 0x75, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x47, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e,
	0x2e, 0x72, 0x75, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f,
	0x67, 0x6f, 0x2f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x0f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x68, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x9b, 0x02, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f,
	0x63, 0x62, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x52,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xcb, 0x02,
	0x0a, 0x14, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x40, 0x0a, 0x18, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfb, 0x01,
	0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x46, 0x75, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e,
	0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x7a,
	0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x9f, 0x02, 0x0a, 0x12,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x69,
	0x6e, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63,
	0x62, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72,
	0x6f, 0x6f, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0xa4, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x41, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22,
	0x7b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x6b, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x7a, 0x6f,
	0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x76, 0x0a, 0x1e, 0x50, 0x75, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63,
	0x62, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x3b, 0x0a,
	0x1f, 0x50, 0x75, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x46, 0x0a, 0x21, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x73, 0x22, 0x3e, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2a, 0x63, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x57, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x49,
	0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x03,
	0x32, 0x88, 0x1f, 0x0a, 0x0b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x50, 0x49,
	0x12, 0xd5, 0x06, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x46, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e,
	0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x47, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x05, 0x92, 0x41, 0xe3, 0x04,
	0x12, 0x38, 0xd0, 0x9f, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x82,
	0xd1, 0x8c, 0x20, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd0, 0xb5, 0x20, 0xd1, 0x81, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbe,
	0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0x1a, 0xa6, 0x04, 0xd0, 0x9c, 0xd0,
	0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb4, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0,
	0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1,
	0x8f, 0x20, 0xd1, 0x81, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x87,
	0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1,
	0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb9, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f,
	0x20, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb1, 0xd1, 0x83, 0xd1, 0x82, 0xd0,
	0xbe, 0xd0, 0xb2, 0x2e, 0x20, 0xd0, 0x97, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd0,
	0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0x20, 0xd1, 0x83, 0xd0, 0xbc, 0xd0,
	0xbe, 0xd0, 0xbb, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8e, 0x3a, 0x20, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x20, 0x3d, 0x20, 0x31, 0x30, 0x2c, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x20, 0x3d, 0x20, 0x30, 0x2c, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0xd0, 0xbf, 0xd1,
	0x83, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb9, 0x2e, 0x20, 0x20, 0xd0, 0x95, 0xd1, 0x81,
	0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xbd, 0xd0, 0xb8, 0x20, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8,
	0xd0, 0xbd, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1,
	0x82, 0xd1, 0x80, 0x20, 0xd0, 0xbd, 0xd0, 0xb5, 0x20, 0xd1, 0x83, 0xd0, 0xba, 0xd0, 0xb0, 0xd0,
	0xb7, 0xd0, 0xb0, 0xd0, 0xbd, 0x2c, 0x20, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0,
	0xb4, 0xd1, 0x8f, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80,
	0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0x31, 0x30, 0x20, 0x20, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0,
	0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb9, 0x20, 0xd1, 0x81, 0xd0, 0xbf,
	0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba,
	0xd0, 0xb0, 0x2e, 0x20, 0xd0, 0x95, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xbd, 0xd0,
	0xb5, 0x20, 0xd1, 0x83, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbd, 0xd1, 0x8b,
	0x20, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe, 0x20, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x20, 0xd0, 0xb8, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2c, 0x20, 0xd0,
	0xb0, 0x20, 0xd0, 0xb2, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0xd0, 0xb5, 0xd1, 0x81, 0xd1,
	0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd,
	0xd0, 0xb8, 0xd0, 0xb5, 0x2c, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0,
	0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x8f, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xbf,
	0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0x31, 0x30, 0x20, 0xd0, 0xb7,
	0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb9, 0x2c, 0x20,
	0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81,
	0xd1, 0x82, 0xd0, 0xb2, 0xd1, 0x83, 0xd1, 0x8e, 0xd1, 0x89, 0xd0, 0xb8, 0xd1, 0x85, 0x20, 0xd1,
	0x82, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd1, 0x8f, 0xd0, 0xbc, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba,
	0xd0, 0xb0, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x7b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0xda, 0x05, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4b, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x04,
	0x92, 0x41, 0xf2, 0x03, 0x12, 0x3b, 0xd0, 0x9f, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87,
	0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
	0xb1, 0xd1, 0x83, 0xd1, 0x82, 0xd1, 0x8b, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0,
	0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
	0xb8, 0x1a, 0xb2, 0x03, 0xd0, 0x9c, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb4, 0x20, 0xd0,
	0xb2, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xb2, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x89, 0xd0, 0xb0, 0xd0,
	0xb5, 0xd1, 0x82, 0x20, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xba,
	0x20, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb1, 0xd1, 0x83, 0xd1, 0x82, 0xd0,
	0xbe, 0xd0, 0xb2, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1,
	0x82, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xb8,
	0x20, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0,
	0xb5, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xbb, 0x20, 0xd0,
	0xb2, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0,
	0xb8, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb6, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe,
	0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8f, 0x2e, 0x20, 0xd0, 0x95, 0xd1, 0x81, 0xd0,
	0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb5, 0x20, 0xd0, 0xb8, 0xd0,
	0xbc, 0xd0, 0xb5, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd1, 0x81, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0,
	0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb5, 0x20, 0xd0, 0xb7, 0xd0,
	0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x2c, 0x20, 0xd1,
	0x82, 0xd0, 0xbe, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb8,
	0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd1, 0x81, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0,
	0xbe, 0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xbf, 0xd0,
	0xbe, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xb7,
	0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0,
	0xbf, 0xd0, 0xbe, 0x20, 0xd1, 0x81, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbe,
	0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd1, 0x83, 0x20, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0,
	0xb6, 0xd0, 0xbd, 0xd0, 0xbe, 0x20, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb4,
	0xd0, 0xbe, 0xd0, 0xbc, 0x20, 0x47, 0x45, 0x54, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x7b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xe5, 0x04, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x54, 0x72, 0x65, 0x65, 0x12, 0x44, 0x2e, 0x6f, 0x7a,
	0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x45, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc2, 0x03, 0x92, 0x41, 0xa8, 0x03, 0x12,
	0x49, 0xd0, 0x9f, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x82, 0xd1,
	0x8c, 0x20, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xbe, 0x20, 0xd0,
	0xba, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x87, 0xd0, 0xb5, 0xd1,
	0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x85, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5,
	0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb9, 0x1a, 0xda, 0x02, 0xd0, 0x9c, 0xd0,
	0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb4, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0,
	0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1,
	0x8f, 0x20, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb0, 0x20, 0xd0,
	0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
	0xb9, 0x2e, 0x20, 0xd0, 0x95, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xbf, 0xd0, 0xb5,
	0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xbf, 0xd0,
	0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0x20, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2c, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0xd0, 0xb4, 0xd0,
	0xb5, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xbe, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe,
	0xd0, 0xb1, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb8, 0xd1, 0x82, 0x20, 0xd0, 0xb2, 0xd1,
	0x81, 0xd0, 0xb5, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe,
	0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0x2c, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe,
	0xd1, 0x80, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd0, 0xb2, 0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1,
	0x8f, 0xd1, 0x82, 0x20, 0xd0, 0xb2, 0x20, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1,
	0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0xd1, 0x81, 0xd0, 0xba, 0xd1, 0x83, 0xd1, 0x8e, 0x2e,
	0x20, 0xd0, 0x95, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd1, 0x83, 0x20, 0xd0, 0xba, 0xd0,
	0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xb5,
	0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xb5, 0xd1,
	0x80, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x2c, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0xd0, 0xbe,
	0xd0, 0xbd, 0xd0, 0xb8, 0x20, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb6, 0xd0, 0xb5, 0x20,
	0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd1, 0x8f,
	0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0xef, 0x02,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e,
	0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62,
	0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xba, 0x01, 0x92, 0x41, 0x87, 0x01, 0x12, 0x36, 0xd0, 0x9f, 0xd0, 0xbe, 0xd0,
	0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xbf, 0xd0, 0xb0,
	0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd1, 0x8b, 0x20, 0xd0,
	0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
	0xb9, 0x1a, 0x4d, 0xd0, 0x9c, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb4, 0x20, 0xd0, 0xbf,
	0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f,
	0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1,
	0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb3,
	0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0x20, 0x49, 0x44,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x8d, 0x05, 0x0a, 0x17, 0x50, 0x75, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x2e, 0x6f, 0x7a,
	0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f,
	0x63, 0x62, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd8, 0x03, 0x92, 0x41, 0xb0, 0x03, 0x12, 0x36, 0xd0, 0x9e, 0xd0,
	0xb1, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xbf,
	0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd1, 0x8b,
	0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0,
	0xb8, 0xd0, 0xb9, 0x1a, 0xf5, 0x02, 0xd0, 0x9c, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb4,
	0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0,
	0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb8,
	0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0,
	0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd1, 0x8b, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0,
	0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
	0xb9, 0x2e, 0x20, 0xd0, 0x95, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xbf, 0xd0, 0xb0,
	0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd1, 0x8b, 0x20, 0xd0,
	0xb7, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xb0, 0xd1, 0x8e, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20,
	0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0,
	0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80,
	0xd1, 0x85, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0x20, 0xd1, 0x83, 0xd1, 0x80, 0xd0,
	0xbe, 0xd0, 0xb2, 0xd0, 0xbd, 0xd1, 0x8f, 0x2c, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0xd0, 0xb2,
	0xd1, 0x81, 0xd0, 0xb5, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x80, 0xd0,
	0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5,
	0xd0, 0xb4, 0xd1, 0x83, 0xd1, 0x8e, 0xd1, 0x82, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0,
	0xb0, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd1, 0x8b, 0x2e, 0x20, 0xd0, 0x95, 0xd1,
	0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb9,
	0x20, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0xd0, 0xb8, 0xd0, 0xb7, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1,
	0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0x20,
	0xd0, 0xbd, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0,
	0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x2c, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0x20,
	0xd0, 0xbe, 0xd0, 0xbd, 0x20, 0xd0, 0xbd, 0xd0, 0xb5, 0x20, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd,
	0xd1, 0x8f, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x1a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0xd9, 0x05, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4d,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x04,
	0x92, 0x41, 0xf3, 0x03, 0x12, 0x34, 0xd0, 0xa3, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb8,
	0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0,
	0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd1, 0x8b, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5,
	0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb9, 0x1a, 0xba, 0x03, 0xd0, 0x9c, 0xd0,
	0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb4, 0x20, 0xd1, 0x81, 0xd0, 0xb1, 0xd1, 0x80, 0xd0, 0xbe,
	0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0,
	0xb0, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd1, 0x8b, 0x20, 0xd0, 0xb4, 0xd0, 0xbb,
	0xd1, 0x8f, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1,
	0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0x20, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1,
	0x84, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x82, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xb7,
	0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb9, 0x2e, 0x20,
	0xd0, 0x95, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd1, 0x81, 0xd0, 0xb1, 0xd1, 0x80, 0xd0,
	0xb0, 0xd1, 0x81, 0xd1, 0x8b, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x8e, 0xd1, 0x82, 0xd1, 0x81, 0xd1,
	0x8f, 0x20, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8,
	0xd1, 0x8f, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82,
	0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0x2c, 0x20, 0xd0, 0xba,
	0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd0,
	0xbe, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb6, 0xd0, 0xb8, 0xd1, 0x82, 0x20, 0xd0, 0xb4,
	0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0,
	0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
	0xb8, 0x2c, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2,
	0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x8f, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x2c, 0x20,
	0xd1, 0x87, 0xd1, 0x82, 0xd0, 0xbe, 0x20, 0xd1, 0x83, 0x20, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5,
	0xd1, 0x85, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd1, 0x85, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe,
	0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb9, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0,
	0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd1, 0x8b, 0x20, 0x3d, 0x20, 0xd1, 0x80, 0xd0, 0xb0,
	0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0xd1, 0x81,
	0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb9, 0x2c, 0x20, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87,
	0xd0, 0xb5, 0x20, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb4, 0x20, 0xd0, 0xbe,
	0xd1, 0x82, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xbe, 0xd1, 0x88, 0xd0,
	0xb8, 0xd0, 0xb1, 0xd0, 0xba, 0xd1, 0x83, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x19, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x9a, 0x01, 0x5a, 0x30,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x75, 0x2f, 0x6f,
	0x63, 0x62, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x92, 0x41, 0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x4c, 0x41, 0x50, 0x49, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xbf,
	0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f,
	0x20, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1,
	0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0x20, 0xd0, 0xba, 0xd0, 0xb0, 0xd1,
	0x82, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xbc, 0x32,
	0x03, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x02, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescOnce sync.Once
	file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescData = file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDesc
)

func file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescGZIP() []byte {
	file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescOnce.Do(func() {
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescData)
	})
	return file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDescData
}

var file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_goTypes = []interface{}{
	(ErrorCode)(0),                             // 0: dg.ocb.categories.api.api.pkg.categories.ErrorCode
	(Priority)(0),                              // 1: dg.ocb.categories.api.api.pkg.categories.Priority
	(*ValidationError)(nil),                    // 2: dg.ocb.categories.api.api.pkg.categories.ValidationError
	(*ErrorContext)(nil),                       // 3: dg.ocb.categories.api.api.pkg.categories.ErrorContext
	(*Error)(nil),                              // 4: dg.ocb.categories.api.api.pkg.categories.Error
	(*AttributeDescription)(nil),               // 5: dg.ocb.categories.api.api.pkg.categories.AttributeDescription
	(*AttributeDictionaryValue)(nil),           // 6: dg.ocb.categories.api.api.pkg.categories.AttributeDictionaryValue
	(*Category)(nil),                           // 7: dg.ocb.categories.api.api.pkg.categories.Category
	(*CategoryParameters)(nil),                 // 8: dg.ocb.categories.api.api.pkg.categories.CategoryParameters
	(*GetAttributesValuesRequest)(nil),         // 9: dg.ocb.categories.api.api.pkg.categories.GetAttributesValuesRequest
	(*GetAttributesValuesResponse)(nil),        // 10: dg.ocb.categories.api.api.pkg.categories.GetAttributesValuesResponse
	(*GetCategoriesAttributesRequest)(nil),     // 11: dg.ocb.categories.api.api.pkg.categories.GetCategoriesAttributesRequest
	(*GetCategoriesAttributesResponse)(nil),    // 12: dg.ocb.categories.api.api.pkg.categories.GetCategoriesAttributesResponse
	(*GetCategoriesTreeRequest)(nil),           // 13: dg.ocb.categories.api.api.pkg.categories.GetCategoriesTreeRequest
	(*GetCategoriesTreeResponse)(nil),          // 14: dg.ocb.categories.api.api.pkg.categories.GetCategoriesTreeResponse
	(*GetCategoriesParametersRequest)(nil),     // 15: dg.ocb.categories.api.api.pkg.categories.GetCategoriesParametersRequest
	(*GetCategoriesParametersResponse)(nil),    // 16: dg.ocb.categories.api.api.pkg.categories.GetCategoriesParametersResponse
	(*PutCategoriesParametersRequest)(nil),     // 17: dg.ocb.categories.api.api.pkg.categories.PutCategoriesParametersRequest
	(*PutCategoriesParametersResponse)(nil),    // 18: dg.ocb.categories.api.api.pkg.categories.PutCategoriesParametersResponse
	(*DeleteCategoriesParametersRequest)(nil),  // 19: dg.ocb.categories.api.api.pkg.categories.DeleteCategoriesParametersRequest
	(*DeleteCategoriesParametersResponse)(nil), // 20: dg.ocb.categories.api.api.pkg.categories.DeleteCategoriesParametersResponse
	(*wrapperspb.Int64Value)(nil),              // 21: google.protobuf.Int64Value
}
var file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_depIdxs = []int32{
	2,  // 0: dg.ocb.categories.api.api.pkg.categories.ErrorContext.validation_error:type_name -> dg.ocb.categories.api.api.pkg.categories.ValidationError
	0,  // 1: dg.ocb.categories.api.api.pkg.categories.Error.code:type_name -> dg.ocb.categories.api.api.pkg.categories.ErrorCode
	3,  // 2: dg.ocb.categories.api.api.pkg.categories.Error.context:type_name -> dg.ocb.categories.api.api.pkg.categories.ErrorContext
	4,  // 3: dg.ocb.categories.api.api.pkg.categories.Error.errors:type_name -> dg.ocb.categories.api.api.pkg.categories.Error
	1,  // 4: dg.ocb.categories.api.api.pkg.categories.Category.priority:type_name -> dg.ocb.categories.api.api.pkg.categories.Priority
	7,  // 5: dg.ocb.categories.api.api.pkg.categories.Category.children:type_name -> dg.ocb.categories.api.api.pkg.categories.Category
	21, // 6: dg.ocb.categories.api.api.pkg.categories.CategoryParameters.min_fulfillment:type_name -> google.protobuf.Int64Value
	1,  // 7: dg.ocb.categories.api.api.pkg.categories.CategoryParameters.priority:type_name -> dg.ocb.categories.api.api.pkg.categories.Priority
	6,  // 8: dg.ocb.categories.api.api.pkg.categories.GetAttributesValuesResponse.items:type_name -> dg.ocb.categories.api.api.pkg.categories.AttributeDictionaryValue
	5,  // 9: dg.ocb.categories.api.api.pkg.categories.GetCategoriesAttributesResponse.attributes:type_name -> dg.ocb.categories.api.api.pkg.categories.AttributeDescription
	7,  // 10: dg.ocb.categories.api.api.pkg.categories.GetCategoriesTreeResponse.results:type_name -> dg.ocb.categories.api.api.pkg.categories.Category
	8,  // 11: dg.ocb.categories.api.api.pkg.categories.GetCategoriesParametersResponse.items:type_name -> dg.ocb.categories.api.api.pkg.categories.CategoryParameters
	8,  // 12: dg.ocb.categories.api.api.pkg.categories.PutCategoriesParametersRequest.items:type_name -> dg.ocb.categories.api.api.pkg.categories.CategoryParameters
	9,  // 13: dg.ocb.categories.api.api.pkg.categories.CategoryAPI.GetAttributesValues:input_type -> dg.ocb.categories.api.api.pkg.categories.GetAttributesValuesRequest
	11, // 14: dg.ocb.categories.api.api.pkg.categories.CategoryAPI.GetCategoriesAttributes:input_type -> dg.ocb.categories.api.api.pkg.categories.GetCategoriesAttributesRequest
	13, // 15: dg.ocb.categories.api.api.pkg.categories.CategoryAPI.GetCategoriesTree:input_type -> dg.ocb.categories.api.api.pkg.categories.GetCategoriesTreeRequest
	15, // 16: dg.ocb.categories.api.api.pkg.categories.CategoryAPI.GetCategoriesParameters:input_type -> dg.ocb.categories.api.api.pkg.categories.GetCategoriesParametersRequest
	17, // 17: dg.ocb.categories.api.api.pkg.categories.CategoryAPI.PutCategoriesParameters:input_type -> dg.ocb.categories.api.api.pkg.categories.PutCategoriesParametersRequest
	19, // 18: dg.ocb.categories.api.api.pkg.categories.CategoryAPI.DeleteCategoriesParameters:input_type -> dg.ocb.categories.api.api.pkg.categories.DeleteCategoriesParametersRequest
	10, // 19: dg.ocb.categories.api.api.pkg.categories.CategoryAPI.GetAttributesValues:output_type -> dg.ocb.categories.api.api.pkg.categories.GetAttributesValuesResponse
	12, // 20: dg.ocb.categories.api.api.pkg.categories.CategoryAPI.GetCategoriesAttributes:output_type -> dg.ocb.categories.api.api.pkg.categories.GetCategoriesAttributesResponse
	14, // 21: dg.ocb.categories.api.api.pkg.categories.CategoryAPI.GetCategoriesTree:output_type -> dg.ocb.categories.api.api.pkg.categories.GetCategoriesTreeResponse
	16, // 22: dg.ocb.categories.api.api.pkg.categories.CategoryAPI.GetCategoriesParameters:output_type -> dg.ocb.categories.api.api.pkg.categories.GetCategoriesParametersResponse
	18, // 23: dg.ocb.categories.api.api.pkg.categories.CategoryAPI.PutCategoriesParameters:output_type -> dg.ocb.categories.api.api.pkg.categories.PutCategoriesParametersResponse
	20, // 24: dg.ocb.categories.api.api.pkg.categories.CategoryAPI.DeleteCategoriesParameters:output_type -> dg.ocb.categories.api.api.pkg.categories.DeleteCategoriesParametersResponse
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_init() }
func file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_init() {
	if File_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeDictionaryValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttributesValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAttributesValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoriesAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoriesAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoriesTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoriesTreeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoriesParametersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoriesParametersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutCategoriesParametersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutCategoriesParametersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCategoriesParametersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCategoriesParametersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ErrorContext_ValidationError)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_goTypes,
		DependencyIndexes: file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_depIdxs,
		EnumInfos:         file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_enumTypes,
		MessageInfos:      file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_msgTypes,
	}.Build()
	File_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto = out.File
	file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_rawDesc = nil
	file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_goTypes = nil
	file_gitlab_dg_ru_ocb_categories_api_api_categories_categories_proto_depIdxs = nil
}
