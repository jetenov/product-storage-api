// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package categories

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CategoryAPIClient is the client API for CategoryAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryAPIClient interface {
	GetAttributesValues(ctx context.Context, in *GetAttributesValuesRequest, opts ...grpc.CallOption) (*GetAttributesValuesResponse, error)
	GetCategoriesAttributes(ctx context.Context, in *GetCategoriesAttributesRequest, opts ...grpc.CallOption) (*GetCategoriesAttributesResponse, error)
	GetCategoriesTree(ctx context.Context, in *GetCategoriesTreeRequest, opts ...grpc.CallOption) (*GetCategoriesTreeResponse, error)
	GetCategoriesParameters(ctx context.Context, in *GetCategoriesParametersRequest, opts ...grpc.CallOption) (*GetCategoriesParametersResponse, error)
	PutCategoriesParameters(ctx context.Context, in *PutCategoriesParametersRequest, opts ...grpc.CallOption) (*PutCategoriesParametersResponse, error)
	DeleteCategoriesParameters(ctx context.Context, in *DeleteCategoriesParametersRequest, opts ...grpc.CallOption) (*DeleteCategoriesParametersResponse, error)
}

type categoryAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryAPIClient(cc grpc.ClientConnInterface) CategoryAPIClient {
	return &categoryAPIClient{cc}
}

func (c *categoryAPIClient) GetAttributesValues(ctx context.Context, in *GetAttributesValuesRequest, opts ...grpc.CallOption) (*GetAttributesValuesResponse, error) {
	out := new(GetAttributesValuesResponse)
	err := c.cc.Invoke(ctx, "/dg.ocb.categories.api.api.pkg.categories.CategoryAPI/GetAttributesValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryAPIClient) GetCategoriesAttributes(ctx context.Context, in *GetCategoriesAttributesRequest, opts ...grpc.CallOption) (*GetCategoriesAttributesResponse, error) {
	out := new(GetCategoriesAttributesResponse)
	err := c.cc.Invoke(ctx, "/dg.ocb.categories.api.api.pkg.categories.CategoryAPI/GetCategoriesAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryAPIClient) GetCategoriesTree(ctx context.Context, in *GetCategoriesTreeRequest, opts ...grpc.CallOption) (*GetCategoriesTreeResponse, error) {
	out := new(GetCategoriesTreeResponse)
	err := c.cc.Invoke(ctx, "/dg.ocb.categories.api.api.pkg.categories.CategoryAPI/GetCategoriesTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryAPIClient) GetCategoriesParameters(ctx context.Context, in *GetCategoriesParametersRequest, opts ...grpc.CallOption) (*GetCategoriesParametersResponse, error) {
	out := new(GetCategoriesParametersResponse)
	err := c.cc.Invoke(ctx, "/dg.ocb.categories.api.api.pkg.categories.CategoryAPI/GetCategoriesParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryAPIClient) PutCategoriesParameters(ctx context.Context, in *PutCategoriesParametersRequest, opts ...grpc.CallOption) (*PutCategoriesParametersResponse, error) {
	out := new(PutCategoriesParametersResponse)
	err := c.cc.Invoke(ctx, "/dg.ocb.categories.api.api.pkg.categories.CategoryAPI/PutCategoriesParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryAPIClient) DeleteCategoriesParameters(ctx context.Context, in *DeleteCategoriesParametersRequest, opts ...grpc.CallOption) (*DeleteCategoriesParametersResponse, error) {
	out := new(DeleteCategoriesParametersResponse)
	err := c.cc.Invoke(ctx, "/dg.ocb.categories.api.api.pkg.categories.CategoryAPI/DeleteCategoriesParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryAPIServer is the server API for CategoryAPI service.
// All implementations must embed UnimplementedCategoryAPIServer
// for forward compatibility
type CategoryAPIServer interface {
	GetAttributesValues(context.Context, *GetAttributesValuesRequest) (*GetAttributesValuesResponse, error)
	GetCategoriesAttributes(context.Context, *GetCategoriesAttributesRequest) (*GetCategoriesAttributesResponse, error)
	GetCategoriesTree(context.Context, *GetCategoriesTreeRequest) (*GetCategoriesTreeResponse, error)
	GetCategoriesParameters(context.Context, *GetCategoriesParametersRequest) (*GetCategoriesParametersResponse, error)
	PutCategoriesParameters(context.Context, *PutCategoriesParametersRequest) (*PutCategoriesParametersResponse, error)
	DeleteCategoriesParameters(context.Context, *DeleteCategoriesParametersRequest) (*DeleteCategoriesParametersResponse, error)
	mustEmbedUnimplementedCategoryAPIServer()
}

// UnimplementedCategoryAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCategoryAPIServer struct {
}

func (UnimplementedCategoryAPIServer) GetAttributesValues(context.Context, *GetAttributesValuesRequest) (*GetAttributesValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttributesValues not implemented")
}
func (UnimplementedCategoryAPIServer) GetCategoriesAttributes(context.Context, *GetCategoriesAttributesRequest) (*GetCategoriesAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoriesAttributes not implemented")
}
func (UnimplementedCategoryAPIServer) GetCategoriesTree(context.Context, *GetCategoriesTreeRequest) (*GetCategoriesTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoriesTree not implemented")
}
func (UnimplementedCategoryAPIServer) GetCategoriesParameters(context.Context, *GetCategoriesParametersRequest) (*GetCategoriesParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoriesParameters not implemented")
}
func (UnimplementedCategoryAPIServer) PutCategoriesParameters(context.Context, *PutCategoriesParametersRequest) (*PutCategoriesParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCategoriesParameters not implemented")
}
func (UnimplementedCategoryAPIServer) DeleteCategoriesParameters(context.Context, *DeleteCategoriesParametersRequest) (*DeleteCategoriesParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategoriesParameters not implemented")
}
func (UnimplementedCategoryAPIServer) mustEmbedUnimplementedCategoryAPIServer() {}

// UnsafeCategoryAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryAPIServer will
// result in compilation errors.
type UnsafeCategoryAPIServer interface {
	mustEmbedUnimplementedCategoryAPIServer()
}

func RegisterCategoryAPIServer(s grpc.ServiceRegistrar, srv CategoryAPIServer) {
	s.RegisterService(&CategoryAPI_ServiceDesc, srv)
}

func _CategoryAPI_GetAttributesValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttributesValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryAPIServer).GetAttributesValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.ocb.categories.api.api.pkg.categories.CategoryAPI/GetAttributesValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryAPIServer).GetAttributesValues(ctx, req.(*GetAttributesValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryAPI_GetCategoriesAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryAPIServer).GetCategoriesAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.ocb.categories.api.api.pkg.categories.CategoryAPI/GetCategoriesAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryAPIServer).GetCategoriesAttributes(ctx, req.(*GetCategoriesAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryAPI_GetCategoriesTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryAPIServer).GetCategoriesTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.ocb.categories.api.api.pkg.categories.CategoryAPI/GetCategoriesTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryAPIServer).GetCategoriesTree(ctx, req.(*GetCategoriesTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryAPI_GetCategoriesParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryAPIServer).GetCategoriesParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.ocb.categories.api.api.pkg.categories.CategoryAPI/GetCategoriesParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryAPIServer).GetCategoriesParameters(ctx, req.(*GetCategoriesParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryAPI_PutCategoriesParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutCategoriesParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryAPIServer).PutCategoriesParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.ocb.categories.api.api.pkg.categories.CategoryAPI/PutCategoriesParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryAPIServer).PutCategoriesParameters(ctx, req.(*PutCategoriesParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryAPI_DeleteCategoriesParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoriesParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryAPIServer).DeleteCategoriesParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.ocb.categories.api.api.pkg.categories.CategoryAPI/DeleteCategoriesParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryAPIServer).DeleteCategoriesParameters(ctx, req.(*DeleteCategoriesParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryAPI_ServiceDesc is the grpc.ServiceDesc for CategoryAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dg.ocb.categories.api.api.pkg.categories.CategoryAPI",
	HandlerType: (*CategoryAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAttributesValues",
			Handler:    _CategoryAPI_GetAttributesValues_Handler,
		},
		{
			MethodName: "GetCategoriesAttributes",
			Handler:    _CategoryAPI_GetCategoriesAttributes_Handler,
		},
		{
			MethodName: "GetCategoriesTree",
			Handler:    _CategoryAPI_GetCategoriesTree_Handler,
		},
		{
			MethodName: "GetCategoriesParameters",
			Handler:    _CategoryAPI_GetCategoriesParameters_Handler,
		},
		{
			MethodName: "PutCategoriesParameters",
			Handler:    _CategoryAPI_PutCategoriesParameters_Handler,
		},
		{
			MethodName: "DeleteCategoriesParameters",
			Handler:    _CategoryAPI_DeleteCategoriesParameters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.dg.ru/ocb/categories/api/api/categories/categories.proto",
}
