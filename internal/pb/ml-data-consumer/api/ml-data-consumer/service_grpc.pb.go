// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package competitor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompetitorAPIClient is the client API for CompetitorAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompetitorAPIClient interface {
	GetCompetitorProducts(ctx context.Context, in *GetCompetitorProductsRequest, opts ...grpc.CallOption) (*GetCompetitorProductsResponse, error)
}

type competitorAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCompetitorAPIClient(cc grpc.ClientConnInterface) CompetitorAPIClient {
	return &competitorAPIClient{cc}
}

func (c *competitorAPIClient) GetCompetitorProducts(ctx context.Context, in *GetCompetitorProductsRequest, opts ...grpc.CallOption) (*GetCompetitorProductsResponse, error) {
	out := new(GetCompetitorProductsResponse)
	err := c.cc.Invoke(ctx, "/dg.ocb.product_creation.ml_data_consumer.pkg.competitor.CompetitorAPI/GetCompetitorProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompetitorAPIServer is the server API for CompetitorAPI service.
// All implementations must embed UnimplementedCompetitorAPIServer
// for forward compatibility
type CompetitorAPIServer interface {
	GetCompetitorProducts(context.Context, *GetCompetitorProductsRequest) (*GetCompetitorProductsResponse, error)
	mustEmbedUnimplementedCompetitorAPIServer()
}

// UnimplementedCompetitorAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCompetitorAPIServer struct {
}

func (UnimplementedCompetitorAPIServer) GetCompetitorProducts(context.Context, *GetCompetitorProductsRequest) (*GetCompetitorProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompetitorProducts not implemented")
}
func (UnimplementedCompetitorAPIServer) mustEmbedUnimplementedCompetitorAPIServer() {}

// UnsafeCompetitorAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompetitorAPIServer will
// result in compilation errors.
type UnsafeCompetitorAPIServer interface {
	mustEmbedUnimplementedCompetitorAPIServer()
}

func RegisterCompetitorAPIServer(s grpc.ServiceRegistrar, srv CompetitorAPIServer) {
	s.RegisterService(&CompetitorAPI_ServiceDesc, srv)
}

func _CompetitorAPI_GetCompetitorProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompetitorProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitorAPIServer).GetCompetitorProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dg.ocb.product_creation.ml_data_consumer.pkg.competitor.CompetitorAPI/GetCompetitorProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitorAPIServer).GetCompetitorProducts(ctx, req.(*GetCompetitorProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompetitorAPI_ServiceDesc is the grpc.ServiceDesc for CompetitorAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompetitorAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dg.ocb.product_creation.ml_data_consumer.pkg.competitor.CompetitorAPI",
	HandlerType: (*CompetitorAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompetitorProducts",
			Handler:    _CompetitorAPI_GetCompetitorProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitlab.dg.ru/ocb/product-creation/ml-data-consumer/api/ml-data-consumer/service.proto",
}
