// Code generated by "esc -o swagger.go -pkg product -modtime 0 product.swagger.json"; DO NOT EDIT.

package product

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	fmt "fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/product.swagger.json": {
		name:    "product.swagger.json",
		local:   "product.swagger.json",
		size:    19785,
		modtime: 0,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
