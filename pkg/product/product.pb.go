// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.1
// source: gitlab.dg.ru/ocb/product-creation/product-storage-api/api/product/product.proto

package product

import (
	ml_data_consumer "gitlab.dg.ru/ocb/product-creation/product-storage-api/internal/pb/ml-data-consumer/api/ml-data-consumer"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ComplexId int64              `protobuf:"varint,3,opt,name=complex_id,json=complexId,proto3" json:"complex_id,omitempty"`
	Values    []*Attribute_Value `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{0}
}

func (x *Attribute) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attribute) GetComplexId() int64 {
	if x != nil {
		return x.ComplexId
	}
	return 0
}

func (x *Attribute) GetValues() []*Attribute_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url     string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	CephUrl string `protobuf:"bytes,2,opt,name=ceph_url,json=cephUrl,proto3" json:"ceph_url,omitempty"`
	IsMain  bool   `protobuf:"varint,3,opt,name=is_main,json=isMain,proto3" json:"is_main,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{1}
}

func (x *Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Image) GetCephUrl() string {
	if x != nil {
		return x.CephUrl
	}
	return ""
}

func (x *Image) GetIsMain() bool {
	if x != nil {
		return x.IsMain
	}
	return false
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute   string `protobuf:"bytes,1,opt,name=attribute,proto3" json:"attribute,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetAttribute() string {
	if x != nil {
		return x.Attribute
	}
	return ""
}

func (x *Error) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ProductToCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attributes            []*Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Name                  string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description           string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Barcode               string       `protobuf:"bytes,5,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Vat                   int64        `protobuf:"varint,6,opt,name=vat,proto3" json:"vat,omitempty"`
	Price                 int64        `protobuf:"varint,7,opt,name=price,proto3" json:"price,omitempty"`
	Images                []*Image     `protobuf:"bytes,8,rep,name=images,proto3" json:"images,omitempty"`
	Depth                 int64        `protobuf:"varint,9,opt,name=depth,proto3" json:"depth,omitempty"`
	Weight                int64        `protobuf:"varint,10,opt,name=weight,proto3" json:"weight,omitempty"`
	Height                int64        `protobuf:"varint,11,opt,name=height,proto3" json:"height,omitempty"`
	Width                 int64        `protobuf:"varint,12,opt,name=width,proto3" json:"width,omitempty"`
	CommercialCategoryId  int64        `protobuf:"varint,13,opt,name=commercial_category_id,json=commercialCategoryId,proto3" json:"commercial_category_id,omitempty"`
	DescriptionCategoryId int64        `protobuf:"varint,14,opt,name=description_category_id,json=descriptionCategoryId,proto3" json:"description_category_id,omitempty"`
}

func (x *ProductToCreate) Reset() {
	*x = ProductToCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductToCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductToCreate) ProtoMessage() {}

func (x *ProductToCreate) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductToCreate.ProtoReflect.Descriptor instead.
func (*ProductToCreate) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{3}
}

func (x *ProductToCreate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductToCreate) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ProductToCreate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductToCreate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductToCreate) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *ProductToCreate) GetVat() int64 {
	if x != nil {
		return x.Vat
	}
	return 0
}

func (x *ProductToCreate) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductToCreate) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ProductToCreate) GetDepth() int64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *ProductToCreate) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ProductToCreate) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ProductToCreate) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ProductToCreate) GetCommercialCategoryId() int64 {
	if x != nil {
		return x.CommercialCategoryId
	}
	return 0
}

func (x *ProductToCreate) GetDescriptionCategoryId() int64 {
	if x != nil {
		return x.DescriptionCategoryId
	}
	return 0
}

type ProductToCorrect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attributes            []*Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Name                  string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description           string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Barcode               string       `protobuf:"bytes,5,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Vat                   int64        `protobuf:"varint,6,opt,name=vat,proto3" json:"vat,omitempty"`
	Price                 int64        `protobuf:"varint,7,opt,name=price,proto3" json:"price,omitempty"`
	Images                []*Image     `protobuf:"bytes,8,rep,name=images,proto3" json:"images,omitempty"`
	Depth                 int64        `protobuf:"varint,9,opt,name=depth,proto3" json:"depth,omitempty"`
	Weight                int64        `protobuf:"varint,10,opt,name=weight,proto3" json:"weight,omitempty"`
	Height                int64        `protobuf:"varint,11,opt,name=height,proto3" json:"height,omitempty"`
	Width                 int64        `protobuf:"varint,12,opt,name=width,proto3" json:"width,omitempty"`
	CommercialCategoryId  int64        `protobuf:"varint,13,opt,name=commercial_category_id,json=commercialCategoryId,proto3" json:"commercial_category_id,omitempty"`
	DescriptionCategoryId int64        `protobuf:"varint,14,opt,name=description_category_id,json=descriptionCategoryId,proto3" json:"description_category_id,omitempty"`
	Errors                []*Error     `protobuf:"bytes,15,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ProductToCorrect) Reset() {
	*x = ProductToCorrect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductToCorrect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductToCorrect) ProtoMessage() {}

func (x *ProductToCorrect) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductToCorrect.ProtoReflect.Descriptor instead.
func (*ProductToCorrect) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{4}
}

func (x *ProductToCorrect) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductToCorrect) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ProductToCorrect) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductToCorrect) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductToCorrect) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *ProductToCorrect) GetVat() int64 {
	if x != nil {
		return x.Vat
	}
	return 0
}

func (x *ProductToCorrect) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductToCorrect) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ProductToCorrect) GetDepth() int64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *ProductToCorrect) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ProductToCorrect) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ProductToCorrect) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ProductToCorrect) GetCommercialCategoryId() int64 {
	if x != nil {
		return x.CommercialCategoryId
	}
	return 0
}

func (x *ProductToCorrect) GetDescriptionCategoryId() int64 {
	if x != nil {
		return x.DescriptionCategoryId
	}
	return 0
}

func (x *ProductToCorrect) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ProductToFill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fulfillment        int64  `protobuf:"varint,2,opt,name=fulfillment,proto3" json:"fulfillment,omitempty"`
	RootCategoryId     int64  `protobuf:"varint,3,opt,name=root_category_id,json=rootCategoryId,proto3" json:"root_category_id,omitempty"`
	PriorityCategoryId int64  `protobuf:"varint,4,opt,name=priority_category_id,json=priorityCategoryId,proto3" json:"priority_category_id,omitempty"`
}

func (x *ProductToFill) Reset() {
	*x = ProductToFill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductToFill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductToFill) ProtoMessage() {}

func (x *ProductToFill) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductToFill.ProtoReflect.Descriptor instead.
func (*ProductToFill) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{5}
}

func (x *ProductToFill) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductToFill) GetFulfillment() int64 {
	if x != nil {
		return x.Fulfillment
	}
	return 0
}

func (x *ProductToFill) GetRootCategoryId() int64 {
	if x != nil {
		return x.RootCategoryId
	}
	return 0
}

func (x *ProductToFill) GetPriorityCategoryId() int64 {
	if x != nil {
		return x.PriorityCategoryId
	}
	return 0
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attributes            []*Attribute                          `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Name                  string                                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description           string                                `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Barcode               string                                `protobuf:"bytes,5,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Vat                   int64                                 `protobuf:"varint,6,opt,name=vat,proto3" json:"vat,omitempty"`
	Price                 int64                                 `protobuf:"varint,7,opt,name=price,proto3" json:"price,omitempty"`
	Images                []*Image                              `protobuf:"bytes,8,rep,name=images,proto3" json:"images,omitempty"`
	Depth                 int64                                 `protobuf:"varint,9,opt,name=depth,proto3" json:"depth,omitempty"`
	Weight                int64                                 `protobuf:"varint,10,opt,name=weight,proto3" json:"weight,omitempty"`
	Height                int64                                 `protobuf:"varint,11,opt,name=height,proto3" json:"height,omitempty"`
	Width                 int64                                 `protobuf:"varint,12,opt,name=width,proto3" json:"width,omitempty"`
	CommercialCategoryId  int64                                 `protobuf:"varint,13,opt,name=commercial_category_id,json=commercialCategoryId,proto3" json:"commercial_category_id,omitempty"`
	DescriptionCategoryId int64                                 `protobuf:"varint,14,opt,name=description_category_id,json=descriptionCategoryId,proto3" json:"description_category_id,omitempty"`
	State                 string                                `protobuf:"bytes,15,opt,name=state,proto3" json:"state,omitempty"`
	Fulfillment           int64                                 `protobuf:"varint,16,opt,name=fulfillment,proto3" json:"fulfillment,omitempty"`
	Meta                  map[string]*anypb.Any                 `protobuf:"bytes,17,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreatedAt             *timestamppb.Timestamp                `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             *timestamppb.Timestamp                `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CompetitorProducts    []*ml_data_consumer.CompetitorProduct `protobuf:"bytes,20,rep,name=competitor_products,json=competitorProducts,proto3" json:"competitor_products,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{6}
}

func (x *Product) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Product) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *Product) GetVat() int64 {
	if x != nil {
		return x.Vat
	}
	return 0
}

func (x *Product) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Product) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *Product) GetDepth() int64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *Product) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Product) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Product) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Product) GetCommercialCategoryId() int64 {
	if x != nil {
		return x.CommercialCategoryId
	}
	return 0
}

func (x *Product) GetDescriptionCategoryId() int64 {
	if x != nil {
		return x.DescriptionCategoryId
	}
	return 0
}

func (x *Product) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Product) GetFulfillment() int64 {
	if x != nil {
		return x.Fulfillment
	}
	return 0
}

func (x *Product) GetMeta() map[string]*anypb.Any {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Product) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Product) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Product) GetCompetitorProducts() []*ml_data_consumer.CompetitorProduct {
	if x != nil {
		return x.CompetitorProducts
	}
	return nil
}

type ProductForUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attributes           []*Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Name                 string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description          string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Barcode              string       `protobuf:"bytes,5,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Vat                  int64        `protobuf:"varint,6,opt,name=vat,proto3" json:"vat,omitempty"`
	Price                int64        `protobuf:"varint,7,opt,name=price,proto3" json:"price,omitempty"`
	Images               []*Image     `protobuf:"bytes,8,rep,name=images,proto3" json:"images,omitempty"`
	Depth                int64        `protobuf:"varint,9,opt,name=depth,proto3" json:"depth,omitempty"`
	Weight               int64        `protobuf:"varint,10,opt,name=weight,proto3" json:"weight,omitempty"`
	Height               int64        `protobuf:"varint,11,opt,name=height,proto3" json:"height,omitempty"`
	Width                int64        `protobuf:"varint,12,opt,name=width,proto3" json:"width,omitempty"`
	CommercialCategoryId int64        `protobuf:"varint,13,opt,name=commercial_category_id,json=commercialCategoryId,proto3" json:"commercial_category_id,omitempty"`
}

func (x *ProductForUpdate) Reset() {
	*x = ProductForUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductForUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductForUpdate) ProtoMessage() {}

func (x *ProductForUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductForUpdate.ProtoReflect.Descriptor instead.
func (*ProductForUpdate) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{7}
}

func (x *ProductForUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductForUpdate) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ProductForUpdate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductForUpdate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductForUpdate) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *ProductForUpdate) GetVat() int64 {
	if x != nil {
		return x.Vat
	}
	return 0
}

func (x *ProductForUpdate) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductForUpdate) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ProductForUpdate) GetDepth() int64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *ProductForUpdate) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ProductForUpdate) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ProductForUpdate) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ProductForUpdate) GetCommercialCategoryId() int64 {
	if x != nil {
		return x.CommercialCategoryId
	}
	return 0
}

type Seller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Ogrn  string `protobuf:"bytes,2,opt,name=ogrn,proto3" json:"ogrn,omitempty"`
}

func (x *Seller) Reset() {
	*x = Seller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Seller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Seller) ProtoMessage() {}

func (x *Seller) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Seller.ProtoReflect.Descriptor instead.
func (*Seller) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{8}
}

func (x *Seller) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Seller) GetOgrn() string {
	if x != nil {
		return x.Ogrn
	}
	return ""
}

type Sellers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sellers []*Seller `protobuf:"bytes,1,rep,name=sellers,proto3" json:"sellers,omitempty"`
}

func (x *Sellers) Reset() {
	*x = Sellers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sellers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sellers) ProtoMessage() {}

func (x *Sellers) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sellers.ProtoReflect.Descriptor instead.
func (*Sellers) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{9}
}

func (x *Sellers) GetSellers() []*Seller {
	if x != nil {
		return x.Sellers
	}
	return nil
}

type Brand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Brand) Reset() {
	*x = Brand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Brand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Brand) ProtoMessage() {}

func (x *Brand) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Brand.ProtoReflect.Descriptor instead.
func (*Brand) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{10}
}

func (x *Brand) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type ProductForCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attributes            []*Attribute          `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Name                  string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description           string                `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Barcode               string                `protobuf:"bytes,5,opt,name=barcode,proto3" json:"barcode,omitempty"`
	Vat                   int64                 `protobuf:"varint,6,opt,name=vat,proto3" json:"vat,omitempty"`
	Price                 int64                 `protobuf:"varint,7,opt,name=price,proto3" json:"price,omitempty"`
	Images                []*Image              `protobuf:"bytes,8,rep,name=images,proto3" json:"images,omitempty"`
	Depth                 int64                 `protobuf:"varint,9,opt,name=depth,proto3" json:"depth,omitempty"`
	Weight                int64                 `protobuf:"varint,10,opt,name=weight,proto3" json:"weight,omitempty"`
	Height                int64                 `protobuf:"varint,11,opt,name=height,proto3" json:"height,omitempty"`
	Width                 int64                 `protobuf:"varint,12,opt,name=width,proto3" json:"width,omitempty"`
	CommercialCategoryId  int64                 `protobuf:"varint,13,opt,name=commercial_category_id,json=commercialCategoryId,proto3" json:"commercial_category_id,omitempty"`
	DescriptionCategoryId int64                 `protobuf:"varint,14,opt,name=description_category_id,json=descriptionCategoryId,proto3" json:"description_category_id,omitempty"`
	CanonicalIds          []string              `protobuf:"bytes,15,rep,name=canonical_ids,json=canonicalIds,proto3" json:"canonical_ids,omitempty"`
	Meta                  map[string]*anypb.Any `protobuf:"bytes,16,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProductForCreate) Reset() {
	*x = ProductForCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductForCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductForCreate) ProtoMessage() {}

func (x *ProductForCreate) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductForCreate.ProtoReflect.Descriptor instead.
func (*ProductForCreate) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{11}
}

func (x *ProductForCreate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductForCreate) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ProductForCreate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductForCreate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductForCreate) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *ProductForCreate) GetVat() int64 {
	if x != nil {
		return x.Vat
	}
	return 0
}

func (x *ProductForCreate) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductForCreate) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ProductForCreate) GetDepth() int64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *ProductForCreate) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ProductForCreate) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ProductForCreate) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ProductForCreate) GetCommercialCategoryId() int64 {
	if x != nil {
		return x.CommercialCategoryId
	}
	return 0
}

func (x *ProductForCreate) GetDescriptionCategoryId() int64 {
	if x != nil {
		return x.DescriptionCategoryId
	}
	return 0
}

func (x *ProductForCreate) GetCanonicalIds() []string {
	if x != nil {
		return x.CanonicalIds
	}
	return nil
}

func (x *ProductForCreate) GetMeta() map[string]*anypb.Any {
	if x != nil {
		return x.Meta
	}
	return nil
}

type MetricsProductUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Fulfillment          int64                  `protobuf:"varint,3,opt,name=fulfillment,proto3" json:"fulfillment,omitempty"`
	Brand                string                 `protobuf:"bytes,4,opt,name=brand,proto3" json:"brand,omitempty"`
	Barcode              string                 `protobuf:"bytes,5,opt,name=barcode,proto3" json:"barcode,omitempty"`
	CommercialCategoryId int64                  `protobuf:"varint,6,opt,name=commercial_category_id,json=commercialCategoryId,proto3" json:"commercial_category_id,omitempty"`
	Sellers              *Sellers               `protobuf:"bytes,7,opt,name=sellers,proto3" json:"sellers,omitempty"`
	State                string                 `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	BlockReason          int64                  `protobuf:"varint,9,opt,name=block_reason,json=blockReason,proto3" json:"block_reason,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UserIds              []int64                `protobuf:"varint,12,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	LastUpdateSource     string                 `protobuf:"bytes,13,opt,name=LastUpdateSource,proto3" json:"LastUpdateSource,omitempty"`
}

func (x *MetricsProductUpdate) Reset() {
	*x = MetricsProductUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsProductUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsProductUpdate) ProtoMessage() {}

func (x *MetricsProductUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsProductUpdate.ProtoReflect.Descriptor instead.
func (*MetricsProductUpdate) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{12}
}

func (x *MetricsProductUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MetricsProductUpdate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricsProductUpdate) GetFulfillment() int64 {
	if x != nil {
		return x.Fulfillment
	}
	return 0
}

func (x *MetricsProductUpdate) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *MetricsProductUpdate) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *MetricsProductUpdate) GetCommercialCategoryId() int64 {
	if x != nil {
		return x.CommercialCategoryId
	}
	return 0
}

func (x *MetricsProductUpdate) GetSellers() *Sellers {
	if x != nil {
		return x.Sellers
	}
	return nil
}

func (x *MetricsProductUpdate) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *MetricsProductUpdate) GetBlockReason() int64 {
	if x != nil {
		return x.BlockReason
	}
	return 0
}

func (x *MetricsProductUpdate) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MetricsProductUpdate) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MetricsProductUpdate) GetUserIds() []int64 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *MetricsProductUpdate) GetLastUpdateSource() string {
	if x != nil {
		return x.LastUpdateSource
	}
	return ""
}

type MetricsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MessageType:
	//	*MetricsMessage_ProductUpdate
	MessageType isMetricsMessage_MessageType `protobuf_oneof:"message_type"`
}

func (x *MetricsMessage) Reset() {
	*x = MetricsMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsMessage) ProtoMessage() {}

func (x *MetricsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsMessage.ProtoReflect.Descriptor instead.
func (*MetricsMessage) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{13}
}

func (m *MetricsMessage) GetMessageType() isMetricsMessage_MessageType {
	if m != nil {
		return m.MessageType
	}
	return nil
}

func (x *MetricsMessage) GetProductUpdate() *MetricsProductUpdate {
	if x, ok := x.GetMessageType().(*MetricsMessage_ProductUpdate); ok {
		return x.ProductUpdate
	}
	return nil
}

type isMetricsMessage_MessageType interface {
	isMetricsMessage_MessageType()
}

type MetricsMessage_ProductUpdate struct {
	ProductUpdate *MetricsProductUpdate `protobuf:"bytes,1,opt,name=product_update,json=productUpdate,proto3,oneof"`
}

func (*MetricsMessage_ProductUpdate) isMetricsMessage_MessageType() {}

type GetProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *GetProductRequest) Reset() {
	*x = GetProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductRequest) ProtoMessage() {}

func (x *GetProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductRequest.ProtoReflect.Descriptor instead.
func (*GetProductRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{14}
}

func (x *GetProductRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type GetProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product *Product `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
}

func (x *GetProductResponse) Reset() {
	*x = GetProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductResponse) ProtoMessage() {}

func (x *GetProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductResponse.ProtoReflect.Descriptor instead.
func (*GetProductResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{15}
}

func (x *GetProductResponse) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

type GetProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductIds []string `protobuf:"bytes,1,rep,name=product_ids,json=productIds,proto3" json:"product_ids,omitempty"`
}

func (x *GetProductsRequest) Reset() {
	*x = GetProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductsRequest) ProtoMessage() {}

func (x *GetProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductsRequest.ProtoReflect.Descriptor instead.
func (*GetProductsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{16}
}

func (x *GetProductsRequest) GetProductIds() []string {
	if x != nil {
		return x.ProductIds
	}
	return nil
}

type GetProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products []*Product `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *GetProductsResponse) Reset() {
	*x = GetProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductsResponse) ProtoMessage() {}

func (x *GetProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductsResponse.ProtoReflect.Descriptor instead.
func (*GetProductsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{17}
}

func (x *GetProductsResponse) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

type CreateProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products []*ProductForCreate `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *CreateProductsRequest) Reset() {
	*x = CreateProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProductsRequest) ProtoMessage() {}

func (x *CreateProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProductsRequest.ProtoReflect.Descriptor instead.
func (*CreateProductsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{18}
}

func (x *CreateProductsRequest) GetProducts() []*ProductForCreate {
	if x != nil {
		return x.Products
	}
	return nil
}

type UpdateProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products []*ProductForUpdate `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *UpdateProductsRequest) Reset() {
	*x = UpdateProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductsRequest) ProtoMessage() {}

func (x *UpdateProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductsRequest.ProtoReflect.Descriptor instead.
func (*UpdateProductsRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateProductsRequest) GetProducts() []*ProductForUpdate {
	if x != nil {
		return x.Products
	}
	return nil
}

type UpdateProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Errors  []*Error `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *UpdateProductsResponse) Reset() {
	*x = UpdateProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductsResponse) ProtoMessage() {}

func (x *UpdateProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductsResponse.ProtoReflect.Descriptor instead.
func (*UpdateProductsResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateProductsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateProductsResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type UpdateProductStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId   string `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	State       string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	BlockReason int64  `protobuf:"varint,3,opt,name=block_reason,json=blockReason,proto3" json:"block_reason,omitempty"`
}

func (x *UpdateProductStateRequest) Reset() {
	*x = UpdateProductStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductStateRequest) ProtoMessage() {}

func (x *UpdateProductStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateProductStateRequest) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateProductStateRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *UpdateProductStateRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *UpdateProductStateRequest) GetBlockReason() int64 {
	if x != nil {
		return x.BlockReason
	}
	return 0
}

type UpdateProductStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool              `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Errors  map[string]string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateProductStateResponse) Reset() {
	*x = UpdateProductStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductStateResponse) ProtoMessage() {}

func (x *UpdateProductStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductStateResponse.ProtoReflect.Descriptor instead.
func (*UpdateProductStateResponse) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateProductStateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateProductStateResponse) GetErrors() map[string]string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type Attribute_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Attribute_Value) Reset() {
	*x = Attribute_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute_Value) ProtoMessage() {}

func (x *Attribute_Value) ProtoReflect() protoreflect.Message {
	mi := &file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute_Value.ProtoReflect.Descriptor instead.
func (*Attribute_Value) Descriptor() ([]byte, []int) {
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Attribute_Value) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Attribute_Value) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto protoreflect.FileDescriptor

var file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDesc = []byte{
	0x0a, 0x51, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x75,
	0x2f, 0x6f, 0x63, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x39, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x57, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x75, 0x2f, 0x6f, 0x63, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x6c, 0x2d,
	0x64, 0x61, 0x74, 0x61, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x6c, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe1, 0x01, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x49,
	0x64, 0x12, 0x62, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x2d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x65, 0x70, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x65, 0x70, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4d,
	0x61, 0x69, 0x6e, 0x22, 0x47, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x04, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x64, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x76, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x58,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x22, 0xfe, 0x04, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x6f,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x64, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x7a,
	0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x76, 0x61, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e,
	0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x6f, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x22, 0xf9, 0x07, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x64, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x76, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x75, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x75,
	0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f,
	0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x7d, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x12, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x1a, 0x4d, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xec, 0x03, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x64, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e,
	0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x76, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72,
	0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x32,
	0x0a, 0x06, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6f, 0x67, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x67,
	0x72, 0x6e, 0x22, 0x66, 0x0a, 0x07, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a,
	0x07, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x1d, 0x0a, 0x05, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x83, 0x06, 0x0a, 0x10, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x64,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x76, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f,
	0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x69, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x1a, 0x4d, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x96, 0x04, 0x0a, 0x14, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x78, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x35, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x73, 0x22, 0x75, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f,
	0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x80,
	0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x7a, 0x6f,
	0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x58, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x22, 0x73, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xec, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x79,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61,
	0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x32, 0xe9, 0x06, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x50, 0x49, 0x12, 0xab, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x4c, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4d, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xae, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x12, 0x4d, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4e, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x50, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0xb7, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x12, 0x50, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc3, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x54, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f, 0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x55, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e, 0x6f,
	0x63, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x6f, 0x7a, 0x6f, 0x6e, 0x2e,
	0x72, 0x75, 0x2f, 0x6f, 0x63, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescOnce sync.Once
	file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescData = file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDesc
)

func file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescGZIP() []byte {
	file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescOnce.Do(func() {
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescData)
	})
	return file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDescData
}

var file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_goTypes = []interface{}{
	(*Attribute)(nil),                          // 0: dg.ocb.product_creation.product_storage_api.pkg.product.Attribute
	(*Image)(nil),                              // 1: dg.ocb.product_creation.product_storage_api.pkg.product.Image
	(*Error)(nil),                              // 2: dg.ocb.product_creation.product_storage_api.pkg.product.Error
	(*ProductToCreate)(nil),                    // 3: dg.ocb.product_creation.product_storage_api.pkg.product.ProductToCreate
	(*ProductToCorrect)(nil),                   // 4: dg.ocb.product_creation.product_storage_api.pkg.product.ProductToCorrect
	(*ProductToFill)(nil),                      // 5: dg.ocb.product_creation.product_storage_api.pkg.product.ProductToFill
	(*Product)(nil),                            // 6: dg.ocb.product_creation.product_storage_api.pkg.product.Product
	(*ProductForUpdate)(nil),                   // 7: dg.ocb.product_creation.product_storage_api.pkg.product.ProductForUpdate
	(*Seller)(nil),                             // 8: dg.ocb.product_creation.product_storage_api.pkg.product.Seller
	(*Sellers)(nil),                            // 9: dg.ocb.product_creation.product_storage_api.pkg.product.Sellers
	(*Brand)(nil),                              // 10: dg.ocb.product_creation.product_storage_api.pkg.product.Brand
	(*ProductForCreate)(nil),                   // 11: dg.ocb.product_creation.product_storage_api.pkg.product.ProductForCreate
	(*MetricsProductUpdate)(nil),               // 12: dg.ocb.product_creation.product_storage_api.pkg.product.MetricsProductUpdate
	(*MetricsMessage)(nil),                     // 13: dg.ocb.product_creation.product_storage_api.pkg.product.MetricsMessage
	(*GetProductRequest)(nil),                  // 14: dg.ocb.product_creation.product_storage_api.pkg.product.GetProductRequest
	(*GetProductResponse)(nil),                 // 15: dg.ocb.product_creation.product_storage_api.pkg.product.GetProductResponse
	(*GetProductsRequest)(nil),                 // 16: dg.ocb.product_creation.product_storage_api.pkg.product.GetProductsRequest
	(*GetProductsResponse)(nil),                // 17: dg.ocb.product_creation.product_storage_api.pkg.product.GetProductsResponse
	(*CreateProductsRequest)(nil),              // 18: dg.ocb.product_creation.product_storage_api.pkg.product.CreateProductsRequest
	(*UpdateProductsRequest)(nil),              // 19: dg.ocb.product_creation.product_storage_api.pkg.product.UpdateProductsRequest
	(*UpdateProductsResponse)(nil),             // 20: dg.ocb.product_creation.product_storage_api.pkg.product.UpdateProductsResponse
	(*UpdateProductStateRequest)(nil),          // 21: dg.ocb.product_creation.product_storage_api.pkg.product.UpdateProductStateRequest
	(*UpdateProductStateResponse)(nil),         // 22: dg.ocb.product_creation.product_storage_api.pkg.product.UpdateProductStateResponse
	(*Attribute_Value)(nil),                    // 23: dg.ocb.product_creation.product_storage_api.pkg.product.Attribute.Value
	nil,                                        // 24: dg.ocb.product_creation.product_storage_api.pkg.product.Product.MetaEntry
	nil,                                        // 25: dg.ocb.product_creation.product_storage_api.pkg.product.ProductForCreate.MetaEntry
	nil,                                        // 26: dg.ocb.product_creation.product_storage_api.pkg.product.UpdateProductStateResponse.ErrorsEntry
	(*timestamppb.Timestamp)(nil),              // 27: google.protobuf.Timestamp
	(*ml_data_consumer.CompetitorProduct)(nil), // 28: dg.ocb.product_creation.ml_data_consumer.pkg.competitor.CompetitorProduct
	(*anypb.Any)(nil),                          // 29: google.protobuf.Any
	(*emptypb.Empty)(nil),                      // 30: google.protobuf.Empty
}
var file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_depIdxs = []int32{
	23, // 0: dg.ocb.product_creation.product_storage_api.pkg.product.Attribute.values:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Attribute.Value
	0,  // 1: dg.ocb.product_creation.product_storage_api.pkg.product.ProductToCreate.attributes:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Attribute
	1,  // 2: dg.ocb.product_creation.product_storage_api.pkg.product.ProductToCreate.images:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Image
	0,  // 3: dg.ocb.product_creation.product_storage_api.pkg.product.ProductToCorrect.attributes:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Attribute
	1,  // 4: dg.ocb.product_creation.product_storage_api.pkg.product.ProductToCorrect.images:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Image
	2,  // 5: dg.ocb.product_creation.product_storage_api.pkg.product.ProductToCorrect.errors:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Error
	0,  // 6: dg.ocb.product_creation.product_storage_api.pkg.product.Product.attributes:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Attribute
	1,  // 7: dg.ocb.product_creation.product_storage_api.pkg.product.Product.images:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Image
	24, // 8: dg.ocb.product_creation.product_storage_api.pkg.product.Product.meta:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Product.MetaEntry
	27, // 9: dg.ocb.product_creation.product_storage_api.pkg.product.Product.created_at:type_name -> google.protobuf.Timestamp
	27, // 10: dg.ocb.product_creation.product_storage_api.pkg.product.Product.updated_at:type_name -> google.protobuf.Timestamp
	28, // 11: dg.ocb.product_creation.product_storage_api.pkg.product.Product.competitor_products:type_name -> dg.ocb.product_creation.ml_data_consumer.pkg.competitor.CompetitorProduct
	0,  // 12: dg.ocb.product_creation.product_storage_api.pkg.product.ProductForUpdate.attributes:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Attribute
	1,  // 13: dg.ocb.product_creation.product_storage_api.pkg.product.ProductForUpdate.images:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Image
	8,  // 14: dg.ocb.product_creation.product_storage_api.pkg.product.Sellers.sellers:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Seller
	0,  // 15: dg.ocb.product_creation.product_storage_api.pkg.product.ProductForCreate.attributes:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Attribute
	1,  // 16: dg.ocb.product_creation.product_storage_api.pkg.product.ProductForCreate.images:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Image
	25, // 17: dg.ocb.product_creation.product_storage_api.pkg.product.ProductForCreate.meta:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.ProductForCreate.MetaEntry
	9,  // 18: dg.ocb.product_creation.product_storage_api.pkg.product.MetricsProductUpdate.sellers:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Sellers
	27, // 19: dg.ocb.product_creation.product_storage_api.pkg.product.MetricsProductUpdate.created_at:type_name -> google.protobuf.Timestamp
	27, // 20: dg.ocb.product_creation.product_storage_api.pkg.product.MetricsProductUpdate.updated_at:type_name -> google.protobuf.Timestamp
	12, // 21: dg.ocb.product_creation.product_storage_api.pkg.product.MetricsMessage.product_update:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.MetricsProductUpdate
	6,  // 22: dg.ocb.product_creation.product_storage_api.pkg.product.GetProductResponse.product:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Product
	6,  // 23: dg.ocb.product_creation.product_storage_api.pkg.product.GetProductsResponse.products:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Product
	11, // 24: dg.ocb.product_creation.product_storage_api.pkg.product.CreateProductsRequest.products:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.ProductForCreate
	7,  // 25: dg.ocb.product_creation.product_storage_api.pkg.product.UpdateProductsRequest.products:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.ProductForUpdate
	2,  // 26: dg.ocb.product_creation.product_storage_api.pkg.product.UpdateProductsResponse.errors:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.Error
	26, // 27: dg.ocb.product_creation.product_storage_api.pkg.product.UpdateProductStateResponse.errors:type_name -> dg.ocb.product_creation.product_storage_api.pkg.product.UpdateProductStateResponse.ErrorsEntry
	29, // 28: dg.ocb.product_creation.product_storage_api.pkg.product.Product.MetaEntry.value:type_name -> google.protobuf.Any
	29, // 29: dg.ocb.product_creation.product_storage_api.pkg.product.ProductForCreate.MetaEntry.value:type_name -> google.protobuf.Any
	14, // 30: dg.ocb.product_creation.product_storage_api.pkg.product.ProductAPI.GetProduct:input_type -> dg.ocb.product_creation.product_storage_api.pkg.product.GetProductRequest
	16, // 31: dg.ocb.product_creation.product_storage_api.pkg.product.ProductAPI.GetProducts:input_type -> dg.ocb.product_creation.product_storage_api.pkg.product.GetProductsRequest
	18, // 32: dg.ocb.product_creation.product_storage_api.pkg.product.ProductAPI.CreateProducts:input_type -> dg.ocb.product_creation.product_storage_api.pkg.product.CreateProductsRequest
	19, // 33: dg.ocb.product_creation.product_storage_api.pkg.product.ProductAPI.UpdateProducts:input_type -> dg.ocb.product_creation.product_storage_api.pkg.product.UpdateProductsRequest
	21, // 34: dg.ocb.product_creation.product_storage_api.pkg.product.ProductAPI.UpdateProductState:input_type -> dg.ocb.product_creation.product_storage_api.pkg.product.UpdateProductStateRequest
	15, // 35: dg.ocb.product_creation.product_storage_api.pkg.product.ProductAPI.GetProduct:output_type -> dg.ocb.product_creation.product_storage_api.pkg.product.GetProductResponse
	17, // 36: dg.ocb.product_creation.product_storage_api.pkg.product.ProductAPI.GetProducts:output_type -> dg.ocb.product_creation.product_storage_api.pkg.product.GetProductsResponse
	30, // 37: dg.ocb.product_creation.product_storage_api.pkg.product.ProductAPI.CreateProducts:output_type -> google.protobuf.Empty
	20, // 38: dg.ocb.product_creation.product_storage_api.pkg.product.ProductAPI.UpdateProducts:output_type -> dg.ocb.product_creation.product_storage_api.pkg.product.UpdateProductsResponse
	22, // 39: dg.ocb.product_creation.product_storage_api.pkg.product.ProductAPI.UpdateProductState:output_type -> dg.ocb.product_creation.product_storage_api.pkg.product.UpdateProductStateResponse
	35, // [35:40] is the sub-list for method output_type
	30, // [30:35] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() {
	file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_init()
}
func file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_init() {
	if File_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductToCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductToCorrect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductToFill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductForUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Seller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sellers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Brand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductForCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsProductUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*MetricsMessage_ProductUpdate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_goTypes,
		DependencyIndexes: file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_depIdxs,
		MessageInfos:      file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_msgTypes,
	}.Build()
	File_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto = out.File
	file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_rawDesc = nil
	file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_goTypes = nil
	file_gitlab_dg_ru_ocb_product_creation_product_storage_api_api_product_product_proto_depIdxs = nil
}
